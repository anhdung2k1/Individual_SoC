module PrimeNumberGenerator (
    input wire clk,               // Clock signal
    input wire reset_n,           // Active-low reset
    input wire write,             // Avalon-MM write signal
    input wire [2:0] address,     // Address signal (function + data)
    input wire [31:0] writedata,  // Data input
    output reg [31:0] readdata,   // Data output
    output reg [1:0] response,    // Write response signal
    output reg writeresponsevalid,// Write response valid signal
    output reg done               // Completion flag
);
    // Function selector (based on address[2])
    localparam FUNC_ADDER       = 3'b000;
    localparam FUNC_MULTIPLIER  = 3'b001;
    localparam FUNC_PRIME_GEN   = 3'b010;

    // Internal Registers for Adder
    reg [31:0] p1, p2;

    // Internal Registers for Multiplier
    reg [31:0] m1, m2;

    // Internal Registers for Prime Number Generator
    reg [9:0] max;
    reg [31:0] primes [0:255];
    integer i, j;
    reg is_prime;

    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            // Reset all states
            p1 <= 0; p2 <= 0;
            m1 <= 0; m2 <= 0;
            max <= 0;
            readdata <= 0;
            response <= 2'b00;
            writeresponsevalid <= 0;
            done <= 0;
            for (i = 0; i < 256; i = i + 1) primes[i] <= 0;
        end else begin
            if (write) begin
                // Handle write operations
                case (address[2:0])
                    FUNC_ADDER: begin
                        if (address[1:0] == 2'b00) p1 <= writedata;
                        if (address[1:0] == 2'b01) p2 <= writedata;
                        done <= 0;
                    end
                    FUNC_MULTIPLIER: begin
                        if (address[1:0] == 2'b00) m1 <= writedata;
                        if (address[1:0] == 2'b01) m2 <= writedata;
                        done <= 0;
                    end
                    FUNC_PRIME_GEN: begin
                        if (address[1:0] == 2'b00) max <= writedata[9:0];
                        done <= 0;
                    end
                endcase
                response <= 2'b00;
                writeresponsevalid <= 1;
            end else begin
                // Handle read or operation completion
                case (address[2:0])
                    FUNC_ADDER: begin
                        if (!done) begin
                            readdata <= p1 + p2;
                            done <= 1;
                        end
                    end
                    FUNC_MULTIPLIER: begin
                        if (!done) begin
                            readdata <= m1 * m2;
                            done <= 1;
                        end
                    end
                    FUNC_PRIME_GEN: begin
                        if (!done) begin
                            j = 0;
                            for (i = 2; i <= max; i = i + 1) begin
                                is_prime = 1;
                                for (j = 2; j * j <= i; j = j + 1) begin
                                    if (i % j == 0) begin
                                        is_prime = 0;
                                        break;
                                    end
                                end
                                if (is_prime) begin
                                    primes[j] <= i;
                                    j = j + 1;
                                end
                            end
                            done <= 1;
                        end else if (address[1:0] == 2'b01) begin
                            readdata <= primes[writedata];
                        end
                    end
                endcase
                writeresponsevalid <= 0;
            end
        end
    end
endmodule
