
prime_number.elf:     file format elf32-littlenios2
prime_number.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000024a0 memsz 0x000024a0 flags r-x
    LOAD off    0x000034c0 vaddr 0x0000a4c0 paddr 0x0000a794 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003a68 vaddr 0x0000aa68 paddr 0x0000aa68 align 2**12
         filesz 0x00000000 memsz 0x00000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00003794  2**0
                  CONTENTS
  2 .text         000023bc  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e4  0000a3dc  0000a3dc  000033dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000a4c0  0000a794  000034c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  0000aa68  0000aa68  00003a68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000ae90  0000ae90  00003794  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000580  00000000  00000000  000037b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000838f  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a6e  00000000  00000000  0000c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003163  00000000  00000000  0000eb35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b38  00000000  00000000  00011c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000187c  00000000  00000000  000127d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017c6  00000000  00000000  0001404c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015814  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000280  00000000  00000000  00015828  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00017372  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00017375  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017381  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00017382  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00017383  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001738e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00017399  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000173a4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000015  00000000  00000000  000173aa  2**0
                  CONTENTS, READONLY
 26 .jdi          000063ef  00000000  00000000  000173bf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004870e  00000000  00000000  0001d7ae  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000a3dc l    d  .rodata	00000000 .rodata
0000a4c0 l    d  .rwdata	00000000 .rwdata
0000aa68 l    d  .bss	00000000 .bss
0000ae90 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prime_number_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008960 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a4c0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000090d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009374 l     F .text	00000034 alt_dev_reg
0000a5a0 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00009654 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009788 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000097b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009974 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009ad4 l     F .text	0000003c alt_get_errno
00009b10 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008894 g     F .text	0000001c putchar
000091bc g     F .text	0000007c alt_main
000088b0 g     F .text	00000080 _puts_r
0000824c g     F .text	000000c0 handle_write
0000a794 g       *ABS*	00000000 __flash_rwdata_start
00008588 g     F .text	00000080 write_to_hex_decoders_2
000083d0 g     F .text	000000ac generate_primes
00008840 g     F .text	0000004c printf
00009ddc g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000aa6c g     O .bss	00000004 p2
0000aa80 g     O .bss	00000004 errno
0000aa88 g     O .bss	00000004 alt_argv
00012774 g       *ABS*	00000000 _gp
0000a5f4 g     O .rwdata	00000180 alt_fd_list
0000888c g     F .text	00000008 _putchar_r
00009e00 g     F .text	00000090 alt_find_dev
00009a58 g     F .text	0000007c alt_io_redirect
0000a3dc g       *ABS*	00000000 __DTOR_END__
00008930 g     F .text	00000014 puts
000094d4 g     F .text	000000ec altera_avalon_jtag_uart_read
00008804 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008700 g     F .text	00000064 .hidden __udivsi3
0000a78c g     O .rwdata	00000004 alt_max_fd
0000aa74 g     O .bss	00000004 m2
0000a774 g     O .rwdata	00000004 _global_impure_ptr
0000ae90 g       *ABS*	00000000 __bss_end
0000a5cc g     O .rwdata	00000028 alt_dev_null
00009768 g     F .text	00000020 alt_dcache_flush_all
0000aa68 g     O .bss	00000004 p1
0000a794 g       *ABS*	00000000 __ram_rwdata_end
0000a784 g     O .rwdata	00000008 alt_dev_list
00009274 g     F .text	00000100 write
00009020 g     F .text	00000058 _putc_r
0000a4c0 g       *ABS*	00000000 __ram_rodata_end
00008764 g     F .text	00000058 .hidden __umodsi3
0000ae90 g       *ABS*	00000000 end
0000a3dc g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000095c0 g     F .text	00000094 altera_avalon_jtag_uart_write
00008508 g     F .text	00000080 write_to_hex_decoders_1
000089cc g     F .text	0000052c ___vfprintf_internal_r
0000a218 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
0000847c g     F .text	0000008c is_prime
000093e0 g     F .text	00000034 alt_sys_init
0000a0c0 g     F .text	00000158 __register_exitproc
000087bc g     F .text	00000028 .hidden __mulsi3
0000a4c0 g       *ABS*	00000000 __ram_rwdata_start
0000a3dc g       *ABS*	00000000 __ram_rodata_start
00009414 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009f98 g     F .text	000000c4 alt_get_fd
0000aa78 g     O .bss	00000004 max
0000a090 g     F .text	00000030 memcmp
0000ae90 g       *ABS*	00000000 __alt_stack_base
0000aa90 g     O .bss	00000400 primes
00009e90 g     F .text	00000108 alt_find_file
000097f0 g     F .text	000000a4 alt_dev_llist_insert
00008f14 g     F .text	000000b8 __sfvwrite_small_dev
0000aa68 g       *ABS*	00000000 __bss_start
000087e4 g     F .text	00000020 memset
0000805c g     F .text	000001f0 main
0000aa8c g     O .bss	00000004 alt_envp
00009474 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a790 g     O .rwdata	00000004 alt_errno
00008fcc g     F .text	00000054 putc
00008608 g     F .text	00000084 .hidden __divsi3
0000a3dc g       *ABS*	00000000 __CTOR_END__
0000a3dc g       *ABS*	00000000 __flash_rodata_start
0000a3dc g       *ABS*	00000000 __DTOR_LIST__
000093a8 g     F .text	00000038 alt_irq_init
00009d58 g     F .text	00000084 alt_release_fd
0000a05c g     F .text	00000014 atexit
00009078 g     F .text	00000058 _write_r
0000a778 g     O .rwdata	00000004 _impure_ptr
0000aa84 g     O .bss	00000004 alt_argc
000098f4 g     F .text	00000060 _do_dtors
0000a77c g     O .rwdata	00000008 alt_fs_list
0000aa70 g     O .bss	00000004 m1
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000aa7c g     O .bss	00000004 oData
0000a794 g       *ABS*	00000000 _edata
0000ae90 g       *ABS*	00000000 _end
0000830c g     F .text	000000c4 handle_read
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000a070 g     F .text	00000020 exit
0000868c g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a3a8 g     F .text	00000034 _exit
00008944 g     F .text	0000001c strlen
00009bfc g     F .text	0000015c open
00009954 g     F .text	00000020 alt_icache_flush_all
00008ef8 g     F .text	0000001c __vfprintf_internal
00009894 g     F .text	00000060 _do_ctors
00009690 g     F .text	000000d8 close
00009138 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d689dd14 	ori	gp,gp,10100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aa9a14 	ori	r2,r2,43624

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eba414 	ori	r3,r3,44688

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff58d0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00091380 	call	9138 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00091bc0 	call	91bc <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff58e4>

0000805c <main>:
void generate_primes(uint32_t max);
bool is_prime(uint32_t number);
void write_to_hex_decoders_1(uint32_t value);
void write_to_hex_decoders_2(uint32_t value);

int main() {
    805c:	defff404 	addi	sp,sp,-48
    8060:	dfc00b15 	stw	ra,44(sp)
    8064:	df000a15 	stw	fp,40(sp)
    8068:	df000a04 	addi	fp,sp,40
    printf("========== Starting Prime Number Generator ===========\n");
    806c:	01000074 	movhi	r4,1
    8070:	2128f704 	addi	r4,r4,-23588
    8074:	00089300 	call	8930 <puts>

    while (1) {
        // Read switch values
        uint32_t switches = IORD(SWITCHES_0_BASE, 0);
    8078:	00800074 	movhi	r2,1
    807c:	10840c04 	addi	r2,r2,4144
    8080:	10800037 	ldwio	r2,0(r2)
    8084:	e0bff715 	stw	r2,-36(fp)

        // Generate primes based on SW[7:0]
        uint32_t start_prime = (switches & 0xFF);
    8088:	e0bff717 	ldw	r2,-36(fp)
    808c:	10803fcc 	andi	r2,r2,255
    8090:	e0bff815 	stw	r2,-32(fp)
        handle_write(FUNC_PRIME_GEN, start_prime + 255);
    8094:	e0bff817 	ldw	r2,-32(fp)
    8098:	10803fc4 	addi	r2,r2,255
    809c:	100b883a 	mov	r5,r2
    80a0:	01000104 	movi	r4,4
    80a4:	000824c0 	call	824c <handle_write>

        // Use SW9 to control multiplier
        if (switches & 0x200) { // SW9 enabled
    80a8:	e0bff717 	ldw	r2,-36(fp)
    80ac:	1080800c 	andi	r2,r2,512
    80b0:	10001e26 	beq	r2,zero,812c <main+0xd0>
            uint32_t multiplier_input1 = handle_read(FUNC_PRIME_GEN, (switches & 0xF0) >> 4); // Use upper nibble of SW[7:0]
    80b4:	e0bff717 	ldw	r2,-36(fp)
    80b8:	10803c0c 	andi	r2,r2,240
    80bc:	1004d13a 	srli	r2,r2,4
    80c0:	100b883a 	mov	r5,r2
    80c4:	01000104 	movi	r4,4
    80c8:	000830c0 	call	830c <handle_read>
    80cc:	e0bff915 	stw	r2,-28(fp)
            uint32_t multiplier_input2 = handle_read(FUNC_PRIME_GEN, switches & 0xF); // Use lower nibble of SW[7:0]
    80d0:	e0bff717 	ldw	r2,-36(fp)
    80d4:	108003cc 	andi	r2,r2,15
    80d8:	100b883a 	mov	r5,r2
    80dc:	01000104 	movi	r4,4
    80e0:	000830c0 	call	830c <handle_read>
    80e4:	e0bffa15 	stw	r2,-24(fp)
            handle_write(FUNC_MULTIPLIER, multiplier_input1); // Write to m1
    80e8:	e17ff917 	ldw	r5,-28(fp)
    80ec:	01000084 	movi	r4,2
    80f0:	000824c0 	call	824c <handle_write>
            handle_write(FUNC_MULTIPLIER_M2, multiplier_input2); // Write to m2
    80f4:	e17ffa17 	ldw	r5,-24(fp)
    80f8:	010000c4 	movi	r4,3
    80fc:	000824c0 	call	824c <handle_write>
            uint32_t multiplier_result = handle_read(FUNC_MULTIPLIER, 0);
    8100:	000b883a 	mov	r5,zero
    8104:	01000084 	movi	r4,2
    8108:	000830c0 	call	830c <handle_read>
    810c:	e0bffb15 	stw	r2,-20(fp)
            printf("Multiplier result: %u\n", (unsigned int)multiplier_result);
    8110:	e17ffb17 	ldw	r5,-20(fp)
    8114:	01000074 	movhi	r4,1
    8118:	21290504 	addi	r4,r4,-23532
    811c:	00088400 	call	8840 <printf>
            write_to_hex_decoders_2(multiplier_result); // Display result on HEX2 and HEX3
    8120:	e13ffb17 	ldw	r4,-20(fp)
    8124:	00085880 	call	8588 <write_to_hex_decoders_2>
    8128:	00000806 	br	814c <main+0xf0>
        } else {
            // Clear HEX2 and HEX3 when SW9 is off
            IOWR(HEXDECODER_2_BASE, 0, 0);
    812c:	0007883a 	mov	r3,zero
    8130:	00800074 	movhi	r2,1
    8134:	10840e04 	addi	r2,r2,4152
    8138:	10c00035 	stwio	r3,0(r2)
            IOWR(HEXDECODER_3_BASE, 0, 0);
    813c:	0007883a 	mov	r3,zero
    8140:	00800074 	movhi	r2,1
    8144:	10840d04 	addi	r2,r2,4148
    8148:	10c00035 	stwio	r3,0(r2)
        }

        // Use SW8 to control adder
        if (switches & 0x100) { // SW8 enabled
    814c:	e0bff717 	ldw	r2,-36(fp)
    8150:	1080400c 	andi	r2,r2,256
    8154:	10001e26 	beq	r2,zero,81d0 <main+0x174>
            uint32_t adder_input1 = handle_read(FUNC_PRIME_GEN, (switches & 0xF0) >> 4); // Use upper nibble of SW[7:0]
    8158:	e0bff717 	ldw	r2,-36(fp)
    815c:	10803c0c 	andi	r2,r2,240
    8160:	1004d13a 	srli	r2,r2,4
    8164:	100b883a 	mov	r5,r2
    8168:	01000104 	movi	r4,4
    816c:	000830c0 	call	830c <handle_read>
    8170:	e0bffc15 	stw	r2,-16(fp)
            uint32_t adder_input2 = handle_read(FUNC_PRIME_GEN, switches & 0xF); // Use lower nibble of SW[7:0]
    8174:	e0bff717 	ldw	r2,-36(fp)
    8178:	108003cc 	andi	r2,r2,15
    817c:	100b883a 	mov	r5,r2
    8180:	01000104 	movi	r4,4
    8184:	000830c0 	call	830c <handle_read>
    8188:	e0bffd15 	stw	r2,-12(fp)
            handle_write(FUNC_ADDER, adder_input1); // Write to p1
    818c:	e17ffc17 	ldw	r5,-16(fp)
    8190:	0009883a 	mov	r4,zero
    8194:	000824c0 	call	824c <handle_write>
            handle_write(FUNC_ADDER_P2, adder_input2); // Write to p2
    8198:	e17ffd17 	ldw	r5,-12(fp)
    819c:	01000044 	movi	r4,1
    81a0:	000824c0 	call	824c <handle_write>
            uint32_t adder_result = handle_read(FUNC_ADDER, 0);
    81a4:	000b883a 	mov	r5,zero
    81a8:	0009883a 	mov	r4,zero
    81ac:	000830c0 	call	830c <handle_read>
    81b0:	e0bffe15 	stw	r2,-8(fp)
            printf("Adder result: %u\n", (unsigned int)adder_result);
    81b4:	e17ffe17 	ldw	r5,-8(fp)
    81b8:	01000074 	movhi	r4,1
    81bc:	21290b04 	addi	r4,r4,-23508
    81c0:	00088400 	call	8840 <printf>
            write_to_hex_decoders_1(adder_result); // Display result on HEX0 and HEX1
    81c4:	e13ffe17 	ldw	r4,-8(fp)
    81c8:	00085080 	call	8508 <write_to_hex_decoders_1>
    81cc:	00000806 	br	81f0 <main+0x194>
        } else {
            // Clear HEX0 and HEX1 when SW8 is off
            IOWR(HEXDECODER_0_BASE, 0, 0);
    81d0:	0007883a 	mov	r3,zero
    81d4:	00800074 	movhi	r2,1
    81d8:	10841004 	addi	r2,r2,4160
    81dc:	10c00035 	stwio	r3,0(r2)
            IOWR(HEXDECODER_1_BASE, 0, 0);
    81e0:	0007883a 	mov	r3,zero
    81e4:	00800074 	movhi	r2,1
    81e8:	10840f04 	addi	r2,r2,4156
    81ec:	10c00035 	stwio	r3,0(r2)
        }

        // Print the first 10 primes for debugging
        printf("Generated primes: ");
    81f0:	01000074 	movhi	r4,1
    81f4:	21291004 	addi	r4,r4,-23488
    81f8:	00088400 	call	8840 <printf>
        for (int i = 0; i < 10; i++) {
    81fc:	e03ff615 	stw	zero,-40(fp)
    8200:	00000c06 	br	8234 <main+0x1d8>
            uint32_t prime = handle_read(FUNC_PRIME_GEN, i);
    8204:	e0bff617 	ldw	r2,-40(fp)
    8208:	100b883a 	mov	r5,r2
    820c:	01000104 	movi	r4,4
    8210:	000830c0 	call	830c <handle_read>
    8214:	e0bfff15 	stw	r2,-4(fp)
            printf("%u ", (unsigned int)prime);
    8218:	e17fff17 	ldw	r5,-4(fp)
    821c:	01000074 	movhi	r4,1
    8220:	21291504 	addi	r4,r4,-23468
    8224:	00088400 	call	8840 <printf>
            IOWR(HEXDECODER_1_BASE, 0, 0);
        }

        // Print the first 10 primes for debugging
        printf("Generated primes: ");
        for (int i = 0; i < 10; i++) {
    8228:	e0bff617 	ldw	r2,-40(fp)
    822c:	10800044 	addi	r2,r2,1
    8230:	e0bff615 	stw	r2,-40(fp)
    8234:	e0bff617 	ldw	r2,-40(fp)
    8238:	10800290 	cmplti	r2,r2,10
    823c:	103ff11e 	bne	r2,zero,8204 <_gp+0xffff5a90>
            uint32_t prime = handle_read(FUNC_PRIME_GEN, i);
            printf("%u ", (unsigned int)prime);
        }
        printf("\n");
    8240:	01000284 	movi	r4,10
    8244:	00088940 	call	8894 <putchar>
    }
    8248:	003f8b06 	br	8078 <_gp+0xffff5904>

0000824c <handle_write>:

    return 0;
}

void handle_write(uint8_t address, uint32_t data) {
    824c:	defffc04 	addi	sp,sp,-16
    8250:	dfc00315 	stw	ra,12(sp)
    8254:	df000215 	stw	fp,8(sp)
    8258:	df000204 	addi	fp,sp,8
    825c:	2005883a 	mov	r2,r4
    8260:	e17fff15 	stw	r5,-4(fp)
    8264:	e0bffe05 	stb	r2,-8(fp)
    switch (address) {
    8268:	e0bffe03 	ldbu	r2,-8(fp)
    826c:	10c00168 	cmpgeui	r3,r2,5
    8270:	18001d1e 	bne	r3,zero,82e8 <handle_write+0x9c>
    8274:	100690ba 	slli	r3,r2,2
    8278:	00800074 	movhi	r2,1
    827c:	10a0a304 	addi	r2,r2,-32116
    8280:	1885883a 	add	r2,r3,r2
    8284:	10800017 	ldw	r2,0(r2)
    8288:	1000683a 	jmp	r2
    828c:	000082a0 	cmpeqi	zero,zero,522
    8290:	000082ac 	andhi	zero,zero,522
    8294:	000082b8 	rdprs	zero,zero,522
    8298:	000082c4 	movi	zero,523
    829c:	000082d0 	cmplti	zero,zero,523
        case FUNC_ADDER:
            p1 = data;
    82a0:	e0bfff17 	ldw	r2,-4(fp)
    82a4:	d0a0bd15 	stw	r2,-32012(gp)
            break;
    82a8:	00001206 	br	82f4 <handle_write+0xa8>
        case FUNC_ADDER_P2:
            p2 = data;
    82ac:	e0bfff17 	ldw	r2,-4(fp)
    82b0:	d0a0be15 	stw	r2,-32008(gp)
            break;
    82b4:	00000f06 	br	82f4 <handle_write+0xa8>
        case FUNC_MULTIPLIER:
            m1 = data;
    82b8:	e0bfff17 	ldw	r2,-4(fp)
    82bc:	d0a0bf15 	stw	r2,-32004(gp)
            break;
    82c0:	00000c06 	br	82f4 <handle_write+0xa8>
        case FUNC_MULTIPLIER_M2:
            m2 = data;
    82c4:	e0bfff17 	ldw	r2,-4(fp)
    82c8:	d0a0c015 	stw	r2,-32000(gp)
            break;
    82cc:	00000906 	br	82f4 <handle_write+0xa8>
        case FUNC_PRIME_GEN:
            max = data;
    82d0:	e0bfff17 	ldw	r2,-4(fp)
    82d4:	d0a0c115 	stw	r2,-31996(gp)
            generate_primes(max);
    82d8:	d0a0c117 	ldw	r2,-31996(gp)
    82dc:	1009883a 	mov	r4,r2
    82e0:	00083d00 	call	83d0 <generate_primes>
            break;
    82e4:	00000306 	br	82f4 <handle_write+0xa8>
        default:
            printf("Invalid write address\n");
    82e8:	01000074 	movhi	r4,1
    82ec:	21291604 	addi	r4,r4,-23464
    82f0:	00089300 	call	8930 <puts>
    }
}
    82f4:	0001883a 	nop
    82f8:	e037883a 	mov	sp,fp
    82fc:	dfc00117 	ldw	ra,4(sp)
    8300:	df000017 	ldw	fp,0(sp)
    8304:	dec00204 	addi	sp,sp,8
    8308:	f800283a 	ret

0000830c <handle_read>:

uint32_t handle_read(uint8_t address, uint32_t index) {
    830c:	defffc04 	addi	sp,sp,-16
    8310:	dfc00315 	stw	ra,12(sp)
    8314:	df000215 	stw	fp,8(sp)
    8318:	df000204 	addi	fp,sp,8
    831c:	2005883a 	mov	r2,r4
    8320:	e17fff15 	stw	r5,-4(fp)
    8324:	e0bffe05 	stb	r2,-8(fp)
    switch (address) {
    8328:	e0bffe03 	ldbu	r2,-8(fp)
    832c:	10c000a0 	cmpeqi	r3,r2,2
    8330:	1800081e 	bne	r3,zero,8354 <handle_read+0x48>
    8334:	10c00120 	cmpeqi	r3,r2,4
    8338:	18000d1e 	bne	r3,zero,8370 <handle_read+0x64>
    833c:	10001a1e 	bne	r2,zero,83a8 <handle_read+0x9c>
        case FUNC_ADDER:
            oData = p1 + p2;
    8340:	d0e0bd17 	ldw	r3,-32012(gp)
    8344:	d0a0be17 	ldw	r2,-32008(gp)
    8348:	1885883a 	add	r2,r3,r2
    834c:	d0a0c215 	stw	r2,-31992(gp)
            break;
    8350:	00001906 	br	83b8 <handle_read+0xac>
        case FUNC_MULTIPLIER:
            oData = m1 * m2;
    8354:	d0a0bf17 	ldw	r2,-32004(gp)
    8358:	d0e0c017 	ldw	r3,-32000(gp)
    835c:	180b883a 	mov	r5,r3
    8360:	1009883a 	mov	r4,r2
    8364:	00087bc0 	call	87bc <__mulsi3>
    8368:	d0a0c215 	stw	r2,-31992(gp)
            break;
    836c:	00001206 	br	83b8 <handle_read+0xac>
        case FUNC_PRIME_GEN:
            if (index < 256) {
    8370:	e0bfff17 	ldw	r2,-4(fp)
    8374:	10804028 	cmpgeui	r2,r2,256
    8378:	1000091e 	bne	r2,zero,83a0 <handle_read+0x94>
                oData = primes[index];
    837c:	00800074 	movhi	r2,1
    8380:	10aaa404 	addi	r2,r2,-21872
    8384:	e0ffff17 	ldw	r3,-4(fp)
    8388:	18c7883a 	add	r3,r3,r3
    838c:	18c7883a 	add	r3,r3,r3
    8390:	10c5883a 	add	r2,r2,r3
    8394:	10800017 	ldw	r2,0(r2)
    8398:	d0a0c215 	stw	r2,-31992(gp)
            } else {
                oData = 0; // Return 0 for out-of-bound indices
            }
            break;
    839c:	00000606 	br	83b8 <handle_read+0xac>
            break;
        case FUNC_PRIME_GEN:
            if (index < 256) {
                oData = primes[index];
            } else {
                oData = 0; // Return 0 for out-of-bound indices
    83a0:	d020c215 	stw	zero,-31992(gp)
            }
            break;
    83a4:	00000406 	br	83b8 <handle_read+0xac>
        default:
            printf("Invalid read address\n");
    83a8:	01000074 	movhi	r4,1
    83ac:	21291c04 	addi	r4,r4,-23440
    83b0:	00089300 	call	8930 <puts>
            oData = 0;
    83b4:	d020c215 	stw	zero,-31992(gp)
    }
    return oData;
    83b8:	d0a0c217 	ldw	r2,-31992(gp)
}
    83bc:	e037883a 	mov	sp,fp
    83c0:	dfc00117 	ldw	ra,4(sp)
    83c4:	df000017 	ldw	fp,0(sp)
    83c8:	dec00204 	addi	sp,sp,8
    83cc:	f800283a 	ret

000083d0 <generate_primes>:

void generate_primes(uint32_t max) {
    83d0:	defffb04 	addi	sp,sp,-20
    83d4:	dfc00415 	stw	ra,16(sp)
    83d8:	df000315 	stw	fp,12(sp)
    83dc:	df000304 	addi	fp,sp,12
    83e0:	e13fff15 	stw	r4,-4(fp)
    memset(primes, 0, sizeof(primes));
    83e4:	01810004 	movi	r6,1024
    83e8:	000b883a 	mov	r5,zero
    83ec:	01000074 	movhi	r4,1
    83f0:	212aa404 	addi	r4,r4,-21872
    83f4:	00087e40 	call	87e4 <memset>
    uint32_t count = 0;
    83f8:	e03ffd15 	stw	zero,-12(fp)
    for (uint32_t i = 2; i <= max && count < 256; i++) {
    83fc:	00800084 	movi	r2,2
    8400:	e0bffe15 	stw	r2,-8(fp)
    8404:	00001106 	br	844c <generate_primes+0x7c>
        if (is_prime(i)) {
    8408:	e13ffe17 	ldw	r4,-8(fp)
    840c:	000847c0 	call	847c <is_prime>
    8410:	10803fcc 	andi	r2,r2,255
    8414:	10000a26 	beq	r2,zero,8440 <generate_primes+0x70>
            primes[count++] = i;
    8418:	e0fffd17 	ldw	r3,-12(fp)
    841c:	18800044 	addi	r2,r3,1
    8420:	e0bffd15 	stw	r2,-12(fp)
    8424:	00800074 	movhi	r2,1
    8428:	10aaa404 	addi	r2,r2,-21872
    842c:	18c7883a 	add	r3,r3,r3
    8430:	18c7883a 	add	r3,r3,r3
    8434:	10c5883a 	add	r2,r2,r3
    8438:	e0fffe17 	ldw	r3,-8(fp)
    843c:	10c00015 	stw	r3,0(r2)
}

void generate_primes(uint32_t max) {
    memset(primes, 0, sizeof(primes));
    uint32_t count = 0;
    for (uint32_t i = 2; i <= max && count < 256; i++) {
    8440:	e0bffe17 	ldw	r2,-8(fp)
    8444:	10800044 	addi	r2,r2,1
    8448:	e0bffe15 	stw	r2,-8(fp)
    844c:	e0bffe17 	ldw	r2,-8(fp)
    8450:	e0ffff17 	ldw	r3,-4(fp)
    8454:	18800336 	bltu	r3,r2,8464 <generate_primes+0x94>
    8458:	e0bffd17 	ldw	r2,-12(fp)
    845c:	10804030 	cmpltui	r2,r2,256
    8460:	103fe91e 	bne	r2,zero,8408 <_gp+0xffff5c94>
        if (is_prime(i)) {
            primes[count++] = i;
        }
    }
}
    8464:	0001883a 	nop
    8468:	e037883a 	mov	sp,fp
    846c:	dfc00117 	ldw	ra,4(sp)
    8470:	df000017 	ldw	fp,0(sp)
    8474:	dec00204 	addi	sp,sp,8
    8478:	f800283a 	ret

0000847c <is_prime>:

bool is_prime(uint32_t number) {
    847c:	defffc04 	addi	sp,sp,-16
    8480:	dfc00315 	stw	ra,12(sp)
    8484:	df000215 	stw	fp,8(sp)
    8488:	df000204 	addi	fp,sp,8
    848c:	e13fff15 	stw	r4,-4(fp)
    if (number < 2) return false;
    8490:	e0bfff17 	ldw	r2,-4(fp)
    8494:	108000a8 	cmpgeui	r2,r2,2
    8498:	1000021e 	bne	r2,zero,84a4 <is_prime+0x28>
    849c:	0005883a 	mov	r2,zero
    84a0:	00001406 	br	84f4 <is_prime+0x78>
    for (uint32_t i = 2; i * i <= number; i++) {
    84a4:	00800084 	movi	r2,2
    84a8:	e0bffe15 	stw	r2,-8(fp)
    84ac:	00000a06 	br	84d8 <is_prime+0x5c>
        if (number % i == 0) return false;
    84b0:	e0bfff17 	ldw	r2,-4(fp)
    84b4:	e17ffe17 	ldw	r5,-8(fp)
    84b8:	1009883a 	mov	r4,r2
    84bc:	00087640 	call	8764 <__umodsi3>
    84c0:	1000021e 	bne	r2,zero,84cc <is_prime+0x50>
    84c4:	0005883a 	mov	r2,zero
    84c8:	00000a06 	br	84f4 <is_prime+0x78>
    }
}

bool is_prime(uint32_t number) {
    if (number < 2) return false;
    for (uint32_t i = 2; i * i <= number; i++) {
    84cc:	e0bffe17 	ldw	r2,-8(fp)
    84d0:	10800044 	addi	r2,r2,1
    84d4:	e0bffe15 	stw	r2,-8(fp)
    84d8:	e17ffe17 	ldw	r5,-8(fp)
    84dc:	e13ffe17 	ldw	r4,-8(fp)
    84e0:	00087bc0 	call	87bc <__mulsi3>
    84e4:	1007883a 	mov	r3,r2
    84e8:	e0bfff17 	ldw	r2,-4(fp)
    84ec:	10fff02e 	bgeu	r2,r3,84b0 <_gp+0xffff5d3c>
        if (number % i == 0) return false;
    }
    return true;
    84f0:	00800044 	movi	r2,1
}
    84f4:	e037883a 	mov	sp,fp
    84f8:	dfc00117 	ldw	ra,4(sp)
    84fc:	df000017 	ldw	fp,0(sp)
    8500:	dec00204 	addi	sp,sp,8
    8504:	f800283a 	ret

00008508 <write_to_hex_decoders_1>:

void write_to_hex_decoders_1(uint32_t value) {
    8508:	defffc04 	addi	sp,sp,-16
    850c:	dfc00315 	stw	ra,12(sp)
    8510:	df000215 	stw	fp,8(sp)
    8514:	df000204 	addi	fp,sp,8
    8518:	e13fff15 	stw	r4,-4(fp)
    uint8_t digit_1 = (value / 10) % 10;
    851c:	e0bfff17 	ldw	r2,-4(fp)
    8520:	01400284 	movi	r5,10
    8524:	1009883a 	mov	r4,r2
    8528:	00087000 	call	8700 <__udivsi3>
    852c:	01400284 	movi	r5,10
    8530:	1009883a 	mov	r4,r2
    8534:	00087640 	call	8764 <__umodsi3>
    8538:	e0bffe05 	stb	r2,-8(fp)
    uint8_t digit_0 = value % 10;
    853c:	e0bfff17 	ldw	r2,-4(fp)
    8540:	01400284 	movi	r5,10
    8544:	1009883a 	mov	r4,r2
    8548:	00087640 	call	8764 <__umodsi3>
    854c:	e0bffe45 	stb	r2,-7(fp)

    IOWR(HEXDECODER_0_BASE, 0, digit_0);
    8550:	e0fffe43 	ldbu	r3,-7(fp)
    8554:	00800074 	movhi	r2,1
    8558:	10841004 	addi	r2,r2,4160
    855c:	10c00035 	stwio	r3,0(r2)
    IOWR(HEXDECODER_1_BASE, 0, digit_1);
    8560:	e0fffe03 	ldbu	r3,-8(fp)
    8564:	00800074 	movhi	r2,1
    8568:	10840f04 	addi	r2,r2,4156
    856c:	10c00035 	stwio	r3,0(r2)
}
    8570:	0001883a 	nop
    8574:	e037883a 	mov	sp,fp
    8578:	dfc00117 	ldw	ra,4(sp)
    857c:	df000017 	ldw	fp,0(sp)
    8580:	dec00204 	addi	sp,sp,8
    8584:	f800283a 	ret

00008588 <write_to_hex_decoders_2>:

void write_to_hex_decoders_2(uint32_t value) {
    8588:	defffc04 	addi	sp,sp,-16
    858c:	dfc00315 	stw	ra,12(sp)
    8590:	df000215 	stw	fp,8(sp)
    8594:	df000204 	addi	fp,sp,8
    8598:	e13fff15 	stw	r4,-4(fp)
    uint8_t digit_3 = (value / 10) % 10;
    859c:	e0bfff17 	ldw	r2,-4(fp)
    85a0:	01400284 	movi	r5,10
    85a4:	1009883a 	mov	r4,r2
    85a8:	00087000 	call	8700 <__udivsi3>
    85ac:	01400284 	movi	r5,10
    85b0:	1009883a 	mov	r4,r2
    85b4:	00087640 	call	8764 <__umodsi3>
    85b8:	e0bffe05 	stb	r2,-8(fp)
    uint8_t digit_2 = value % 10;
    85bc:	e0bfff17 	ldw	r2,-4(fp)
    85c0:	01400284 	movi	r5,10
    85c4:	1009883a 	mov	r4,r2
    85c8:	00087640 	call	8764 <__umodsi3>
    85cc:	e0bffe45 	stb	r2,-7(fp)

    IOWR(HEXDECODER_2_BASE, 0, digit_2);
    85d0:	e0fffe43 	ldbu	r3,-7(fp)
    85d4:	00800074 	movhi	r2,1
    85d8:	10840e04 	addi	r2,r2,4152
    85dc:	10c00035 	stwio	r3,0(r2)
    IOWR(HEXDECODER_3_BASE, 0, digit_3);
    85e0:	e0fffe03 	ldbu	r3,-8(fp)
    85e4:	00800074 	movhi	r2,1
    85e8:	10840d04 	addi	r2,r2,4148
    85ec:	10c00035 	stwio	r3,0(r2)
}
    85f0:	0001883a 	nop
    85f4:	e037883a 	mov	sp,fp
    85f8:	dfc00117 	ldw	ra,4(sp)
    85fc:	df000017 	ldw	fp,0(sp)
    8600:	dec00204 	addi	sp,sp,8
    8604:	f800283a 	ret

00008608 <__divsi3>:
    8608:	20001b16 	blt	r4,zero,8678 <__divsi3+0x70>
    860c:	000f883a 	mov	r7,zero
    8610:	28001616 	blt	r5,zero,866c <__divsi3+0x64>
    8614:	200d883a 	mov	r6,r4
    8618:	29001a2e 	bgeu	r5,r4,8684 <__divsi3+0x7c>
    861c:	00800804 	movi	r2,32
    8620:	00c00044 	movi	r3,1
    8624:	00000106 	br	862c <__divsi3+0x24>
    8628:	10000d26 	beq	r2,zero,8660 <__divsi3+0x58>
    862c:	294b883a 	add	r5,r5,r5
    8630:	10bfffc4 	addi	r2,r2,-1
    8634:	18c7883a 	add	r3,r3,r3
    8638:	293ffb36 	bltu	r5,r4,8628 <_gp+0xffff5eb4>
    863c:	0005883a 	mov	r2,zero
    8640:	18000726 	beq	r3,zero,8660 <__divsi3+0x58>
    8644:	0005883a 	mov	r2,zero
    8648:	31400236 	bltu	r6,r5,8654 <__divsi3+0x4c>
    864c:	314dc83a 	sub	r6,r6,r5
    8650:	10c4b03a 	or	r2,r2,r3
    8654:	1806d07a 	srli	r3,r3,1
    8658:	280ad07a 	srli	r5,r5,1
    865c:	183ffa1e 	bne	r3,zero,8648 <_gp+0xffff5ed4>
    8660:	38000126 	beq	r7,zero,8668 <__divsi3+0x60>
    8664:	0085c83a 	sub	r2,zero,r2
    8668:	f800283a 	ret
    866c:	014bc83a 	sub	r5,zero,r5
    8670:	39c0005c 	xori	r7,r7,1
    8674:	003fe706 	br	8614 <_gp+0xffff5ea0>
    8678:	0109c83a 	sub	r4,zero,r4
    867c:	01c00044 	movi	r7,1
    8680:	003fe306 	br	8610 <_gp+0xffff5e9c>
    8684:	00c00044 	movi	r3,1
    8688:	003fee06 	br	8644 <_gp+0xffff5ed0>

0000868c <__modsi3>:
    868c:	20001716 	blt	r4,zero,86ec <__modsi3+0x60>
    8690:	000f883a 	mov	r7,zero
    8694:	2005883a 	mov	r2,r4
    8698:	28001216 	blt	r5,zero,86e4 <__modsi3+0x58>
    869c:	2900162e 	bgeu	r5,r4,86f8 <__modsi3+0x6c>
    86a0:	01800804 	movi	r6,32
    86a4:	00c00044 	movi	r3,1
    86a8:	00000106 	br	86b0 <__modsi3+0x24>
    86ac:	30000a26 	beq	r6,zero,86d8 <__modsi3+0x4c>
    86b0:	294b883a 	add	r5,r5,r5
    86b4:	31bfffc4 	addi	r6,r6,-1
    86b8:	18c7883a 	add	r3,r3,r3
    86bc:	293ffb36 	bltu	r5,r4,86ac <_gp+0xffff5f38>
    86c0:	18000526 	beq	r3,zero,86d8 <__modsi3+0x4c>
    86c4:	1806d07a 	srli	r3,r3,1
    86c8:	11400136 	bltu	r2,r5,86d0 <__modsi3+0x44>
    86cc:	1145c83a 	sub	r2,r2,r5
    86d0:	280ad07a 	srli	r5,r5,1
    86d4:	183ffb1e 	bne	r3,zero,86c4 <_gp+0xffff5f50>
    86d8:	38000126 	beq	r7,zero,86e0 <__modsi3+0x54>
    86dc:	0085c83a 	sub	r2,zero,r2
    86e0:	f800283a 	ret
    86e4:	014bc83a 	sub	r5,zero,r5
    86e8:	003fec06 	br	869c <_gp+0xffff5f28>
    86ec:	0109c83a 	sub	r4,zero,r4
    86f0:	01c00044 	movi	r7,1
    86f4:	003fe706 	br	8694 <_gp+0xffff5f20>
    86f8:	00c00044 	movi	r3,1
    86fc:	003ff106 	br	86c4 <_gp+0xffff5f50>

00008700 <__udivsi3>:
    8700:	200d883a 	mov	r6,r4
    8704:	2900152e 	bgeu	r5,r4,875c <__udivsi3+0x5c>
    8708:	28001416 	blt	r5,zero,875c <__udivsi3+0x5c>
    870c:	00800804 	movi	r2,32
    8710:	00c00044 	movi	r3,1
    8714:	00000206 	br	8720 <__udivsi3+0x20>
    8718:	10000e26 	beq	r2,zero,8754 <__udivsi3+0x54>
    871c:	28000516 	blt	r5,zero,8734 <__udivsi3+0x34>
    8720:	294b883a 	add	r5,r5,r5
    8724:	10bfffc4 	addi	r2,r2,-1
    8728:	18c7883a 	add	r3,r3,r3
    872c:	293ffa36 	bltu	r5,r4,8718 <_gp+0xffff5fa4>
    8730:	18000826 	beq	r3,zero,8754 <__udivsi3+0x54>
    8734:	0005883a 	mov	r2,zero
    8738:	31400236 	bltu	r6,r5,8744 <__udivsi3+0x44>
    873c:	314dc83a 	sub	r6,r6,r5
    8740:	10c4b03a 	or	r2,r2,r3
    8744:	1806d07a 	srli	r3,r3,1
    8748:	280ad07a 	srli	r5,r5,1
    874c:	183ffa1e 	bne	r3,zero,8738 <_gp+0xffff5fc4>
    8750:	f800283a 	ret
    8754:	0005883a 	mov	r2,zero
    8758:	f800283a 	ret
    875c:	00c00044 	movi	r3,1
    8760:	003ff406 	br	8734 <_gp+0xffff5fc0>

00008764 <__umodsi3>:
    8764:	2005883a 	mov	r2,r4
    8768:	2900122e 	bgeu	r5,r4,87b4 <__umodsi3+0x50>
    876c:	28001116 	blt	r5,zero,87b4 <__umodsi3+0x50>
    8770:	01800804 	movi	r6,32
    8774:	00c00044 	movi	r3,1
    8778:	00000206 	br	8784 <__umodsi3+0x20>
    877c:	30000c26 	beq	r6,zero,87b0 <__umodsi3+0x4c>
    8780:	28000516 	blt	r5,zero,8798 <__umodsi3+0x34>
    8784:	294b883a 	add	r5,r5,r5
    8788:	31bfffc4 	addi	r6,r6,-1
    878c:	18c7883a 	add	r3,r3,r3
    8790:	293ffa36 	bltu	r5,r4,877c <_gp+0xffff6008>
    8794:	18000626 	beq	r3,zero,87b0 <__umodsi3+0x4c>
    8798:	1806d07a 	srli	r3,r3,1
    879c:	11400136 	bltu	r2,r5,87a4 <__umodsi3+0x40>
    87a0:	1145c83a 	sub	r2,r2,r5
    87a4:	280ad07a 	srli	r5,r5,1
    87a8:	183ffb1e 	bne	r3,zero,8798 <_gp+0xffff6024>
    87ac:	f800283a 	ret
    87b0:	f800283a 	ret
    87b4:	00c00044 	movi	r3,1
    87b8:	003ff706 	br	8798 <_gp+0xffff6024>

000087bc <__mulsi3>:
    87bc:	0005883a 	mov	r2,zero
    87c0:	20000726 	beq	r4,zero,87e0 <__mulsi3+0x24>
    87c4:	20c0004c 	andi	r3,r4,1
    87c8:	2008d07a 	srli	r4,r4,1
    87cc:	18000126 	beq	r3,zero,87d4 <__mulsi3+0x18>
    87d0:	1145883a 	add	r2,r2,r5
    87d4:	294b883a 	add	r5,r5,r5
    87d8:	203ffa1e 	bne	r4,zero,87c4 <_gp+0xffff6050>
    87dc:	f800283a 	ret
    87e0:	f800283a 	ret

000087e4 <memset>:
    87e4:	2005883a 	mov	r2,r4
    87e8:	2007883a 	mov	r3,r4
    87ec:	218d883a 	add	r6,r4,r6
    87f0:	19800326 	beq	r3,r6,8800 <memset+0x1c>
    87f4:	19400005 	stb	r5,0(r3)
    87f8:	18c00044 	addi	r3,r3,1
    87fc:	003ffc06 	br	87f0 <_gp+0xffff607c>
    8800:	f800283a 	ret

00008804 <_printf_r>:
    8804:	defffd04 	addi	sp,sp,-12
    8808:	dfc00015 	stw	ra,0(sp)
    880c:	d9800115 	stw	r6,4(sp)
    8810:	d9c00215 	stw	r7,8(sp)
    8814:	20c00217 	ldw	r3,8(r4)
    8818:	01800074 	movhi	r6,1
    881c:	31a3c504 	addi	r6,r6,-28908
    8820:	19800115 	stw	r6,4(r3)
    8824:	280d883a 	mov	r6,r5
    8828:	21400217 	ldw	r5,8(r4)
    882c:	d9c00104 	addi	r7,sp,4
    8830:	00089cc0 	call	89cc <___vfprintf_internal_r>
    8834:	dfc00017 	ldw	ra,0(sp)
    8838:	dec00304 	addi	sp,sp,12
    883c:	f800283a 	ret

00008840 <printf>:
    8840:	defffc04 	addi	sp,sp,-16
    8844:	dfc00015 	stw	ra,0(sp)
    8848:	d9400115 	stw	r5,4(sp)
    884c:	d9800215 	stw	r6,8(sp)
    8850:	d9c00315 	stw	r7,12(sp)
    8854:	00800074 	movhi	r2,1
    8858:	10a9de04 	addi	r2,r2,-22664
    885c:	10800017 	ldw	r2,0(r2)
    8860:	01400074 	movhi	r5,1
    8864:	2963c504 	addi	r5,r5,-28908
    8868:	10c00217 	ldw	r3,8(r2)
    886c:	d9800104 	addi	r6,sp,4
    8870:	19400115 	stw	r5,4(r3)
    8874:	200b883a 	mov	r5,r4
    8878:	11000217 	ldw	r4,8(r2)
    887c:	0008ef80 	call	8ef8 <__vfprintf_internal>
    8880:	dfc00017 	ldw	ra,0(sp)
    8884:	dec00404 	addi	sp,sp,16
    8888:	f800283a 	ret

0000888c <_putchar_r>:
    888c:	21800217 	ldw	r6,8(r4)
    8890:	00090201 	jmpi	9020 <_putc_r>

00008894 <putchar>:
    8894:	00800074 	movhi	r2,1
    8898:	10a9de04 	addi	r2,r2,-22664
    889c:	10800017 	ldw	r2,0(r2)
    88a0:	200b883a 	mov	r5,r4
    88a4:	11800217 	ldw	r6,8(r2)
    88a8:	1009883a 	mov	r4,r2
    88ac:	00090201 	jmpi	9020 <_putc_r>

000088b0 <_puts_r>:
    88b0:	defffd04 	addi	sp,sp,-12
    88b4:	dc000015 	stw	r16,0(sp)
    88b8:	2021883a 	mov	r16,r4
    88bc:	2809883a 	mov	r4,r5
    88c0:	dfc00215 	stw	ra,8(sp)
    88c4:	dc400115 	stw	r17,4(sp)
    88c8:	2823883a 	mov	r17,r5
    88cc:	00089440 	call	8944 <strlen>
    88d0:	81400217 	ldw	r5,8(r16)
    88d4:	01000074 	movhi	r4,1
    88d8:	2123c504 	addi	r4,r4,-28908
    88dc:	29000115 	stw	r4,4(r5)
    88e0:	100f883a 	mov	r7,r2
    88e4:	880d883a 	mov	r6,r17
    88e8:	8009883a 	mov	r4,r16
    88ec:	0008f140 	call	8f14 <__sfvwrite_small_dev>
    88f0:	00ffffc4 	movi	r3,-1
    88f4:	10c00926 	beq	r2,r3,891c <_puts_r+0x6c>
    88f8:	81400217 	ldw	r5,8(r16)
    88fc:	01800074 	movhi	r6,1
    8900:	01c00044 	movi	r7,1
    8904:	28800117 	ldw	r2,4(r5)
    8908:	31a92204 	addi	r6,r6,-23416
    890c:	8009883a 	mov	r4,r16
    8910:	103ee83a 	callr	r2
    8914:	10bfffe0 	cmpeqi	r2,r2,-1
    8918:	0085c83a 	sub	r2,zero,r2
    891c:	dfc00217 	ldw	ra,8(sp)
    8920:	dc400117 	ldw	r17,4(sp)
    8924:	dc000017 	ldw	r16,0(sp)
    8928:	dec00304 	addi	sp,sp,12
    892c:	f800283a 	ret

00008930 <puts>:
    8930:	00800074 	movhi	r2,1
    8934:	10a9de04 	addi	r2,r2,-22664
    8938:	200b883a 	mov	r5,r4
    893c:	11000017 	ldw	r4,0(r2)
    8940:	00088b01 	jmpi	88b0 <_puts_r>

00008944 <strlen>:
    8944:	2005883a 	mov	r2,r4
    8948:	10c00007 	ldb	r3,0(r2)
    894c:	18000226 	beq	r3,zero,8958 <strlen+0x14>
    8950:	10800044 	addi	r2,r2,1
    8954:	003ffc06 	br	8948 <_gp+0xffff61d4>
    8958:	1105c83a 	sub	r2,r2,r4
    895c:	f800283a 	ret

00008960 <print_repeat>:
    8960:	defffb04 	addi	sp,sp,-20
    8964:	dc800315 	stw	r18,12(sp)
    8968:	dc400215 	stw	r17,8(sp)
    896c:	dc000115 	stw	r16,4(sp)
    8970:	dfc00415 	stw	ra,16(sp)
    8974:	2025883a 	mov	r18,r4
    8978:	2823883a 	mov	r17,r5
    897c:	d9800005 	stb	r6,0(sp)
    8980:	3821883a 	mov	r16,r7
    8984:	04000a0e 	bge	zero,r16,89b0 <print_repeat+0x50>
    8988:	88800117 	ldw	r2,4(r17)
    898c:	01c00044 	movi	r7,1
    8990:	d80d883a 	mov	r6,sp
    8994:	880b883a 	mov	r5,r17
    8998:	9009883a 	mov	r4,r18
    899c:	103ee83a 	callr	r2
    89a0:	843fffc4 	addi	r16,r16,-1
    89a4:	103ff726 	beq	r2,zero,8984 <_gp+0xffff6210>
    89a8:	00bfffc4 	movi	r2,-1
    89ac:	00000106 	br	89b4 <print_repeat+0x54>
    89b0:	0005883a 	mov	r2,zero
    89b4:	dfc00417 	ldw	ra,16(sp)
    89b8:	dc800317 	ldw	r18,12(sp)
    89bc:	dc400217 	ldw	r17,8(sp)
    89c0:	dc000117 	ldw	r16,4(sp)
    89c4:	dec00504 	addi	sp,sp,20
    89c8:	f800283a 	ret

000089cc <___vfprintf_internal_r>:
    89cc:	deffe504 	addi	sp,sp,-108
    89d0:	d8c00804 	addi	r3,sp,32
    89d4:	ddc01815 	stw	r23,96(sp)
    89d8:	dd801715 	stw	r22,92(sp)
    89dc:	dd401615 	stw	r21,88(sp)
    89e0:	dd001515 	stw	r20,84(sp)
    89e4:	dcc01415 	stw	r19,80(sp)
    89e8:	dc801315 	stw	r18,76(sp)
    89ec:	dc401215 	stw	r17,72(sp)
    89f0:	dc001115 	stw	r16,68(sp)
    89f4:	dfc01a15 	stw	ra,104(sp)
    89f8:	df001915 	stw	fp,100(sp)
    89fc:	2029883a 	mov	r20,r4
    8a00:	2823883a 	mov	r17,r5
    8a04:	382d883a 	mov	r22,r7
    8a08:	d9800f15 	stw	r6,60(sp)
    8a0c:	0021883a 	mov	r16,zero
    8a10:	d8000e15 	stw	zero,56(sp)
    8a14:	d8000a15 	stw	zero,40(sp)
    8a18:	002b883a 	mov	r21,zero
    8a1c:	0027883a 	mov	r19,zero
    8a20:	0025883a 	mov	r18,zero
    8a24:	d8000c15 	stw	zero,48(sp)
    8a28:	d8000b15 	stw	zero,44(sp)
    8a2c:	002f883a 	mov	r23,zero
    8a30:	d8c00915 	stw	r3,36(sp)
    8a34:	d8c00f17 	ldw	r3,60(sp)
    8a38:	19000003 	ldbu	r4,0(r3)
    8a3c:	20803fcc 	andi	r2,r4,255
    8a40:	1080201c 	xori	r2,r2,128
    8a44:	10bfe004 	addi	r2,r2,-128
    8a48:	10011e26 	beq	r2,zero,8ec4 <___vfprintf_internal_r+0x4f8>
    8a4c:	00c00044 	movi	r3,1
    8a50:	b8c01426 	beq	r23,r3,8aa4 <___vfprintf_internal_r+0xd8>
    8a54:	1dc00216 	blt	r3,r23,8a60 <___vfprintf_internal_r+0x94>
    8a58:	b8000626 	beq	r23,zero,8a74 <___vfprintf_internal_r+0xa8>
    8a5c:	00011506 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8a60:	01400084 	movi	r5,2
    8a64:	b9401d26 	beq	r23,r5,8adc <___vfprintf_internal_r+0x110>
    8a68:	014000c4 	movi	r5,3
    8a6c:	b9402b26 	beq	r23,r5,8b1c <___vfprintf_internal_r+0x150>
    8a70:	00011006 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8a74:	01400944 	movi	r5,37
    8a78:	1140fc26 	beq	r2,r5,8e6c <___vfprintf_internal_r+0x4a0>
    8a7c:	88800117 	ldw	r2,4(r17)
    8a80:	d9000005 	stb	r4,0(sp)
    8a84:	01c00044 	movi	r7,1
    8a88:	d80d883a 	mov	r6,sp
    8a8c:	880b883a 	mov	r5,r17
    8a90:	a009883a 	mov	r4,r20
    8a94:	103ee83a 	callr	r2
    8a98:	1000d81e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8a9c:	84000044 	addi	r16,r16,1
    8aa0:	00010406 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8aa4:	01400c04 	movi	r5,48
    8aa8:	1140fa26 	beq	r2,r5,8e94 <___vfprintf_internal_r+0x4c8>
    8aac:	01400944 	movi	r5,37
    8ab0:	11400a1e 	bne	r2,r5,8adc <___vfprintf_internal_r+0x110>
    8ab4:	d8800005 	stb	r2,0(sp)
    8ab8:	88800117 	ldw	r2,4(r17)
    8abc:	b80f883a 	mov	r7,r23
    8ac0:	d80d883a 	mov	r6,sp
    8ac4:	880b883a 	mov	r5,r17
    8ac8:	a009883a 	mov	r4,r20
    8acc:	103ee83a 	callr	r2
    8ad0:	1000ca1e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8ad4:	84000044 	addi	r16,r16,1
    8ad8:	0000f506 	br	8eb0 <___vfprintf_internal_r+0x4e4>
    8adc:	25fff404 	addi	r23,r4,-48
    8ae0:	bdc03fcc 	andi	r23,r23,255
    8ae4:	00c00244 	movi	r3,9
    8ae8:	1dc00936 	bltu	r3,r23,8b10 <___vfprintf_internal_r+0x144>
    8aec:	00bfffc4 	movi	r2,-1
    8af0:	90800426 	beq	r18,r2,8b04 <___vfprintf_internal_r+0x138>
    8af4:	01400284 	movi	r5,10
    8af8:	9009883a 	mov	r4,r18
    8afc:	00087bc0 	call	87bc <__mulsi3>
    8b00:	00000106 	br	8b08 <___vfprintf_internal_r+0x13c>
    8b04:	0005883a 	mov	r2,zero
    8b08:	b8a5883a 	add	r18,r23,r2
    8b0c:	0000e206 	br	8e98 <___vfprintf_internal_r+0x4cc>
    8b10:	01400b84 	movi	r5,46
    8b14:	1140e426 	beq	r2,r5,8ea8 <___vfprintf_internal_r+0x4dc>
    8b18:	05c00084 	movi	r23,2
    8b1c:	213ff404 	addi	r4,r4,-48
    8b20:	27003fcc 	andi	fp,r4,255
    8b24:	00c00244 	movi	r3,9
    8b28:	1f000936 	bltu	r3,fp,8b50 <___vfprintf_internal_r+0x184>
    8b2c:	00bfffc4 	movi	r2,-1
    8b30:	98800426 	beq	r19,r2,8b44 <___vfprintf_internal_r+0x178>
    8b34:	01400284 	movi	r5,10
    8b38:	9809883a 	mov	r4,r19
    8b3c:	00087bc0 	call	87bc <__mulsi3>
    8b40:	00000106 	br	8b48 <___vfprintf_internal_r+0x17c>
    8b44:	0005883a 	mov	r2,zero
    8b48:	e0a7883a 	add	r19,fp,r2
    8b4c:	0000d906 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8b50:	00c01b04 	movi	r3,108
    8b54:	10c0d226 	beq	r2,r3,8ea0 <___vfprintf_internal_r+0x4d4>
    8b58:	013fffc4 	movi	r4,-1
    8b5c:	99000226 	beq	r19,r4,8b68 <___vfprintf_internal_r+0x19c>
    8b60:	d8000b15 	stw	zero,44(sp)
    8b64:	00000106 	br	8b6c <___vfprintf_internal_r+0x1a0>
    8b68:	04c00044 	movi	r19,1
    8b6c:	01001a44 	movi	r4,105
    8b70:	11001626 	beq	r2,r4,8bcc <___vfprintf_internal_r+0x200>
    8b74:	20800916 	blt	r4,r2,8b9c <___vfprintf_internal_r+0x1d0>
    8b78:	010018c4 	movi	r4,99
    8b7c:	11008826 	beq	r2,r4,8da0 <___vfprintf_internal_r+0x3d4>
    8b80:	01001904 	movi	r4,100
    8b84:	11001126 	beq	r2,r4,8bcc <___vfprintf_internal_r+0x200>
    8b88:	01001604 	movi	r4,88
    8b8c:	1100c81e 	bne	r2,r4,8eb0 <___vfprintf_internal_r+0x4e4>
    8b90:	00c00044 	movi	r3,1
    8b94:	d8c00e15 	stw	r3,56(sp)
    8b98:	00001506 	br	8bf0 <___vfprintf_internal_r+0x224>
    8b9c:	01001cc4 	movi	r4,115
    8ba0:	11009826 	beq	r2,r4,8e04 <___vfprintf_internal_r+0x438>
    8ba4:	20800416 	blt	r4,r2,8bb8 <___vfprintf_internal_r+0x1ec>
    8ba8:	01001bc4 	movi	r4,111
    8bac:	1100c01e 	bne	r2,r4,8eb0 <___vfprintf_internal_r+0x4e4>
    8bb0:	05400204 	movi	r21,8
    8bb4:	00000f06 	br	8bf4 <___vfprintf_internal_r+0x228>
    8bb8:	01001d44 	movi	r4,117
    8bbc:	11000d26 	beq	r2,r4,8bf4 <___vfprintf_internal_r+0x228>
    8bc0:	01001e04 	movi	r4,120
    8bc4:	11000a26 	beq	r2,r4,8bf0 <___vfprintf_internal_r+0x224>
    8bc8:	0000b906 	br	8eb0 <___vfprintf_internal_r+0x4e4>
    8bcc:	d8c00a17 	ldw	r3,40(sp)
    8bd0:	b7000104 	addi	fp,r22,4
    8bd4:	18000726 	beq	r3,zero,8bf4 <___vfprintf_internal_r+0x228>
    8bd8:	df000d15 	stw	fp,52(sp)
    8bdc:	b5c00017 	ldw	r23,0(r22)
    8be0:	b800080e 	bge	r23,zero,8c04 <___vfprintf_internal_r+0x238>
    8be4:	05efc83a 	sub	r23,zero,r23
    8be8:	02400044 	movi	r9,1
    8bec:	00000606 	br	8c08 <___vfprintf_internal_r+0x23c>
    8bf0:	05400404 	movi	r21,16
    8bf4:	b0c00104 	addi	r3,r22,4
    8bf8:	d8c00d15 	stw	r3,52(sp)
    8bfc:	b5c00017 	ldw	r23,0(r22)
    8c00:	d8000a15 	stw	zero,40(sp)
    8c04:	0013883a 	mov	r9,zero
    8c08:	d839883a 	mov	fp,sp
    8c0c:	b8001726 	beq	r23,zero,8c6c <___vfprintf_internal_r+0x2a0>
    8c10:	a80b883a 	mov	r5,r21
    8c14:	b809883a 	mov	r4,r23
    8c18:	da401015 	stw	r9,64(sp)
    8c1c:	00087000 	call	8700 <__udivsi3>
    8c20:	a80b883a 	mov	r5,r21
    8c24:	1009883a 	mov	r4,r2
    8c28:	102d883a 	mov	r22,r2
    8c2c:	00087bc0 	call	87bc <__mulsi3>
    8c30:	b885c83a 	sub	r2,r23,r2
    8c34:	00c00244 	movi	r3,9
    8c38:	da401017 	ldw	r9,64(sp)
    8c3c:	18800216 	blt	r3,r2,8c48 <___vfprintf_internal_r+0x27c>
    8c40:	10800c04 	addi	r2,r2,48
    8c44:	00000506 	br	8c5c <___vfprintf_internal_r+0x290>
    8c48:	d8c00e17 	ldw	r3,56(sp)
    8c4c:	18000226 	beq	r3,zero,8c58 <___vfprintf_internal_r+0x28c>
    8c50:	10800dc4 	addi	r2,r2,55
    8c54:	00000106 	br	8c5c <___vfprintf_internal_r+0x290>
    8c58:	108015c4 	addi	r2,r2,87
    8c5c:	e0800005 	stb	r2,0(fp)
    8c60:	b02f883a 	mov	r23,r22
    8c64:	e7000044 	addi	fp,fp,1
    8c68:	003fe806 	br	8c0c <_gp+0xffff6498>
    8c6c:	e6efc83a 	sub	r23,fp,sp
    8c70:	9dc5c83a 	sub	r2,r19,r23
    8c74:	0080090e 	bge	zero,r2,8c9c <___vfprintf_internal_r+0x2d0>
    8c78:	e085883a 	add	r2,fp,r2
    8c7c:	01400c04 	movi	r5,48
    8c80:	d8c00917 	ldw	r3,36(sp)
    8c84:	e009883a 	mov	r4,fp
    8c88:	e0c0032e 	bgeu	fp,r3,8c98 <___vfprintf_internal_r+0x2cc>
    8c8c:	e7000044 	addi	fp,fp,1
    8c90:	21400005 	stb	r5,0(r4)
    8c94:	e0bffa1e 	bne	fp,r2,8c80 <_gp+0xffff650c>
    8c98:	e6efc83a 	sub	r23,fp,sp
    8c9c:	d8c00b17 	ldw	r3,44(sp)
    8ca0:	4dd1883a 	add	r8,r9,r23
    8ca4:	922dc83a 	sub	r22,r18,r8
    8ca8:	18001626 	beq	r3,zero,8d04 <___vfprintf_internal_r+0x338>
    8cac:	48000a26 	beq	r9,zero,8cd8 <___vfprintf_internal_r+0x30c>
    8cb0:	00800b44 	movi	r2,45
    8cb4:	d8800805 	stb	r2,32(sp)
    8cb8:	88800117 	ldw	r2,4(r17)
    8cbc:	01c00044 	movi	r7,1
    8cc0:	d9800804 	addi	r6,sp,32
    8cc4:	880b883a 	mov	r5,r17
    8cc8:	a009883a 	mov	r4,r20
    8ccc:	103ee83a 	callr	r2
    8cd0:	10004a1e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8cd4:	84000044 	addi	r16,r16,1
    8cd8:	0580070e 	bge	zero,r22,8cf8 <___vfprintf_internal_r+0x32c>
    8cdc:	b00f883a 	mov	r7,r22
    8ce0:	01800c04 	movi	r6,48
    8ce4:	880b883a 	mov	r5,r17
    8ce8:	a009883a 	mov	r4,r20
    8cec:	00089600 	call	8960 <print_repeat>
    8cf0:	1000421e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8cf4:	85a1883a 	add	r16,r16,r22
    8cf8:	e02d883a 	mov	r22,fp
    8cfc:	bf2fc83a 	sub	r23,r23,fp
    8d00:	00002006 	br	8d84 <___vfprintf_internal_r+0x3b8>
    8d04:	0580090e 	bge	zero,r22,8d2c <___vfprintf_internal_r+0x360>
    8d08:	b00f883a 	mov	r7,r22
    8d0c:	01800804 	movi	r6,32
    8d10:	880b883a 	mov	r5,r17
    8d14:	a009883a 	mov	r4,r20
    8d18:	da401015 	stw	r9,64(sp)
    8d1c:	00089600 	call	8960 <print_repeat>
    8d20:	da401017 	ldw	r9,64(sp)
    8d24:	1000351e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8d28:	85a1883a 	add	r16,r16,r22
    8d2c:	483ff226 	beq	r9,zero,8cf8 <_gp+0xffff6584>
    8d30:	00800b44 	movi	r2,45
    8d34:	d8800805 	stb	r2,32(sp)
    8d38:	88800117 	ldw	r2,4(r17)
    8d3c:	01c00044 	movi	r7,1
    8d40:	d9800804 	addi	r6,sp,32
    8d44:	880b883a 	mov	r5,r17
    8d48:	a009883a 	mov	r4,r20
    8d4c:	103ee83a 	callr	r2
    8d50:	10002a1e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8d54:	84000044 	addi	r16,r16,1
    8d58:	003fe706 	br	8cf8 <_gp+0xffff6584>
    8d5c:	b5bfffc4 	addi	r22,r22,-1
    8d60:	b0800003 	ldbu	r2,0(r22)
    8d64:	01c00044 	movi	r7,1
    8d68:	d9800804 	addi	r6,sp,32
    8d6c:	d8800805 	stb	r2,32(sp)
    8d70:	88800117 	ldw	r2,4(r17)
    8d74:	880b883a 	mov	r5,r17
    8d78:	a009883a 	mov	r4,r20
    8d7c:	103ee83a 	callr	r2
    8d80:	10001e1e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8d84:	8585c83a 	sub	r2,r16,r22
    8d88:	b5c9883a 	add	r4,r22,r23
    8d8c:	e085883a 	add	r2,fp,r2
    8d90:	013ff216 	blt	zero,r4,8d5c <_gp+0xffff65e8>
    8d94:	1021883a 	mov	r16,r2
    8d98:	dd800d17 	ldw	r22,52(sp)
    8d9c:	00004406 	br	8eb0 <___vfprintf_internal_r+0x4e4>
    8da0:	00800044 	movi	r2,1
    8da4:	1480080e 	bge	r2,r18,8dc8 <___vfprintf_internal_r+0x3fc>
    8da8:	95ffffc4 	addi	r23,r18,-1
    8dac:	b80f883a 	mov	r7,r23
    8db0:	01800804 	movi	r6,32
    8db4:	880b883a 	mov	r5,r17
    8db8:	a009883a 	mov	r4,r20
    8dbc:	00089600 	call	8960 <print_repeat>
    8dc0:	10000e1e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8dc4:	85e1883a 	add	r16,r16,r23
    8dc8:	b0800017 	ldw	r2,0(r22)
    8dcc:	01c00044 	movi	r7,1
    8dd0:	d80d883a 	mov	r6,sp
    8dd4:	d8800005 	stb	r2,0(sp)
    8dd8:	88800117 	ldw	r2,4(r17)
    8ddc:	880b883a 	mov	r5,r17
    8de0:	a009883a 	mov	r4,r20
    8de4:	b5c00104 	addi	r23,r22,4
    8de8:	103ee83a 	callr	r2
    8dec:	1000031e 	bne	r2,zero,8dfc <___vfprintf_internal_r+0x430>
    8df0:	84000044 	addi	r16,r16,1
    8df4:	b82d883a 	mov	r22,r23
    8df8:	00002d06 	br	8eb0 <___vfprintf_internal_r+0x4e4>
    8dfc:	00bfffc4 	movi	r2,-1
    8e00:	00003106 	br	8ec8 <___vfprintf_internal_r+0x4fc>
    8e04:	b5c00017 	ldw	r23,0(r22)
    8e08:	b7000104 	addi	fp,r22,4
    8e0c:	b809883a 	mov	r4,r23
    8e10:	00089440 	call	8944 <strlen>
    8e14:	9091c83a 	sub	r8,r18,r2
    8e18:	102d883a 	mov	r22,r2
    8e1c:	0200090e 	bge	zero,r8,8e44 <___vfprintf_internal_r+0x478>
    8e20:	400f883a 	mov	r7,r8
    8e24:	01800804 	movi	r6,32
    8e28:	880b883a 	mov	r5,r17
    8e2c:	a009883a 	mov	r4,r20
    8e30:	da001015 	stw	r8,64(sp)
    8e34:	00089600 	call	8960 <print_repeat>
    8e38:	da001017 	ldw	r8,64(sp)
    8e3c:	103fef1e 	bne	r2,zero,8dfc <_gp+0xffff6688>
    8e40:	8221883a 	add	r16,r16,r8
    8e44:	88800117 	ldw	r2,4(r17)
    8e48:	b00f883a 	mov	r7,r22
    8e4c:	b80d883a 	mov	r6,r23
    8e50:	880b883a 	mov	r5,r17
    8e54:	a009883a 	mov	r4,r20
    8e58:	103ee83a 	callr	r2
    8e5c:	103fe71e 	bne	r2,zero,8dfc <_gp+0xffff6688>
    8e60:	85a1883a 	add	r16,r16,r22
    8e64:	e02d883a 	mov	r22,fp
    8e68:	00001106 	br	8eb0 <___vfprintf_internal_r+0x4e4>
    8e6c:	00c00044 	movi	r3,1
    8e70:	04ffffc4 	movi	r19,-1
    8e74:	d8000e15 	stw	zero,56(sp)
    8e78:	d8c00a15 	stw	r3,40(sp)
    8e7c:	05400284 	movi	r21,10
    8e80:	9825883a 	mov	r18,r19
    8e84:	d8000c15 	stw	zero,48(sp)
    8e88:	d8000b15 	stw	zero,44(sp)
    8e8c:	182f883a 	mov	r23,r3
    8e90:	00000806 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8e94:	ddc00b15 	stw	r23,44(sp)
    8e98:	05c00084 	movi	r23,2
    8e9c:	00000506 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8ea0:	00c00044 	movi	r3,1
    8ea4:	d8c00c15 	stw	r3,48(sp)
    8ea8:	05c000c4 	movi	r23,3
    8eac:	00000106 	br	8eb4 <___vfprintf_internal_r+0x4e8>
    8eb0:	002f883a 	mov	r23,zero
    8eb4:	d8c00f17 	ldw	r3,60(sp)
    8eb8:	18c00044 	addi	r3,r3,1
    8ebc:	d8c00f15 	stw	r3,60(sp)
    8ec0:	003edc06 	br	8a34 <_gp+0xffff62c0>
    8ec4:	8005883a 	mov	r2,r16
    8ec8:	dfc01a17 	ldw	ra,104(sp)
    8ecc:	df001917 	ldw	fp,100(sp)
    8ed0:	ddc01817 	ldw	r23,96(sp)
    8ed4:	dd801717 	ldw	r22,92(sp)
    8ed8:	dd401617 	ldw	r21,88(sp)
    8edc:	dd001517 	ldw	r20,84(sp)
    8ee0:	dcc01417 	ldw	r19,80(sp)
    8ee4:	dc801317 	ldw	r18,76(sp)
    8ee8:	dc401217 	ldw	r17,72(sp)
    8eec:	dc001117 	ldw	r16,68(sp)
    8ef0:	dec01b04 	addi	sp,sp,108
    8ef4:	f800283a 	ret

00008ef8 <__vfprintf_internal>:
    8ef8:	00800074 	movhi	r2,1
    8efc:	10a9de04 	addi	r2,r2,-22664
    8f00:	300f883a 	mov	r7,r6
    8f04:	280d883a 	mov	r6,r5
    8f08:	200b883a 	mov	r5,r4
    8f0c:	11000017 	ldw	r4,0(r2)
    8f10:	00089cc1 	jmpi	89cc <___vfprintf_internal_r>

00008f14 <__sfvwrite_small_dev>:
    8f14:	2880000b 	ldhu	r2,0(r5)
    8f18:	1080020c 	andi	r2,r2,8
    8f1c:	10002126 	beq	r2,zero,8fa4 <__sfvwrite_small_dev+0x90>
    8f20:	2880008f 	ldh	r2,2(r5)
    8f24:	defffa04 	addi	sp,sp,-24
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	dfc00515 	stw	ra,20(sp)
    8f30:	dd000415 	stw	r20,16(sp)
    8f34:	dcc00315 	stw	r19,12(sp)
    8f38:	dc800215 	stw	r18,8(sp)
    8f3c:	dc400115 	stw	r17,4(sp)
    8f40:	2821883a 	mov	r16,r5
    8f44:	10001216 	blt	r2,zero,8f90 <__sfvwrite_small_dev+0x7c>
    8f48:	2027883a 	mov	r19,r4
    8f4c:	3025883a 	mov	r18,r6
    8f50:	3823883a 	mov	r17,r7
    8f54:	05010004 	movi	r20,1024
    8f58:	04400b0e 	bge	zero,r17,8f88 <__sfvwrite_small_dev+0x74>
    8f5c:	880f883a 	mov	r7,r17
    8f60:	a440010e 	bge	r20,r17,8f68 <__sfvwrite_small_dev+0x54>
    8f64:	01c10004 	movi	r7,1024
    8f68:	8140008f 	ldh	r5,2(r16)
    8f6c:	900d883a 	mov	r6,r18
    8f70:	9809883a 	mov	r4,r19
    8f74:	00090780 	call	9078 <_write_r>
    8f78:	0080050e 	bge	zero,r2,8f90 <__sfvwrite_small_dev+0x7c>
    8f7c:	88a3c83a 	sub	r17,r17,r2
    8f80:	90a5883a 	add	r18,r18,r2
    8f84:	003ff406 	br	8f58 <_gp+0xffff67e4>
    8f88:	0005883a 	mov	r2,zero
    8f8c:	00000706 	br	8fac <__sfvwrite_small_dev+0x98>
    8f90:	8080000b 	ldhu	r2,0(r16)
    8f94:	10801014 	ori	r2,r2,64
    8f98:	8080000d 	sth	r2,0(r16)
    8f9c:	00bfffc4 	movi	r2,-1
    8fa0:	00000206 	br	8fac <__sfvwrite_small_dev+0x98>
    8fa4:	00bfffc4 	movi	r2,-1
    8fa8:	f800283a 	ret
    8fac:	dfc00517 	ldw	ra,20(sp)
    8fb0:	dd000417 	ldw	r20,16(sp)
    8fb4:	dcc00317 	ldw	r19,12(sp)
    8fb8:	dc800217 	ldw	r18,8(sp)
    8fbc:	dc400117 	ldw	r17,4(sp)
    8fc0:	dc000017 	ldw	r16,0(sp)
    8fc4:	dec00604 	addi	sp,sp,24
    8fc8:	f800283a 	ret

00008fcc <putc>:
    8fcc:	defffd04 	addi	sp,sp,-12
    8fd0:	00800074 	movhi	r2,1
    8fd4:	dc000115 	stw	r16,4(sp)
    8fd8:	dfc00215 	stw	ra,8(sp)
    8fdc:	10a3c504 	addi	r2,r2,-28908
    8fe0:	28800115 	stw	r2,4(r5)
    8fe4:	00800074 	movhi	r2,1
    8fe8:	10a9de04 	addi	r2,r2,-22664
    8fec:	d9000005 	stb	r4,0(sp)
    8ff0:	2021883a 	mov	r16,r4
    8ff4:	11000017 	ldw	r4,0(r2)
    8ff8:	01c00044 	movi	r7,1
    8ffc:	d80d883a 	mov	r6,sp
    9000:	0008f140 	call	8f14 <__sfvwrite_small_dev>
    9004:	00ffffc4 	movi	r3,-1
    9008:	10c00126 	beq	r2,r3,9010 <putc+0x44>
    900c:	8005883a 	mov	r2,r16
    9010:	dfc00217 	ldw	ra,8(sp)
    9014:	dc000117 	ldw	r16,4(sp)
    9018:	dec00304 	addi	sp,sp,12
    901c:	f800283a 	ret

00009020 <_putc_r>:
    9020:	defffd04 	addi	sp,sp,-12
    9024:	00800074 	movhi	r2,1
    9028:	dc000115 	stw	r16,4(sp)
    902c:	dfc00215 	stw	ra,8(sp)
    9030:	10a3c504 	addi	r2,r2,-28908
    9034:	30800115 	stw	r2,4(r6)
    9038:	00800074 	movhi	r2,1
    903c:	10a9de04 	addi	r2,r2,-22664
    9040:	11000017 	ldw	r4,0(r2)
    9044:	2821883a 	mov	r16,r5
    9048:	01c00044 	movi	r7,1
    904c:	300b883a 	mov	r5,r6
    9050:	d80d883a 	mov	r6,sp
    9054:	dc000005 	stb	r16,0(sp)
    9058:	0008f140 	call	8f14 <__sfvwrite_small_dev>
    905c:	00ffffc4 	movi	r3,-1
    9060:	10c00126 	beq	r2,r3,9068 <_putc_r+0x48>
    9064:	8005883a 	mov	r2,r16
    9068:	dfc00217 	ldw	ra,8(sp)
    906c:	dc000117 	ldw	r16,4(sp)
    9070:	dec00304 	addi	sp,sp,12
    9074:	f800283a 	ret

00009078 <_write_r>:
    9078:	defffd04 	addi	sp,sp,-12
    907c:	dc000015 	stw	r16,0(sp)
    9080:	04000074 	movhi	r16,1
    9084:	dc400115 	stw	r17,4(sp)
    9088:	842aa004 	addi	r16,r16,-21888
    908c:	2023883a 	mov	r17,r4
    9090:	2809883a 	mov	r4,r5
    9094:	300b883a 	mov	r5,r6
    9098:	380d883a 	mov	r6,r7
    909c:	dfc00215 	stw	ra,8(sp)
    90a0:	80000015 	stw	zero,0(r16)
    90a4:	00092740 	call	9274 <write>
    90a8:	00ffffc4 	movi	r3,-1
    90ac:	10c0031e 	bne	r2,r3,90bc <_write_r+0x44>
    90b0:	80c00017 	ldw	r3,0(r16)
    90b4:	18000126 	beq	r3,zero,90bc <_write_r+0x44>
    90b8:	88c00015 	stw	r3,0(r17)
    90bc:	dfc00217 	ldw	ra,8(sp)
    90c0:	dc400117 	ldw	r17,4(sp)
    90c4:	dc000017 	ldw	r16,0(sp)
    90c8:	dec00304 	addi	sp,sp,12
    90cc:	f800283a 	ret

000090d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    90d0:	defffc04 	addi	sp,sp,-16
    90d4:	df000315 	stw	fp,12(sp)
    90d8:	df000304 	addi	fp,sp,12
    90dc:	e13ffd15 	stw	r4,-12(fp)
    90e0:	e17ffe15 	stw	r5,-8(fp)
    90e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    90e8:	e0fffe17 	ldw	r3,-8(fp)
    90ec:	e0bffd17 	ldw	r2,-12(fp)
    90f0:	18800c26 	beq	r3,r2,9124 <alt_load_section+0x54>
  {
    while( to != end )
    90f4:	00000806 	br	9118 <alt_load_section+0x48>
    {
      *to++ = *from++;
    90f8:	e0bffe17 	ldw	r2,-8(fp)
    90fc:	10c00104 	addi	r3,r2,4
    9100:	e0fffe15 	stw	r3,-8(fp)
    9104:	e0fffd17 	ldw	r3,-12(fp)
    9108:	19000104 	addi	r4,r3,4
    910c:	e13ffd15 	stw	r4,-12(fp)
    9110:	18c00017 	ldw	r3,0(r3)
    9114:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9118:	e0fffe17 	ldw	r3,-8(fp)
    911c:	e0bfff17 	ldw	r2,-4(fp)
    9120:	18bff51e 	bne	r3,r2,90f8 <_gp+0xffff6984>
    {
      *to++ = *from++;
    }
  }
}
    9124:	0001883a 	nop
    9128:	e037883a 	mov	sp,fp
    912c:	df000017 	ldw	fp,0(sp)
    9130:	dec00104 	addi	sp,sp,4
    9134:	f800283a 	ret

00009138 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9138:	defffe04 	addi	sp,sp,-8
    913c:	dfc00115 	stw	ra,4(sp)
    9140:	df000015 	stw	fp,0(sp)
    9144:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9148:	01800074 	movhi	r6,1
    914c:	31a9e504 	addi	r6,r6,-22636
    9150:	01400074 	movhi	r5,1
    9154:	29693004 	addi	r5,r5,-23360
    9158:	01000074 	movhi	r4,1
    915c:	2129e504 	addi	r4,r4,-22636
    9160:	00090d00 	call	90d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9164:	01800074 	movhi	r6,1
    9168:	31a00804 	addi	r6,r6,-32736
    916c:	01400074 	movhi	r5,1
    9170:	29600804 	addi	r5,r5,-32736
    9174:	01000074 	movhi	r4,1
    9178:	21200804 	addi	r4,r4,-32736
    917c:	00090d00 	call	90d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9180:	01800074 	movhi	r6,1
    9184:	31a93004 	addi	r6,r6,-23360
    9188:	01400074 	movhi	r5,1
    918c:	2968f704 	addi	r5,r5,-23588
    9190:	01000074 	movhi	r4,1
    9194:	2128f704 	addi	r4,r4,-23588
    9198:	00090d00 	call	90d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    919c:	00097680 	call	9768 <alt_dcache_flush_all>
  alt_icache_flush_all();
    91a0:	00099540 	call	9954 <alt_icache_flush_all>
}
    91a4:	0001883a 	nop
    91a8:	e037883a 	mov	sp,fp
    91ac:	dfc00117 	ldw	ra,4(sp)
    91b0:	df000017 	ldw	fp,0(sp)
    91b4:	dec00204 	addi	sp,sp,8
    91b8:	f800283a 	ret

000091bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    91bc:	defffd04 	addi	sp,sp,-12
    91c0:	dfc00215 	stw	ra,8(sp)
    91c4:	df000115 	stw	fp,4(sp)
    91c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    91cc:	0009883a 	mov	r4,zero
    91d0:	00093a80 	call	93a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    91d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    91d8:	00093e00 	call	93e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    91dc:	01800074 	movhi	r6,1
    91e0:	31a92304 	addi	r6,r6,-23412
    91e4:	01400074 	movhi	r5,1
    91e8:	29692304 	addi	r5,r5,-23412
    91ec:	01000074 	movhi	r4,1
    91f0:	21292304 	addi	r4,r4,-23412
    91f4:	0009a580 	call	9a58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    91f8:	00098940 	call	9894 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    91fc:	01000074 	movhi	r4,1
    9200:	21263d04 	addi	r4,r4,-26380
    9204:	000a05c0 	call	a05c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9208:	d0a0c417 	ldw	r2,-31984(gp)
    920c:	d0e0c517 	ldw	r3,-31980(gp)
    9210:	d120c617 	ldw	r4,-31976(gp)
    9214:	200d883a 	mov	r6,r4
    9218:	180b883a 	mov	r5,r3
    921c:	1009883a 	mov	r4,r2
    9220:	000805c0 	call	805c <main>
    9224:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9228:	01000044 	movi	r4,1
    922c:	00096900 	call	9690 <close>
  exit (result);
    9230:	e13fff17 	ldw	r4,-4(fp)
    9234:	000a0700 	call	a070 <exit>

00009238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9238:	defffe04 	addi	sp,sp,-8
    923c:	dfc00115 	stw	ra,4(sp)
    9240:	df000015 	stw	fp,0(sp)
    9244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9248:	d0a00717 	ldw	r2,-32740(gp)
    924c:	10000326 	beq	r2,zero,925c <alt_get_errno+0x24>
    9250:	d0a00717 	ldw	r2,-32740(gp)
    9254:	103ee83a 	callr	r2
    9258:	00000106 	br	9260 <alt_get_errno+0x28>
    925c:	d0a0c304 	addi	r2,gp,-31988
}
    9260:	e037883a 	mov	sp,fp
    9264:	dfc00117 	ldw	ra,4(sp)
    9268:	df000017 	ldw	fp,0(sp)
    926c:	dec00204 	addi	sp,sp,8
    9270:	f800283a 	ret

00009274 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9274:	defff904 	addi	sp,sp,-28
    9278:	dfc00615 	stw	ra,24(sp)
    927c:	df000515 	stw	fp,20(sp)
    9280:	df000504 	addi	fp,sp,20
    9284:	e13ffd15 	stw	r4,-12(fp)
    9288:	e17ffe15 	stw	r5,-8(fp)
    928c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9290:	e0bffd17 	ldw	r2,-12(fp)
    9294:	10000816 	blt	r2,zero,92b8 <write+0x44>
    9298:	01400304 	movi	r5,12
    929c:	e13ffd17 	ldw	r4,-12(fp)
    92a0:	00087bc0 	call	87bc <__mulsi3>
    92a4:	1007883a 	mov	r3,r2
    92a8:	00800074 	movhi	r2,1
    92ac:	10a97d04 	addi	r2,r2,-23052
    92b0:	1885883a 	add	r2,r3,r2
    92b4:	00000106 	br	92bc <write+0x48>
    92b8:	0005883a 	mov	r2,zero
    92bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    92c0:	e0bffb17 	ldw	r2,-20(fp)
    92c4:	10002126 	beq	r2,zero,934c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    92c8:	e0bffb17 	ldw	r2,-20(fp)
    92cc:	10800217 	ldw	r2,8(r2)
    92d0:	108000cc 	andi	r2,r2,3
    92d4:	10001826 	beq	r2,zero,9338 <write+0xc4>
    92d8:	e0bffb17 	ldw	r2,-20(fp)
    92dc:	10800017 	ldw	r2,0(r2)
    92e0:	10800617 	ldw	r2,24(r2)
    92e4:	10001426 	beq	r2,zero,9338 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    92e8:	e0bffb17 	ldw	r2,-20(fp)
    92ec:	10800017 	ldw	r2,0(r2)
    92f0:	10800617 	ldw	r2,24(r2)
    92f4:	e0ffff17 	ldw	r3,-4(fp)
    92f8:	180d883a 	mov	r6,r3
    92fc:	e17ffe17 	ldw	r5,-8(fp)
    9300:	e13ffb17 	ldw	r4,-20(fp)
    9304:	103ee83a 	callr	r2
    9308:	e0bffc15 	stw	r2,-16(fp)
    930c:	e0bffc17 	ldw	r2,-16(fp)
    9310:	1000070e 	bge	r2,zero,9330 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9314:	00092380 	call	9238 <alt_get_errno>
    9318:	1007883a 	mov	r3,r2
    931c:	e0bffc17 	ldw	r2,-16(fp)
    9320:	0085c83a 	sub	r2,zero,r2
    9324:	18800015 	stw	r2,0(r3)
        return -1;
    9328:	00bfffc4 	movi	r2,-1
    932c:	00000c06 	br	9360 <write+0xec>
      }
      return rval;
    9330:	e0bffc17 	ldw	r2,-16(fp)
    9334:	00000a06 	br	9360 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9338:	00092380 	call	9238 <alt_get_errno>
    933c:	1007883a 	mov	r3,r2
    9340:	00800344 	movi	r2,13
    9344:	18800015 	stw	r2,0(r3)
    9348:	00000406 	br	935c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    934c:	00092380 	call	9238 <alt_get_errno>
    9350:	1007883a 	mov	r3,r2
    9354:	00801444 	movi	r2,81
    9358:	18800015 	stw	r2,0(r3)
  }
  return -1;
    935c:	00bfffc4 	movi	r2,-1
}
    9360:	e037883a 	mov	sp,fp
    9364:	dfc00117 	ldw	ra,4(sp)
    9368:	df000017 	ldw	fp,0(sp)
    936c:	dec00204 	addi	sp,sp,8
    9370:	f800283a 	ret

00009374 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9374:	defffd04 	addi	sp,sp,-12
    9378:	dfc00215 	stw	ra,8(sp)
    937c:	df000115 	stw	fp,4(sp)
    9380:	df000104 	addi	fp,sp,4
    9384:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9388:	d1600404 	addi	r5,gp,-32752
    938c:	e13fff17 	ldw	r4,-4(fp)
    9390:	00097f00 	call	97f0 <alt_dev_llist_insert>
}
    9394:	e037883a 	mov	sp,fp
    9398:	dfc00117 	ldw	ra,4(sp)
    939c:	df000017 	ldw	fp,0(sp)
    93a0:	dec00204 	addi	sp,sp,8
    93a4:	f800283a 	ret

000093a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    93a8:	defffd04 	addi	sp,sp,-12
    93ac:	dfc00215 	stw	ra,8(sp)
    93b0:	df000115 	stw	fp,4(sp)
    93b4:	df000104 	addi	fp,sp,4
    93b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    93bc:	0009ddc0 	call	9ddc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    93c0:	00800044 	movi	r2,1
    93c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    93c8:	0001883a 	nop
    93cc:	e037883a 	mov	sp,fp
    93d0:	dfc00117 	ldw	ra,4(sp)
    93d4:	df000017 	ldw	fp,0(sp)
    93d8:	dec00204 	addi	sp,sp,8
    93dc:	f800283a 	ret

000093e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    93e0:	defffe04 	addi	sp,sp,-8
    93e4:	dfc00115 	stw	ra,4(sp)
    93e8:	df000015 	stw	fp,0(sp)
    93ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    93f0:	01000074 	movhi	r4,1
    93f4:	21296804 	addi	r4,r4,-23136
    93f8:	00093740 	call	9374 <alt_dev_reg>
}
    93fc:	0001883a 	nop
    9400:	e037883a 	mov	sp,fp
    9404:	dfc00117 	ldw	ra,4(sp)
    9408:	df000017 	ldw	fp,0(sp)
    940c:	dec00204 	addi	sp,sp,8
    9410:	f800283a 	ret

00009414 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9414:	defffa04 	addi	sp,sp,-24
    9418:	dfc00515 	stw	ra,20(sp)
    941c:	df000415 	stw	fp,16(sp)
    9420:	df000404 	addi	fp,sp,16
    9424:	e13ffd15 	stw	r4,-12(fp)
    9428:	e17ffe15 	stw	r5,-8(fp)
    942c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9430:	e0bffd17 	ldw	r2,-12(fp)
    9434:	10800017 	ldw	r2,0(r2)
    9438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    943c:	e0bffc17 	ldw	r2,-16(fp)
    9440:	10c00a04 	addi	r3,r2,40
    9444:	e0bffd17 	ldw	r2,-12(fp)
    9448:	10800217 	ldw	r2,8(r2)
    944c:	100f883a 	mov	r7,r2
    9450:	e1bfff17 	ldw	r6,-4(fp)
    9454:	e17ffe17 	ldw	r5,-8(fp)
    9458:	1809883a 	mov	r4,r3
    945c:	00094d40 	call	94d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9460:	e037883a 	mov	sp,fp
    9464:	dfc00117 	ldw	ra,4(sp)
    9468:	df000017 	ldw	fp,0(sp)
    946c:	dec00204 	addi	sp,sp,8
    9470:	f800283a 	ret

00009474 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9474:	defffa04 	addi	sp,sp,-24
    9478:	dfc00515 	stw	ra,20(sp)
    947c:	df000415 	stw	fp,16(sp)
    9480:	df000404 	addi	fp,sp,16
    9484:	e13ffd15 	stw	r4,-12(fp)
    9488:	e17ffe15 	stw	r5,-8(fp)
    948c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9490:	e0bffd17 	ldw	r2,-12(fp)
    9494:	10800017 	ldw	r2,0(r2)
    9498:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    949c:	e0bffc17 	ldw	r2,-16(fp)
    94a0:	10c00a04 	addi	r3,r2,40
    94a4:	e0bffd17 	ldw	r2,-12(fp)
    94a8:	10800217 	ldw	r2,8(r2)
    94ac:	100f883a 	mov	r7,r2
    94b0:	e1bfff17 	ldw	r6,-4(fp)
    94b4:	e17ffe17 	ldw	r5,-8(fp)
    94b8:	1809883a 	mov	r4,r3
    94bc:	00095c00 	call	95c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    94c0:	e037883a 	mov	sp,fp
    94c4:	dfc00117 	ldw	ra,4(sp)
    94c8:	df000017 	ldw	fp,0(sp)
    94cc:	dec00204 	addi	sp,sp,8
    94d0:	f800283a 	ret

000094d4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    94d4:	defff704 	addi	sp,sp,-36
    94d8:	df000815 	stw	fp,32(sp)
    94dc:	df000804 	addi	fp,sp,32
    94e0:	e13ffc15 	stw	r4,-16(fp)
    94e4:	e17ffd15 	stw	r5,-12(fp)
    94e8:	e1bffe15 	stw	r6,-8(fp)
    94ec:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    94f0:	e0bffc17 	ldw	r2,-16(fp)
    94f4:	10800017 	ldw	r2,0(r2)
    94f8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    94fc:	e0bffd17 	ldw	r2,-12(fp)
    9500:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9504:	e0bffe17 	ldw	r2,-8(fp)
    9508:	e0fffd17 	ldw	r3,-12(fp)
    950c:	1885883a 	add	r2,r3,r2
    9510:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9514:	00001206 	br	9560 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9518:	e0bff917 	ldw	r2,-28(fp)
    951c:	10800037 	ldwio	r2,0(r2)
    9520:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9524:	e0bffb17 	ldw	r2,-20(fp)
    9528:	10a0000c 	andi	r2,r2,32768
    952c:	10000626 	beq	r2,zero,9548 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9530:	e0bff817 	ldw	r2,-32(fp)
    9534:	10c00044 	addi	r3,r2,1
    9538:	e0fff815 	stw	r3,-32(fp)
    953c:	e0fffb17 	ldw	r3,-20(fp)
    9540:	10c00005 	stb	r3,0(r2)
    9544:	00000606 	br	9560 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9548:	e0fff817 	ldw	r3,-32(fp)
    954c:	e0bffd17 	ldw	r2,-12(fp)
    9550:	1880071e 	bne	r3,r2,9570 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9554:	e0bfff17 	ldw	r2,-4(fp)
    9558:	1090000c 	andi	r2,r2,16384
    955c:	1000061e 	bne	r2,zero,9578 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9560:	e0fff817 	ldw	r3,-32(fp)
    9564:	e0bffa17 	ldw	r2,-24(fp)
    9568:	18bfeb36 	bltu	r3,r2,9518 <_gp+0xffff6da4>
    956c:	00000306 	br	957c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9570:	0001883a 	nop
    9574:	00000106 	br	957c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9578:	0001883a 	nop
    
  }

  if (ptr != buffer)
    957c:	e0fff817 	ldw	r3,-32(fp)
    9580:	e0bffd17 	ldw	r2,-12(fp)
    9584:	18800426 	beq	r3,r2,9598 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9588:	e0fff817 	ldw	r3,-32(fp)
    958c:	e0bffd17 	ldw	r2,-12(fp)
    9590:	1885c83a 	sub	r2,r3,r2
    9594:	00000606 	br	95b0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9598:	e0bfff17 	ldw	r2,-4(fp)
    959c:	1090000c 	andi	r2,r2,16384
    95a0:	10000226 	beq	r2,zero,95ac <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    95a4:	00bffd44 	movi	r2,-11
    95a8:	00000106 	br	95b0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    95ac:	00bffec4 	movi	r2,-5
}
    95b0:	e037883a 	mov	sp,fp
    95b4:	df000017 	ldw	fp,0(sp)
    95b8:	dec00104 	addi	sp,sp,4
    95bc:	f800283a 	ret

000095c0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    95c0:	defff904 	addi	sp,sp,-28
    95c4:	df000615 	stw	fp,24(sp)
    95c8:	df000604 	addi	fp,sp,24
    95cc:	e13ffc15 	stw	r4,-16(fp)
    95d0:	e17ffd15 	stw	r5,-12(fp)
    95d4:	e1bffe15 	stw	r6,-8(fp)
    95d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    95dc:	e0bffc17 	ldw	r2,-16(fp)
    95e0:	10800017 	ldw	r2,0(r2)
    95e4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    95e8:	e0bffe17 	ldw	r2,-8(fp)
    95ec:	e0fffd17 	ldw	r3,-12(fp)
    95f0:	1885883a 	add	r2,r3,r2
    95f4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    95f8:	00000e06 	br	9634 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    95fc:	e0bffa17 	ldw	r2,-24(fp)
    9600:	10800104 	addi	r2,r2,4
    9604:	10800037 	ldwio	r2,0(r2)
    9608:	10bfffec 	andhi	r2,r2,65535
    960c:	10000926 	beq	r2,zero,9634 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9610:	e0fffa17 	ldw	r3,-24(fp)
    9614:	e0bffd17 	ldw	r2,-12(fp)
    9618:	11000044 	addi	r4,r2,1
    961c:	e13ffd15 	stw	r4,-12(fp)
    9620:	10800003 	ldbu	r2,0(r2)
    9624:	10803fcc 	andi	r2,r2,255
    9628:	1080201c 	xori	r2,r2,128
    962c:	10bfe004 	addi	r2,r2,-128
    9630:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9634:	e0fffd17 	ldw	r3,-12(fp)
    9638:	e0bffb17 	ldw	r2,-20(fp)
    963c:	18bfef36 	bltu	r3,r2,95fc <_gp+0xffff6e88>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9640:	e0bffe17 	ldw	r2,-8(fp)
}
    9644:	e037883a 	mov	sp,fp
    9648:	df000017 	ldw	fp,0(sp)
    964c:	dec00104 	addi	sp,sp,4
    9650:	f800283a 	ret

00009654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9654:	defffe04 	addi	sp,sp,-8
    9658:	dfc00115 	stw	ra,4(sp)
    965c:	df000015 	stw	fp,0(sp)
    9660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9664:	d0a00717 	ldw	r2,-32740(gp)
    9668:	10000326 	beq	r2,zero,9678 <alt_get_errno+0x24>
    966c:	d0a00717 	ldw	r2,-32740(gp)
    9670:	103ee83a 	callr	r2
    9674:	00000106 	br	967c <alt_get_errno+0x28>
    9678:	d0a0c304 	addi	r2,gp,-31988
}
    967c:	e037883a 	mov	sp,fp
    9680:	dfc00117 	ldw	ra,4(sp)
    9684:	df000017 	ldw	fp,0(sp)
    9688:	dec00204 	addi	sp,sp,8
    968c:	f800283a 	ret

00009690 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9690:	defffb04 	addi	sp,sp,-20
    9694:	dfc00415 	stw	ra,16(sp)
    9698:	df000315 	stw	fp,12(sp)
    969c:	df000304 	addi	fp,sp,12
    96a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    96a4:	e0bfff17 	ldw	r2,-4(fp)
    96a8:	10000816 	blt	r2,zero,96cc <close+0x3c>
    96ac:	01400304 	movi	r5,12
    96b0:	e13fff17 	ldw	r4,-4(fp)
    96b4:	00087bc0 	call	87bc <__mulsi3>
    96b8:	1007883a 	mov	r3,r2
    96bc:	00800074 	movhi	r2,1
    96c0:	10a97d04 	addi	r2,r2,-23052
    96c4:	1885883a 	add	r2,r3,r2
    96c8:	00000106 	br	96d0 <close+0x40>
    96cc:	0005883a 	mov	r2,zero
    96d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    96d4:	e0bffd17 	ldw	r2,-12(fp)
    96d8:	10001926 	beq	r2,zero,9740 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    96dc:	e0bffd17 	ldw	r2,-12(fp)
    96e0:	10800017 	ldw	r2,0(r2)
    96e4:	10800417 	ldw	r2,16(r2)
    96e8:	10000626 	beq	r2,zero,9704 <close+0x74>
    96ec:	e0bffd17 	ldw	r2,-12(fp)
    96f0:	10800017 	ldw	r2,0(r2)
    96f4:	10800417 	ldw	r2,16(r2)
    96f8:	e13ffd17 	ldw	r4,-12(fp)
    96fc:	103ee83a 	callr	r2
    9700:	00000106 	br	9708 <close+0x78>
    9704:	0005883a 	mov	r2,zero
    9708:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    970c:	e13fff17 	ldw	r4,-4(fp)
    9710:	0009d580 	call	9d58 <alt_release_fd>
    if (rval < 0)
    9714:	e0bffe17 	ldw	r2,-8(fp)
    9718:	1000070e 	bge	r2,zero,9738 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    971c:	00096540 	call	9654 <alt_get_errno>
    9720:	1007883a 	mov	r3,r2
    9724:	e0bffe17 	ldw	r2,-8(fp)
    9728:	0085c83a 	sub	r2,zero,r2
    972c:	18800015 	stw	r2,0(r3)
      return -1;
    9730:	00bfffc4 	movi	r2,-1
    9734:	00000706 	br	9754 <close+0xc4>
    }
    return 0;
    9738:	0005883a 	mov	r2,zero
    973c:	00000506 	br	9754 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9740:	00096540 	call	9654 <alt_get_errno>
    9744:	1007883a 	mov	r3,r2
    9748:	00801444 	movi	r2,81
    974c:	18800015 	stw	r2,0(r3)
    return -1;
    9750:	00bfffc4 	movi	r2,-1
  }
}
    9754:	e037883a 	mov	sp,fp
    9758:	dfc00117 	ldw	ra,4(sp)
    975c:	df000017 	ldw	fp,0(sp)
    9760:	dec00204 	addi	sp,sp,8
    9764:	f800283a 	ret

00009768 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9768:	deffff04 	addi	sp,sp,-4
    976c:	df000015 	stw	fp,0(sp)
    9770:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9774:	0001883a 	nop
    9778:	e037883a 	mov	sp,fp
    977c:	df000017 	ldw	fp,0(sp)
    9780:	dec00104 	addi	sp,sp,4
    9784:	f800283a 	ret

00009788 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9788:	defffc04 	addi	sp,sp,-16
    978c:	df000315 	stw	fp,12(sp)
    9790:	df000304 	addi	fp,sp,12
    9794:	e13ffd15 	stw	r4,-12(fp)
    9798:	e17ffe15 	stw	r5,-8(fp)
    979c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    97a0:	e0bfff17 	ldw	r2,-4(fp)
}
    97a4:	e037883a 	mov	sp,fp
    97a8:	df000017 	ldw	fp,0(sp)
    97ac:	dec00104 	addi	sp,sp,4
    97b0:	f800283a 	ret

000097b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97b4:	defffe04 	addi	sp,sp,-8
    97b8:	dfc00115 	stw	ra,4(sp)
    97bc:	df000015 	stw	fp,0(sp)
    97c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    97c4:	d0a00717 	ldw	r2,-32740(gp)
    97c8:	10000326 	beq	r2,zero,97d8 <alt_get_errno+0x24>
    97cc:	d0a00717 	ldw	r2,-32740(gp)
    97d0:	103ee83a 	callr	r2
    97d4:	00000106 	br	97dc <alt_get_errno+0x28>
    97d8:	d0a0c304 	addi	r2,gp,-31988
}
    97dc:	e037883a 	mov	sp,fp
    97e0:	dfc00117 	ldw	ra,4(sp)
    97e4:	df000017 	ldw	fp,0(sp)
    97e8:	dec00204 	addi	sp,sp,8
    97ec:	f800283a 	ret

000097f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    97f0:	defffa04 	addi	sp,sp,-24
    97f4:	dfc00515 	stw	ra,20(sp)
    97f8:	df000415 	stw	fp,16(sp)
    97fc:	df000404 	addi	fp,sp,16
    9800:	e13ffe15 	stw	r4,-8(fp)
    9804:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9808:	e0bffe17 	ldw	r2,-8(fp)
    980c:	10000326 	beq	r2,zero,981c <alt_dev_llist_insert+0x2c>
    9810:	e0bffe17 	ldw	r2,-8(fp)
    9814:	10800217 	ldw	r2,8(r2)
    9818:	1000061e 	bne	r2,zero,9834 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    981c:	00097b40 	call	97b4 <alt_get_errno>
    9820:	1007883a 	mov	r3,r2
    9824:	00800584 	movi	r2,22
    9828:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    982c:	00bffa84 	movi	r2,-22
    9830:	00001306 	br	9880 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9834:	e0bffe17 	ldw	r2,-8(fp)
    9838:	e0ffff17 	ldw	r3,-4(fp)
    983c:	e0fffc15 	stw	r3,-16(fp)
    9840:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9844:	e0bffd17 	ldw	r2,-12(fp)
    9848:	e0fffc17 	ldw	r3,-16(fp)
    984c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9850:	e0bffc17 	ldw	r2,-16(fp)
    9854:	10c00017 	ldw	r3,0(r2)
    9858:	e0bffd17 	ldw	r2,-12(fp)
    985c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9860:	e0bffc17 	ldw	r2,-16(fp)
    9864:	10800017 	ldw	r2,0(r2)
    9868:	e0fffd17 	ldw	r3,-12(fp)
    986c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9870:	e0bffc17 	ldw	r2,-16(fp)
    9874:	e0fffd17 	ldw	r3,-12(fp)
    9878:	10c00015 	stw	r3,0(r2)

  return 0;  
    987c:	0005883a 	mov	r2,zero
}
    9880:	e037883a 	mov	sp,fp
    9884:	dfc00117 	ldw	ra,4(sp)
    9888:	df000017 	ldw	fp,0(sp)
    988c:	dec00204 	addi	sp,sp,8
    9890:	f800283a 	ret

00009894 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9894:	defffd04 	addi	sp,sp,-12
    9898:	dfc00215 	stw	ra,8(sp)
    989c:	df000115 	stw	fp,4(sp)
    98a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    98a4:	00800074 	movhi	r2,1
    98a8:	10a8f604 	addi	r2,r2,-23592
    98ac:	e0bfff15 	stw	r2,-4(fp)
    98b0:	00000606 	br	98cc <_do_ctors+0x38>
        (*ctor) (); 
    98b4:	e0bfff17 	ldw	r2,-4(fp)
    98b8:	10800017 	ldw	r2,0(r2)
    98bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    98c0:	e0bfff17 	ldw	r2,-4(fp)
    98c4:	10bfff04 	addi	r2,r2,-4
    98c8:	e0bfff15 	stw	r2,-4(fp)
    98cc:	e0ffff17 	ldw	r3,-4(fp)
    98d0:	00800074 	movhi	r2,1
    98d4:	10a8f704 	addi	r2,r2,-23588
    98d8:	18bff62e 	bgeu	r3,r2,98b4 <_gp+0xffff7140>
        (*ctor) (); 
}
    98dc:	0001883a 	nop
    98e0:	e037883a 	mov	sp,fp
    98e4:	dfc00117 	ldw	ra,4(sp)
    98e8:	df000017 	ldw	fp,0(sp)
    98ec:	dec00204 	addi	sp,sp,8
    98f0:	f800283a 	ret

000098f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    98f4:	defffd04 	addi	sp,sp,-12
    98f8:	dfc00215 	stw	ra,8(sp)
    98fc:	df000115 	stw	fp,4(sp)
    9900:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9904:	00800074 	movhi	r2,1
    9908:	10a8f604 	addi	r2,r2,-23592
    990c:	e0bfff15 	stw	r2,-4(fp)
    9910:	00000606 	br	992c <_do_dtors+0x38>
        (*dtor) (); 
    9914:	e0bfff17 	ldw	r2,-4(fp)
    9918:	10800017 	ldw	r2,0(r2)
    991c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9920:	e0bfff17 	ldw	r2,-4(fp)
    9924:	10bfff04 	addi	r2,r2,-4
    9928:	e0bfff15 	stw	r2,-4(fp)
    992c:	e0ffff17 	ldw	r3,-4(fp)
    9930:	00800074 	movhi	r2,1
    9934:	10a8f704 	addi	r2,r2,-23588
    9938:	18bff62e 	bgeu	r3,r2,9914 <_gp+0xffff71a0>
        (*dtor) (); 
}
    993c:	0001883a 	nop
    9940:	e037883a 	mov	sp,fp
    9944:	dfc00117 	ldw	ra,4(sp)
    9948:	df000017 	ldw	fp,0(sp)
    994c:	dec00204 	addi	sp,sp,8
    9950:	f800283a 	ret

00009954 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9954:	deffff04 	addi	sp,sp,-4
    9958:	df000015 	stw	fp,0(sp)
    995c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9960:	0001883a 	nop
    9964:	e037883a 	mov	sp,fp
    9968:	df000017 	ldw	fp,0(sp)
    996c:	dec00104 	addi	sp,sp,4
    9970:	f800283a 	ret

00009974 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9974:	defff804 	addi	sp,sp,-32
    9978:	dfc00715 	stw	ra,28(sp)
    997c:	df000615 	stw	fp,24(sp)
    9980:	dc000515 	stw	r16,20(sp)
    9984:	df000604 	addi	fp,sp,24
    9988:	e13ffb15 	stw	r4,-20(fp)
    998c:	e17ffc15 	stw	r5,-16(fp)
    9990:	e1bffd15 	stw	r6,-12(fp)
    9994:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9998:	e1bffe17 	ldw	r6,-8(fp)
    999c:	e17ffd17 	ldw	r5,-12(fp)
    99a0:	e13ffc17 	ldw	r4,-16(fp)
    99a4:	0009bfc0 	call	9bfc <open>
    99a8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    99ac:	e0bffa17 	ldw	r2,-24(fp)
    99b0:	10002216 	blt	r2,zero,9a3c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    99b4:	04000074 	movhi	r16,1
    99b8:	84297d04 	addi	r16,r16,-23052
    99bc:	e0bffa17 	ldw	r2,-24(fp)
    99c0:	01400304 	movi	r5,12
    99c4:	1009883a 	mov	r4,r2
    99c8:	00087bc0 	call	87bc <__mulsi3>
    99cc:	8085883a 	add	r2,r16,r2
    99d0:	10c00017 	ldw	r3,0(r2)
    99d4:	e0bffb17 	ldw	r2,-20(fp)
    99d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    99dc:	04000074 	movhi	r16,1
    99e0:	84297d04 	addi	r16,r16,-23052
    99e4:	e0bffa17 	ldw	r2,-24(fp)
    99e8:	01400304 	movi	r5,12
    99ec:	1009883a 	mov	r4,r2
    99f0:	00087bc0 	call	87bc <__mulsi3>
    99f4:	8085883a 	add	r2,r16,r2
    99f8:	10800104 	addi	r2,r2,4
    99fc:	10c00017 	ldw	r3,0(r2)
    9a00:	e0bffb17 	ldw	r2,-20(fp)
    9a04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9a08:	04000074 	movhi	r16,1
    9a0c:	84297d04 	addi	r16,r16,-23052
    9a10:	e0bffa17 	ldw	r2,-24(fp)
    9a14:	01400304 	movi	r5,12
    9a18:	1009883a 	mov	r4,r2
    9a1c:	00087bc0 	call	87bc <__mulsi3>
    9a20:	8085883a 	add	r2,r16,r2
    9a24:	10800204 	addi	r2,r2,8
    9a28:	10c00017 	ldw	r3,0(r2)
    9a2c:	e0bffb17 	ldw	r2,-20(fp)
    9a30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9a34:	e13ffa17 	ldw	r4,-24(fp)
    9a38:	0009d580 	call	9d58 <alt_release_fd>
  }
} 
    9a3c:	0001883a 	nop
    9a40:	e6ffff04 	addi	sp,fp,-4
    9a44:	dfc00217 	ldw	ra,8(sp)
    9a48:	df000117 	ldw	fp,4(sp)
    9a4c:	dc000017 	ldw	r16,0(sp)
    9a50:	dec00304 	addi	sp,sp,12
    9a54:	f800283a 	ret

00009a58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9a58:	defffb04 	addi	sp,sp,-20
    9a5c:	dfc00415 	stw	ra,16(sp)
    9a60:	df000315 	stw	fp,12(sp)
    9a64:	df000304 	addi	fp,sp,12
    9a68:	e13ffd15 	stw	r4,-12(fp)
    9a6c:	e17ffe15 	stw	r5,-8(fp)
    9a70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9a74:	01c07fc4 	movi	r7,511
    9a78:	01800044 	movi	r6,1
    9a7c:	e17ffd17 	ldw	r5,-12(fp)
    9a80:	01000074 	movhi	r4,1
    9a84:	21298004 	addi	r4,r4,-23040
    9a88:	00099740 	call	9974 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9a8c:	01c07fc4 	movi	r7,511
    9a90:	000d883a 	mov	r6,zero
    9a94:	e17ffe17 	ldw	r5,-8(fp)
    9a98:	01000074 	movhi	r4,1
    9a9c:	21297d04 	addi	r4,r4,-23052
    9aa0:	00099740 	call	9974 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9aa4:	01c07fc4 	movi	r7,511
    9aa8:	01800044 	movi	r6,1
    9aac:	e17fff17 	ldw	r5,-4(fp)
    9ab0:	01000074 	movhi	r4,1
    9ab4:	21298304 	addi	r4,r4,-23028
    9ab8:	00099740 	call	9974 <alt_open_fd>
}  
    9abc:	0001883a 	nop
    9ac0:	e037883a 	mov	sp,fp
    9ac4:	dfc00117 	ldw	ra,4(sp)
    9ac8:	df000017 	ldw	fp,0(sp)
    9acc:	dec00204 	addi	sp,sp,8
    9ad0:	f800283a 	ret

00009ad4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9ad4:	defffe04 	addi	sp,sp,-8
    9ad8:	dfc00115 	stw	ra,4(sp)
    9adc:	df000015 	stw	fp,0(sp)
    9ae0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9ae4:	d0a00717 	ldw	r2,-32740(gp)
    9ae8:	10000326 	beq	r2,zero,9af8 <alt_get_errno+0x24>
    9aec:	d0a00717 	ldw	r2,-32740(gp)
    9af0:	103ee83a 	callr	r2
    9af4:	00000106 	br	9afc <alt_get_errno+0x28>
    9af8:	d0a0c304 	addi	r2,gp,-31988
}
    9afc:	e037883a 	mov	sp,fp
    9b00:	dfc00117 	ldw	ra,4(sp)
    9b04:	df000017 	ldw	fp,0(sp)
    9b08:	dec00204 	addi	sp,sp,8
    9b0c:	f800283a 	ret

00009b10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9b10:	defffb04 	addi	sp,sp,-20
    9b14:	dfc00415 	stw	ra,16(sp)
    9b18:	df000315 	stw	fp,12(sp)
    9b1c:	dc000215 	stw	r16,8(sp)
    9b20:	df000304 	addi	fp,sp,12
    9b24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9b28:	e0bffe17 	ldw	r2,-8(fp)
    9b2c:	10800217 	ldw	r2,8(r2)
    9b30:	10d00034 	orhi	r3,r2,16384
    9b34:	e0bffe17 	ldw	r2,-8(fp)
    9b38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b3c:	e03ffd15 	stw	zero,-12(fp)
    9b40:	00002306 	br	9bd0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b44:	04000074 	movhi	r16,1
    9b48:	84297d04 	addi	r16,r16,-23052
    9b4c:	e0bffd17 	ldw	r2,-12(fp)
    9b50:	01400304 	movi	r5,12
    9b54:	1009883a 	mov	r4,r2
    9b58:	00087bc0 	call	87bc <__mulsi3>
    9b5c:	8085883a 	add	r2,r16,r2
    9b60:	10c00017 	ldw	r3,0(r2)
    9b64:	e0bffe17 	ldw	r2,-8(fp)
    9b68:	10800017 	ldw	r2,0(r2)
    9b6c:	1880151e 	bne	r3,r2,9bc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9b70:	04000074 	movhi	r16,1
    9b74:	84297d04 	addi	r16,r16,-23052
    9b78:	e0bffd17 	ldw	r2,-12(fp)
    9b7c:	01400304 	movi	r5,12
    9b80:	1009883a 	mov	r4,r2
    9b84:	00087bc0 	call	87bc <__mulsi3>
    9b88:	8085883a 	add	r2,r16,r2
    9b8c:	10800204 	addi	r2,r2,8
    9b90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b94:	10000b0e 	bge	r2,zero,9bc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9b98:	01400304 	movi	r5,12
    9b9c:	e13ffd17 	ldw	r4,-12(fp)
    9ba0:	00087bc0 	call	87bc <__mulsi3>
    9ba4:	1007883a 	mov	r3,r2
    9ba8:	00800074 	movhi	r2,1
    9bac:	10a97d04 	addi	r2,r2,-23052
    9bb0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9bb4:	e0bffe17 	ldw	r2,-8(fp)
    9bb8:	18800226 	beq	r3,r2,9bc4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9bbc:	00bffcc4 	movi	r2,-13
    9bc0:	00000806 	br	9be4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9bc4:	e0bffd17 	ldw	r2,-12(fp)
    9bc8:	10800044 	addi	r2,r2,1
    9bcc:	e0bffd15 	stw	r2,-12(fp)
    9bd0:	d0a00617 	ldw	r2,-32744(gp)
    9bd4:	1007883a 	mov	r3,r2
    9bd8:	e0bffd17 	ldw	r2,-12(fp)
    9bdc:	18bfd92e 	bgeu	r3,r2,9b44 <_gp+0xffff73d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9be0:	0005883a 	mov	r2,zero
}
    9be4:	e6ffff04 	addi	sp,fp,-4
    9be8:	dfc00217 	ldw	ra,8(sp)
    9bec:	df000117 	ldw	fp,4(sp)
    9bf0:	dc000017 	ldw	r16,0(sp)
    9bf4:	dec00304 	addi	sp,sp,12
    9bf8:	f800283a 	ret

00009bfc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9bfc:	defff604 	addi	sp,sp,-40
    9c00:	dfc00915 	stw	ra,36(sp)
    9c04:	df000815 	stw	fp,32(sp)
    9c08:	df000804 	addi	fp,sp,32
    9c0c:	e13ffd15 	stw	r4,-12(fp)
    9c10:	e17ffe15 	stw	r5,-8(fp)
    9c14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9c18:	00bfffc4 	movi	r2,-1
    9c1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9c20:	00bffb44 	movi	r2,-19
    9c24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9c28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9c2c:	d1600404 	addi	r5,gp,-32752
    9c30:	e13ffd17 	ldw	r4,-12(fp)
    9c34:	0009e000 	call	9e00 <alt_find_dev>
    9c38:	e0bff815 	stw	r2,-32(fp)
    9c3c:	e0bff817 	ldw	r2,-32(fp)
    9c40:	1000051e 	bne	r2,zero,9c58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9c44:	e13ffd17 	ldw	r4,-12(fp)
    9c48:	0009e900 	call	9e90 <alt_find_file>
    9c4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9c50:	00800044 	movi	r2,1
    9c54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9c58:	e0bff817 	ldw	r2,-32(fp)
    9c5c:	10002b26 	beq	r2,zero,9d0c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9c60:	e13ff817 	ldw	r4,-32(fp)
    9c64:	0009f980 	call	9f98 <alt_get_fd>
    9c68:	e0bff915 	stw	r2,-28(fp)
    9c6c:	e0bff917 	ldw	r2,-28(fp)
    9c70:	1000030e 	bge	r2,zero,9c80 <open+0x84>
    {
      status = index;
    9c74:	e0bff917 	ldw	r2,-28(fp)
    9c78:	e0bffa15 	stw	r2,-24(fp)
    9c7c:	00002506 	br	9d14 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9c80:	01400304 	movi	r5,12
    9c84:	e13ff917 	ldw	r4,-28(fp)
    9c88:	00087bc0 	call	87bc <__mulsi3>
    9c8c:	1007883a 	mov	r3,r2
    9c90:	00800074 	movhi	r2,1
    9c94:	10a97d04 	addi	r2,r2,-23052
    9c98:	1885883a 	add	r2,r3,r2
    9c9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9ca0:	e0fffe17 	ldw	r3,-8(fp)
    9ca4:	00900034 	movhi	r2,16384
    9ca8:	10bfffc4 	addi	r2,r2,-1
    9cac:	1886703a 	and	r3,r3,r2
    9cb0:	e0bffc17 	ldw	r2,-16(fp)
    9cb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9cb8:	e0bffb17 	ldw	r2,-20(fp)
    9cbc:	1000051e 	bne	r2,zero,9cd4 <open+0xd8>
    9cc0:	e13ffc17 	ldw	r4,-16(fp)
    9cc4:	0009b100 	call	9b10 <alt_file_locked>
    9cc8:	e0bffa15 	stw	r2,-24(fp)
    9ccc:	e0bffa17 	ldw	r2,-24(fp)
    9cd0:	10001016 	blt	r2,zero,9d14 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9cd4:	e0bff817 	ldw	r2,-32(fp)
    9cd8:	10800317 	ldw	r2,12(r2)
    9cdc:	10000826 	beq	r2,zero,9d00 <open+0x104>
    9ce0:	e0bff817 	ldw	r2,-32(fp)
    9ce4:	10800317 	ldw	r2,12(r2)
    9ce8:	e1ffff17 	ldw	r7,-4(fp)
    9cec:	e1bffe17 	ldw	r6,-8(fp)
    9cf0:	e17ffd17 	ldw	r5,-12(fp)
    9cf4:	e13ffc17 	ldw	r4,-16(fp)
    9cf8:	103ee83a 	callr	r2
    9cfc:	00000106 	br	9d04 <open+0x108>
    9d00:	0005883a 	mov	r2,zero
    9d04:	e0bffa15 	stw	r2,-24(fp)
    9d08:	00000206 	br	9d14 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9d0c:	00bffb44 	movi	r2,-19
    9d10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9d14:	e0bffa17 	ldw	r2,-24(fp)
    9d18:	1000090e 	bge	r2,zero,9d40 <open+0x144>
  {
    alt_release_fd (index);  
    9d1c:	e13ff917 	ldw	r4,-28(fp)
    9d20:	0009d580 	call	9d58 <alt_release_fd>
    ALT_ERRNO = -status;
    9d24:	0009ad40 	call	9ad4 <alt_get_errno>
    9d28:	1007883a 	mov	r3,r2
    9d2c:	e0bffa17 	ldw	r2,-24(fp)
    9d30:	0085c83a 	sub	r2,zero,r2
    9d34:	18800015 	stw	r2,0(r3)
    return -1;
    9d38:	00bfffc4 	movi	r2,-1
    9d3c:	00000106 	br	9d44 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9d40:	e0bff917 	ldw	r2,-28(fp)
}
    9d44:	e037883a 	mov	sp,fp
    9d48:	dfc00117 	ldw	ra,4(sp)
    9d4c:	df000017 	ldw	fp,0(sp)
    9d50:	dec00204 	addi	sp,sp,8
    9d54:	f800283a 	ret

00009d58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9d58:	defffc04 	addi	sp,sp,-16
    9d5c:	dfc00315 	stw	ra,12(sp)
    9d60:	df000215 	stw	fp,8(sp)
    9d64:	dc000115 	stw	r16,4(sp)
    9d68:	df000204 	addi	fp,sp,8
    9d6c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9d70:	e0bffe17 	ldw	r2,-8(fp)
    9d74:	108000d0 	cmplti	r2,r2,3
    9d78:	1000111e 	bne	r2,zero,9dc0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9d7c:	04000074 	movhi	r16,1
    9d80:	84297d04 	addi	r16,r16,-23052
    9d84:	e0bffe17 	ldw	r2,-8(fp)
    9d88:	01400304 	movi	r5,12
    9d8c:	1009883a 	mov	r4,r2
    9d90:	00087bc0 	call	87bc <__mulsi3>
    9d94:	8085883a 	add	r2,r16,r2
    9d98:	10800204 	addi	r2,r2,8
    9d9c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9da0:	04000074 	movhi	r16,1
    9da4:	84297d04 	addi	r16,r16,-23052
    9da8:	e0bffe17 	ldw	r2,-8(fp)
    9dac:	01400304 	movi	r5,12
    9db0:	1009883a 	mov	r4,r2
    9db4:	00087bc0 	call	87bc <__mulsi3>
    9db8:	8085883a 	add	r2,r16,r2
    9dbc:	10000015 	stw	zero,0(r2)
  }
}
    9dc0:	0001883a 	nop
    9dc4:	e6ffff04 	addi	sp,fp,-4
    9dc8:	dfc00217 	ldw	ra,8(sp)
    9dcc:	df000117 	ldw	fp,4(sp)
    9dd0:	dc000017 	ldw	r16,0(sp)
    9dd4:	dec00304 	addi	sp,sp,12
    9dd8:	f800283a 	ret

00009ddc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9ddc:	deffff04 	addi	sp,sp,-4
    9de0:	df000015 	stw	fp,0(sp)
    9de4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9de8:	000170fa 	wrctl	ienable,zero
}
    9dec:	0001883a 	nop
    9df0:	e037883a 	mov	sp,fp
    9df4:	df000017 	ldw	fp,0(sp)
    9df8:	dec00104 	addi	sp,sp,4
    9dfc:	f800283a 	ret

00009e00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9e00:	defffa04 	addi	sp,sp,-24
    9e04:	dfc00515 	stw	ra,20(sp)
    9e08:	df000415 	stw	fp,16(sp)
    9e0c:	df000404 	addi	fp,sp,16
    9e10:	e13ffe15 	stw	r4,-8(fp)
    9e14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9e18:	e0bfff17 	ldw	r2,-4(fp)
    9e1c:	10800017 	ldw	r2,0(r2)
    9e20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9e24:	e13ffe17 	ldw	r4,-8(fp)
    9e28:	00089440 	call	8944 <strlen>
    9e2c:	10800044 	addi	r2,r2,1
    9e30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e34:	00000d06 	br	9e6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e38:	e0bffc17 	ldw	r2,-16(fp)
    9e3c:	10800217 	ldw	r2,8(r2)
    9e40:	e0fffd17 	ldw	r3,-12(fp)
    9e44:	180d883a 	mov	r6,r3
    9e48:	e17ffe17 	ldw	r5,-8(fp)
    9e4c:	1009883a 	mov	r4,r2
    9e50:	000a0900 	call	a090 <memcmp>
    9e54:	1000021e 	bne	r2,zero,9e60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e58:	e0bffc17 	ldw	r2,-16(fp)
    9e5c:	00000706 	br	9e7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e60:	e0bffc17 	ldw	r2,-16(fp)
    9e64:	10800017 	ldw	r2,0(r2)
    9e68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e6c:	e0fffc17 	ldw	r3,-16(fp)
    9e70:	e0bfff17 	ldw	r2,-4(fp)
    9e74:	18bff01e 	bne	r3,r2,9e38 <_gp+0xffff76c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9e78:	0005883a 	mov	r2,zero
}
    9e7c:	e037883a 	mov	sp,fp
    9e80:	dfc00117 	ldw	ra,4(sp)
    9e84:	df000017 	ldw	fp,0(sp)
    9e88:	dec00204 	addi	sp,sp,8
    9e8c:	f800283a 	ret

00009e90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9e90:	defffb04 	addi	sp,sp,-20
    9e94:	dfc00415 	stw	ra,16(sp)
    9e98:	df000315 	stw	fp,12(sp)
    9e9c:	df000304 	addi	fp,sp,12
    9ea0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9ea4:	d0a00217 	ldw	r2,-32760(gp)
    9ea8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9eac:	00003106 	br	9f74 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9eb0:	e0bffd17 	ldw	r2,-12(fp)
    9eb4:	10800217 	ldw	r2,8(r2)
    9eb8:	1009883a 	mov	r4,r2
    9ebc:	00089440 	call	8944 <strlen>
    9ec0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9ec4:	e0bffd17 	ldw	r2,-12(fp)
    9ec8:	10c00217 	ldw	r3,8(r2)
    9ecc:	e0bffe17 	ldw	r2,-8(fp)
    9ed0:	10bfffc4 	addi	r2,r2,-1
    9ed4:	1885883a 	add	r2,r3,r2
    9ed8:	10800003 	ldbu	r2,0(r2)
    9edc:	10803fcc 	andi	r2,r2,255
    9ee0:	1080201c 	xori	r2,r2,128
    9ee4:	10bfe004 	addi	r2,r2,-128
    9ee8:	10800bd8 	cmpnei	r2,r2,47
    9eec:	1000031e 	bne	r2,zero,9efc <alt_find_file+0x6c>
    {
      len -= 1;
    9ef0:	e0bffe17 	ldw	r2,-8(fp)
    9ef4:	10bfffc4 	addi	r2,r2,-1
    9ef8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9efc:	e0bffe17 	ldw	r2,-8(fp)
    9f00:	e0ffff17 	ldw	r3,-4(fp)
    9f04:	1885883a 	add	r2,r3,r2
    9f08:	10800003 	ldbu	r2,0(r2)
    9f0c:	10803fcc 	andi	r2,r2,255
    9f10:	1080201c 	xori	r2,r2,128
    9f14:	10bfe004 	addi	r2,r2,-128
    9f18:	10800be0 	cmpeqi	r2,r2,47
    9f1c:	1000081e 	bne	r2,zero,9f40 <alt_find_file+0xb0>
    9f20:	e0bffe17 	ldw	r2,-8(fp)
    9f24:	e0ffff17 	ldw	r3,-4(fp)
    9f28:	1885883a 	add	r2,r3,r2
    9f2c:	10800003 	ldbu	r2,0(r2)
    9f30:	10803fcc 	andi	r2,r2,255
    9f34:	1080201c 	xori	r2,r2,128
    9f38:	10bfe004 	addi	r2,r2,-128
    9f3c:	10000a1e 	bne	r2,zero,9f68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9f40:	e0bffd17 	ldw	r2,-12(fp)
    9f44:	10800217 	ldw	r2,8(r2)
    9f48:	e0fffe17 	ldw	r3,-8(fp)
    9f4c:	180d883a 	mov	r6,r3
    9f50:	e17fff17 	ldw	r5,-4(fp)
    9f54:	1009883a 	mov	r4,r2
    9f58:	000a0900 	call	a090 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f5c:	1000021e 	bne	r2,zero,9f68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9f60:	e0bffd17 	ldw	r2,-12(fp)
    9f64:	00000706 	br	9f84 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9f68:	e0bffd17 	ldw	r2,-12(fp)
    9f6c:	10800017 	ldw	r2,0(r2)
    9f70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f74:	e0fffd17 	ldw	r3,-12(fp)
    9f78:	d0a00204 	addi	r2,gp,-32760
    9f7c:	18bfcc1e 	bne	r3,r2,9eb0 <_gp+0xffff773c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9f80:	0005883a 	mov	r2,zero
}
    9f84:	e037883a 	mov	sp,fp
    9f88:	dfc00117 	ldw	ra,4(sp)
    9f8c:	df000017 	ldw	fp,0(sp)
    9f90:	dec00204 	addi	sp,sp,8
    9f94:	f800283a 	ret

00009f98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f98:	defffa04 	addi	sp,sp,-24
    9f9c:	dfc00515 	stw	ra,20(sp)
    9fa0:	df000415 	stw	fp,16(sp)
    9fa4:	dc000315 	stw	r16,12(sp)
    9fa8:	df000404 	addi	fp,sp,16
    9fac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9fb0:	00bffa04 	movi	r2,-24
    9fb4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9fb8:	e03ffc15 	stw	zero,-16(fp)
    9fbc:	00001d06 	br	a034 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    9fc0:	04000074 	movhi	r16,1
    9fc4:	84297d04 	addi	r16,r16,-23052
    9fc8:	e0bffc17 	ldw	r2,-16(fp)
    9fcc:	01400304 	movi	r5,12
    9fd0:	1009883a 	mov	r4,r2
    9fd4:	00087bc0 	call	87bc <__mulsi3>
    9fd8:	8085883a 	add	r2,r16,r2
    9fdc:	10800017 	ldw	r2,0(r2)
    9fe0:	1000111e 	bne	r2,zero,a028 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    9fe4:	04000074 	movhi	r16,1
    9fe8:	84297d04 	addi	r16,r16,-23052
    9fec:	e0bffc17 	ldw	r2,-16(fp)
    9ff0:	01400304 	movi	r5,12
    9ff4:	1009883a 	mov	r4,r2
    9ff8:	00087bc0 	call	87bc <__mulsi3>
    9ffc:	8085883a 	add	r2,r16,r2
    a000:	e0fffe17 	ldw	r3,-8(fp)
    a004:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a008:	d0e00617 	ldw	r3,-32744(gp)
    a00c:	e0bffc17 	ldw	r2,-16(fp)
    a010:	1880020e 	bge	r3,r2,a01c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a014:	e0bffc17 	ldw	r2,-16(fp)
    a018:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a01c:	e0bffc17 	ldw	r2,-16(fp)
    a020:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a024:	00000606 	br	a040 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a028:	e0bffc17 	ldw	r2,-16(fp)
    a02c:	10800044 	addi	r2,r2,1
    a030:	e0bffc15 	stw	r2,-16(fp)
    a034:	e0bffc17 	ldw	r2,-16(fp)
    a038:	10800810 	cmplti	r2,r2,32
    a03c:	103fe01e 	bne	r2,zero,9fc0 <_gp+0xffff784c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a040:	e0bffd17 	ldw	r2,-12(fp)
}
    a044:	e6ffff04 	addi	sp,fp,-4
    a048:	dfc00217 	ldw	ra,8(sp)
    a04c:	df000117 	ldw	fp,4(sp)
    a050:	dc000017 	ldw	r16,0(sp)
    a054:	dec00304 	addi	sp,sp,12
    a058:	f800283a 	ret

0000a05c <atexit>:
    a05c:	200b883a 	mov	r5,r4
    a060:	000f883a 	mov	r7,zero
    a064:	000d883a 	mov	r6,zero
    a068:	0009883a 	mov	r4,zero
    a06c:	000a0c01 	jmpi	a0c0 <__register_exitproc>

0000a070 <exit>:
    a070:	defffe04 	addi	sp,sp,-8
    a074:	000b883a 	mov	r5,zero
    a078:	dc000015 	stw	r16,0(sp)
    a07c:	dfc00115 	stw	ra,4(sp)
    a080:	2021883a 	mov	r16,r4
    a084:	000a2180 	call	a218 <__call_exitprocs>
    a088:	8009883a 	mov	r4,r16
    a08c:	000a3a80 	call	a3a8 <_exit>

0000a090 <memcmp>:
    a090:	218d883a 	add	r6,r4,r6
    a094:	21800826 	beq	r4,r6,a0b8 <memcmp+0x28>
    a098:	20800003 	ldbu	r2,0(r4)
    a09c:	28c00003 	ldbu	r3,0(r5)
    a0a0:	10c00226 	beq	r2,r3,a0ac <memcmp+0x1c>
    a0a4:	10c5c83a 	sub	r2,r2,r3
    a0a8:	f800283a 	ret
    a0ac:	21000044 	addi	r4,r4,1
    a0b0:	29400044 	addi	r5,r5,1
    a0b4:	003ff706 	br	a094 <_gp+0xffff7920>
    a0b8:	0005883a 	mov	r2,zero
    a0bc:	f800283a 	ret

0000a0c0 <__register_exitproc>:
    a0c0:	00800074 	movhi	r2,1
    a0c4:	10a9dd04 	addi	r2,r2,-22668
    a0c8:	10c00017 	ldw	r3,0(r2)
    a0cc:	defff904 	addi	sp,sp,-28
    a0d0:	dc000015 	stw	r16,0(sp)
    a0d4:	1c000c17 	ldw	r16,48(r3)
    a0d8:	dd400515 	stw	r21,20(sp)
    a0dc:	dd000415 	stw	r20,16(sp)
    a0e0:	dcc00315 	stw	r19,12(sp)
    a0e4:	dc800215 	stw	r18,8(sp)
    a0e8:	dc400115 	stw	r17,4(sp)
    a0ec:	dfc00615 	stw	ra,24(sp)
    a0f0:	202b883a 	mov	r21,r4
    a0f4:	2823883a 	mov	r17,r5
    a0f8:	3027883a 	mov	r19,r6
    a0fc:	3825883a 	mov	r18,r7
    a100:	1029883a 	mov	r20,r2
    a104:	8000021e 	bne	r16,zero,a110 <__register_exitproc+0x50>
    a108:	1c000d04 	addi	r16,r3,52
    a10c:	1c000c15 	stw	r16,48(r3)
    a110:	80800117 	ldw	r2,4(r16)
    a114:	00c007c4 	movi	r3,31
    a118:	1880110e 	bge	r3,r2,a160 <__register_exitproc+0xa0>
    a11c:	00800034 	movhi	r2,0
    a120:	10800004 	addi	r2,r2,0
    a124:	1000021e 	bne	r2,zero,a130 <__register_exitproc+0x70>
    a128:	00bfffc4 	movi	r2,-1
    a12c:	00003106 	br	a1f4 <__register_exitproc+0x134>
    a130:	01002304 	movi	r4,140
    a134:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a138:	1021883a 	mov	r16,r2
    a13c:	103ffa26 	beq	r2,zero,a128 <_gp+0xffff79b4>
    a140:	10000115 	stw	zero,4(r2)
    a144:	a0800017 	ldw	r2,0(r20)
    a148:	10c00c17 	ldw	r3,48(r2)
    a14c:	80c00015 	stw	r3,0(r16)
    a150:	14000c15 	stw	r16,48(r2)
    a154:	80002215 	stw	zero,136(r16)
    a158:	a8001d26 	beq	r21,zero,a1d0 <__register_exitproc+0x110>
    a15c:	00000606 	br	a178 <__register_exitproc+0xb8>
    a160:	a8001b26 	beq	r21,zero,a1d0 <__register_exitproc+0x110>
    a164:	80802217 	ldw	r2,136(r16)
    a168:	1000091e 	bne	r2,zero,a190 <__register_exitproc+0xd0>
    a16c:	00800034 	movhi	r2,0
    a170:	10800004 	addi	r2,r2,0
    a174:	103fec26 	beq	r2,zero,a128 <_gp+0xffff79b4>
    a178:	01004204 	movi	r4,264
    a17c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a180:	103fe926 	beq	r2,zero,a128 <_gp+0xffff79b4>
    a184:	10004015 	stw	zero,256(r2)
    a188:	10004115 	stw	zero,260(r2)
    a18c:	80802215 	stw	r2,136(r16)
    a190:	81400117 	ldw	r5,4(r16)
    a194:	01000044 	movi	r4,1
    a198:	2947883a 	add	r3,r5,r5
    a19c:	18c7883a 	add	r3,r3,r3
    a1a0:	10c7883a 	add	r3,r2,r3
    a1a4:	1cc00015 	stw	r19,0(r3)
    a1a8:	2148983a 	sll	r4,r4,r5
    a1ac:	11404017 	ldw	r5,256(r2)
    a1b0:	290ab03a 	or	r5,r5,r4
    a1b4:	11404015 	stw	r5,256(r2)
    a1b8:	1c802015 	stw	r18,128(r3)
    a1bc:	00c00084 	movi	r3,2
    a1c0:	a8c0031e 	bne	r21,r3,a1d0 <__register_exitproc+0x110>
    a1c4:	10c04117 	ldw	r3,260(r2)
    a1c8:	1908b03a 	or	r4,r3,r4
    a1cc:	11004115 	stw	r4,260(r2)
    a1d0:	80800117 	ldw	r2,4(r16)
    a1d4:	10c00044 	addi	r3,r2,1
    a1d8:	10800084 	addi	r2,r2,2
    a1dc:	1085883a 	add	r2,r2,r2
    a1e0:	1085883a 	add	r2,r2,r2
    a1e4:	80c00115 	stw	r3,4(r16)
    a1e8:	80a1883a 	add	r16,r16,r2
    a1ec:	84400015 	stw	r17,0(r16)
    a1f0:	0005883a 	mov	r2,zero
    a1f4:	dfc00617 	ldw	ra,24(sp)
    a1f8:	dd400517 	ldw	r21,20(sp)
    a1fc:	dd000417 	ldw	r20,16(sp)
    a200:	dcc00317 	ldw	r19,12(sp)
    a204:	dc800217 	ldw	r18,8(sp)
    a208:	dc400117 	ldw	r17,4(sp)
    a20c:	dc000017 	ldw	r16,0(sp)
    a210:	dec00704 	addi	sp,sp,28
    a214:	f800283a 	ret

0000a218 <__call_exitprocs>:
    a218:	defff504 	addi	sp,sp,-44
    a21c:	dd000515 	stw	r20,20(sp)
    a220:	05000074 	movhi	r20,1
    a224:	dc800315 	stw	r18,12(sp)
    a228:	dfc00a15 	stw	ra,40(sp)
    a22c:	df000915 	stw	fp,36(sp)
    a230:	ddc00815 	stw	r23,32(sp)
    a234:	dd800715 	stw	r22,28(sp)
    a238:	dd400615 	stw	r21,24(sp)
    a23c:	dcc00415 	stw	r19,16(sp)
    a240:	dc400215 	stw	r17,8(sp)
    a244:	dc000115 	stw	r16,4(sp)
    a248:	d9000015 	stw	r4,0(sp)
    a24c:	2825883a 	mov	r18,r5
    a250:	a529dd04 	addi	r20,r20,-22668
    a254:	a4400017 	ldw	r17,0(r20)
    a258:	8cc00c17 	ldw	r19,48(r17)
    a25c:	8c400c04 	addi	r17,r17,48
    a260:	98004526 	beq	r19,zero,a378 <__call_exitprocs+0x160>
    a264:	9c000117 	ldw	r16,4(r19)
    a268:	00900034 	movhi	r2,16384
    a26c:	10bfffc4 	addi	r2,r2,-1
    a270:	9d402217 	ldw	r21,136(r19)
    a274:	85bfffc4 	addi	r22,r16,-1
    a278:	80a1883a 	add	r16,r16,r2
    a27c:	8421883a 	add	r16,r16,r16
    a280:	8421883a 	add	r16,r16,r16
    a284:	ac2f883a 	add	r23,r21,r16
    a288:	84000204 	addi	r16,r16,8
    a28c:	9c21883a 	add	r16,r19,r16
    a290:	b0002716 	blt	r22,zero,a330 <__call_exitprocs+0x118>
    a294:	90000726 	beq	r18,zero,a2b4 <__call_exitprocs+0x9c>
    a298:	a800041e 	bne	r21,zero,a2ac <__call_exitprocs+0x94>
    a29c:	b5bfffc4 	addi	r22,r22,-1
    a2a0:	bdffff04 	addi	r23,r23,-4
    a2a4:	843fff04 	addi	r16,r16,-4
    a2a8:	003ff906 	br	a290 <_gp+0xffff7b1c>
    a2ac:	b9002017 	ldw	r4,128(r23)
    a2b0:	913ffa1e 	bne	r18,r4,a29c <_gp+0xffff7b28>
    a2b4:	99000117 	ldw	r4,4(r19)
    a2b8:	82000017 	ldw	r8,0(r16)
    a2bc:	213fffc4 	addi	r4,r4,-1
    a2c0:	b100021e 	bne	r22,r4,a2cc <__call_exitprocs+0xb4>
    a2c4:	9d800115 	stw	r22,4(r19)
    a2c8:	00000106 	br	a2d0 <__call_exitprocs+0xb8>
    a2cc:	80000015 	stw	zero,0(r16)
    a2d0:	403ff226 	beq	r8,zero,a29c <_gp+0xffff7b28>
    a2d4:	9f000117 	ldw	fp,4(r19)
    a2d8:	a8000526 	beq	r21,zero,a2f0 <__call_exitprocs+0xd8>
    a2dc:	00800044 	movi	r2,1
    a2e0:	1592983a 	sll	r9,r2,r22
    a2e4:	a9404017 	ldw	r5,256(r21)
    a2e8:	494a703a 	and	r5,r9,r5
    a2ec:	2800021e 	bne	r5,zero,a2f8 <__call_exitprocs+0xe0>
    a2f0:	403ee83a 	callr	r8
    a2f4:	00000906 	br	a31c <__call_exitprocs+0x104>
    a2f8:	a9004117 	ldw	r4,260(r21)
    a2fc:	4908703a 	and	r4,r9,r4
    a300:	2000041e 	bne	r4,zero,a314 <__call_exitprocs+0xfc>
    a304:	b9400017 	ldw	r5,0(r23)
    a308:	d9000017 	ldw	r4,0(sp)
    a30c:	403ee83a 	callr	r8
    a310:	00000206 	br	a31c <__call_exitprocs+0x104>
    a314:	b9000017 	ldw	r4,0(r23)
    a318:	403ee83a 	callr	r8
    a31c:	99000117 	ldw	r4,4(r19)
    a320:	e13fcc1e 	bne	fp,r4,a254 <_gp+0xffff7ae0>
    a324:	89000017 	ldw	r4,0(r17)
    a328:	993fdc26 	beq	r19,r4,a29c <_gp+0xffff7b28>
    a32c:	003fc906 	br	a254 <_gp+0xffff7ae0>
    a330:	00800034 	movhi	r2,0
    a334:	10800004 	addi	r2,r2,0
    a338:	10000f26 	beq	r2,zero,a378 <__call_exitprocs+0x160>
    a33c:	99400117 	ldw	r5,4(r19)
    a340:	99000017 	ldw	r4,0(r19)
    a344:	2800091e 	bne	r5,zero,a36c <__call_exitprocs+0x154>
    a348:	20000826 	beq	r4,zero,a36c <__call_exitprocs+0x154>
    a34c:	89000015 	stw	r4,0(r17)
    a350:	a8000226 	beq	r21,zero,a35c <__call_exitprocs+0x144>
    a354:	a809883a 	mov	r4,r21
    a358:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a35c:	9809883a 	mov	r4,r19
    a360:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a364:	8cc00017 	ldw	r19,0(r17)
    a368:	003fbd06 	br	a260 <_gp+0xffff7aec>
    a36c:	9823883a 	mov	r17,r19
    a370:	2027883a 	mov	r19,r4
    a374:	003fba06 	br	a260 <_gp+0xffff7aec>
    a378:	dfc00a17 	ldw	ra,40(sp)
    a37c:	df000917 	ldw	fp,36(sp)
    a380:	ddc00817 	ldw	r23,32(sp)
    a384:	dd800717 	ldw	r22,28(sp)
    a388:	dd400617 	ldw	r21,24(sp)
    a38c:	dd000517 	ldw	r20,20(sp)
    a390:	dcc00417 	ldw	r19,16(sp)
    a394:	dc800317 	ldw	r18,12(sp)
    a398:	dc400217 	ldw	r17,8(sp)
    a39c:	dc000117 	ldw	r16,4(sp)
    a3a0:	dec00b04 	addi	sp,sp,44
    a3a4:	f800283a 	ret

0000a3a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a3a8:	defffd04 	addi	sp,sp,-12
    a3ac:	df000215 	stw	fp,8(sp)
    a3b0:	df000204 	addi	fp,sp,8
    a3b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a3b8:	0001883a 	nop
    a3bc:	e0bfff17 	ldw	r2,-4(fp)
    a3c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a3c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a3c8:	10000226 	beq	r2,zero,a3d4 <_exit+0x2c>
    ALT_SIM_FAIL();
    a3cc:	002af070 	cmpltui	zero,zero,43969
    a3d0:	00000106 	br	a3d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a3d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a3d8:	003fff06 	br	a3d8 <_gp+0xffff7c64>
