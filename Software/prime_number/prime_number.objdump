
prime_number.elf:     file format elf32-littlenios2
prime_number.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002384 memsz 0x00002384 flags r-x
    LOAD off    0x000033a4 vaddr 0x0000a3a4 paddr 0x0000a678 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x0000394c vaddr 0x0000a94c paddr 0x0000a94c align 2**12
         filesz 0x00000000 memsz 0x00000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00003678  2**0
                  CONTENTS
  2 .text         000022a4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e0  0000a2c4  0000a2c4  000032c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000a3a4  0000a678  000033a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  0000a94c  0000a94c  0000394c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000ad74  0000ad74  00003678  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000530  00000000  00000000  000036a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000076c1  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026f1  00000000  00000000  0000b291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002d60  00000000  00000000  0000d982  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ab8  00000000  00000000  000106e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017de  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000167f  00000000  00000000  0001297a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00014010  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015a96  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00015a99  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015aa5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015aa6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00015aa7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00015ab2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00015abd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00015ac8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000015  00000000  00000000  00015ace  2**0
                  CONTENTS, READONLY
 26 .jdi          000063ef  00000000  00000000  00015ae3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004870e  00000000  00000000  0001bed2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000a2c4 l    d  .rodata	00000000 .rodata
0000a3a4 l    d  .rwdata	00000000 .rwdata
0000a94c l    d  .bss	00000000 .bss
0000ad74 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prime_number_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000088f4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a3a4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00008fb8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000925c l     F .text	00000034 alt_dev_reg
0000a484 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
0000953c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009670 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000969c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000985c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000099bc l     F .text	0000003c alt_get_errno
000099f8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000090a4 g     F .text	0000007c alt_main
00008844 g     F .text	00000080 _puts_r
00008204 g     F .text	000000c0 handle_write
0000a678 g       *ABS*	00000000 __flash_rwdata_start
00008540 g     F .text	00000080 write_to_hex_decoders_2
00008388 g     F .text	000000ac generate_primes
000087f8 g     F .text	0000004c printf
00009cc4 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a950 g     O .bss	00000004 p2
0000a964 g     O .bss	00000004 errno
0000a96c g     O .bss	00000004 alt_argv
00012658 g       *ABS*	00000000 _gp
0000a4d8 g     O .rwdata	00000180 alt_fd_list
00009ce8 g     F .text	00000090 alt_find_dev
00009940 g     F .text	0000007c alt_io_redirect
0000a2c4 g       *ABS*	00000000 __DTOR_END__
000088c4 g     F .text	00000014 puts
000093bc g     F .text	000000ec altera_avalon_jtag_uart_read
000087bc g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000086b8 g     F .text	00000064 .hidden __udivsi3
0000a670 g     O .rwdata	00000004 alt_max_fd
0000a958 g     O .bss	00000004 m2
0000a658 g     O .rwdata	00000004 _global_impure_ptr
0000ad74 g       *ABS*	00000000 __bss_end
0000a4b0 g     O .rwdata	00000028 alt_dev_null
00009650 g     F .text	00000020 alt_dcache_flush_all
0000a94c g     O .bss	00000004 p1
0000a678 g       *ABS*	00000000 __ram_rwdata_end
0000a668 g     O .rwdata	00000008 alt_dev_list
0000915c g     F .text	00000100 write
0000a3a4 g       *ABS*	00000000 __ram_rodata_end
0000871c g     F .text	00000058 .hidden __umodsi3
0000ad74 g       *ABS*	00000000 end
0000a2c4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000094a8 g     F .text	00000094 altera_avalon_jtag_uart_write
000084c0 g     F .text	00000080 write_to_hex_decoders_1
00008960 g     F .text	0000052c ___vfprintf_internal_r
0000a100 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
00008434 g     F .text	0000008c is_prime
000092c8 g     F .text	00000034 alt_sys_init
00009fa8 g     F .text	00000158 __register_exitproc
00008774 g     F .text	00000028 .hidden __mulsi3
0000a3a4 g       *ABS*	00000000 __ram_rwdata_start
0000a2c4 g       *ABS*	00000000 __ram_rodata_start
000092fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009e80 g     F .text	000000c4 alt_get_fd
0000a95c g     O .bss	00000004 max
00009f78 g     F .text	00000030 memcmp
0000ad74 g       *ABS*	00000000 __alt_stack_base
0000a974 g     O .bss	00000400 primes
00009d78 g     F .text	00000108 alt_find_file
000096d8 g     F .text	000000a4 alt_dev_llist_insert
00008ea8 g     F .text	000000b8 __sfvwrite_small_dev
0000a94c g       *ABS*	00000000 __bss_start
0000879c g     F .text	00000020 memset
0000805c g     F .text	000001a8 main
0000a970 g     O .bss	00000004 alt_envp
0000935c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a674 g     O .rwdata	00000004 alt_errno
000085c0 g     F .text	00000084 .hidden __divsi3
0000a2c4 g       *ABS*	00000000 __CTOR_END__
0000a2c4 g       *ABS*	00000000 __flash_rodata_start
0000a2c4 g       *ABS*	00000000 __DTOR_LIST__
00009290 g     F .text	00000038 alt_irq_init
00009c40 g     F .text	00000084 alt_release_fd
00009f44 g     F .text	00000014 atexit
00008f60 g     F .text	00000058 _write_r
0000a65c g     O .rwdata	00000004 _impure_ptr
0000a968 g     O .bss	00000004 alt_argc
000097dc g     F .text	00000060 _do_dtors
0000a660 g     O .rwdata	00000008 alt_fs_list
0000a954 g     O .bss	00000004 m1
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a960 g     O .bss	00000004 oData
0000a678 g       *ABS*	00000000 _edata
0000ad74 g       *ABS*	00000000 _end
000082c4 g     F .text	000000c4 handle_read
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009f58 g     F .text	00000020 exit
00008644 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a290 g     F .text	00000034 _exit
000088d8 g     F .text	0000001c strlen
00009ae4 g     F .text	0000015c open
0000983c g     F .text	00000020 alt_icache_flush_all
00008e8c g     F .text	0000001c __vfprintf_internal
0000977c g     F .text	00000060 _do_ctors
00009578 g     F .text	000000d8 close
00009020 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6899614 	ori	gp,gp,9816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aa5314 	ori	r2,r2,43340

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eb5d14 	ori	r3,r3,44404

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff59ec>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00090200 	call	9020 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00090a40 	call	90a4 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff5a00>

0000805c <main>:
void generate_primes(uint32_t max);
bool is_prime(uint32_t number);
void write_to_hex_decoders_1(uint32_t value);
void write_to_hex_decoders_2(uint32_t value);

int main() {
    805c:	defff604 	addi	sp,sp,-40
    8060:	dfc00915 	stw	ra,36(sp)
    8064:	df000815 	stw	fp,32(sp)
    8068:	df000804 	addi	fp,sp,32
    printf("========== Starting Prime Number Generator ===========\n");
    806c:	01000074 	movhi	r4,1
    8070:	2128b104 	addi	r4,r4,-23868
    8074:	00088c40 	call	88c4 <puts>

    while (1) {
        // Read switch values
        uint32_t switches = IORD(SWITCHES_0_BASE, 0);
    8078:	00800074 	movhi	r2,1
    807c:	10840e04 	addi	r2,r2,4152
    8080:	10800037 	ldwio	r2,0(r2)
    8084:	e0bff815 	stw	r2,-32(fp)

        // Generate primes based on SW[7:0]
        uint32_t start_prime = (switches & 0xFF);
    8088:	e0bff817 	ldw	r2,-32(fp)
    808c:	10803fcc 	andi	r2,r2,255
    8090:	e0bff915 	stw	r2,-28(fp)
        handle_write(FUNC_PRIME_GEN, start_prime + 255);
    8094:	e0bff917 	ldw	r2,-28(fp)
    8098:	10803fc4 	addi	r2,r2,255
    809c:	100b883a 	mov	r5,r2
    80a0:	01000104 	movi	r4,4
    80a4:	00082040 	call	8204 <handle_write>

        // Use SW9 to control multiplier
        if (switches & 0x200) { // SW9 enabled
    80a8:	e0bff817 	ldw	r2,-32(fp)
    80ac:	1080800c 	andi	r2,r2,512
    80b0:	10002026 	beq	r2,zero,8134 <main+0xd8>
            uint32_t multiplier_input1 = handle_read(FUNC_PRIME_GEN, (switches & 0xF0) >> 4); // Use upper nibble of SW[7:0]
    80b4:	e0bff817 	ldw	r2,-32(fp)
    80b8:	10803c0c 	andi	r2,r2,240
    80bc:	1004d13a 	srli	r2,r2,4
    80c0:	100b883a 	mov	r5,r2
    80c4:	01000104 	movi	r4,4
    80c8:	00082c40 	call	82c4 <handle_read>
    80cc:	e0bffa15 	stw	r2,-24(fp)
            uint32_t multiplier_input2 = handle_read(FUNC_PRIME_GEN, switches & 0xF); // Use lower nibble of SW[7:0]
    80d0:	e0bff817 	ldw	r2,-32(fp)
    80d4:	108003cc 	andi	r2,r2,15
    80d8:	100b883a 	mov	r5,r2
    80dc:	01000104 	movi	r4,4
    80e0:	00082c40 	call	82c4 <handle_read>
    80e4:	e0bffb15 	stw	r2,-20(fp)
            handle_write(FUNC_MULTIPLIER, multiplier_input1); // Write to m1
    80e8:	e17ffa17 	ldw	r5,-24(fp)
    80ec:	01000084 	movi	r4,2
    80f0:	00082040 	call	8204 <handle_write>
            handle_write(FUNC_MULTIPLIER_M2, multiplier_input2); // Write to m2
    80f4:	e17ffb17 	ldw	r5,-20(fp)
    80f8:	010000c4 	movi	r4,3
    80fc:	00082040 	call	8204 <handle_write>
            uint32_t multiplier_result = handle_read(FUNC_MULTIPLIER, 0);
    8100:	000b883a 	mov	r5,zero
    8104:	01000084 	movi	r4,2
    8108:	00082c40 	call	82c4 <handle_read>
    810c:	e0bffc15 	stw	r2,-16(fp)
            printf("Multiplier result: %u * %u = %u\n", (unsigned int)multiplier_input1, (unsigned int)multiplier_input2, (unsigned int)multiplier_result);
    8110:	e1fffc17 	ldw	r7,-16(fp)
    8114:	e1bffb17 	ldw	r6,-20(fp)
    8118:	e17ffa17 	ldw	r5,-24(fp)
    811c:	01000074 	movhi	r4,1
    8120:	2128bf04 	addi	r4,r4,-23812
    8124:	00087f80 	call	87f8 <printf>
            write_to_hex_decoders_2(multiplier_result); // Display result on HEX2 and HEX3
    8128:	e13ffc17 	ldw	r4,-16(fp)
    812c:	00085400 	call	8540 <write_to_hex_decoders_2>
    8130:	00000806 	br	8154 <main+0xf8>
        } else {
            // Clear HEX2 and HEX3 when SW9 is off
            IOWR(HEXDECODER_2_BASE, 0, 0);
    8134:	0007883a 	mov	r3,zero
    8138:	00800074 	movhi	r2,1
    813c:	10841004 	addi	r2,r2,4160
    8140:	10c00035 	stwio	r3,0(r2)
            IOWR(HEXDECODER_3_BASE, 0, 0);
    8144:	0007883a 	mov	r3,zero
    8148:	00800074 	movhi	r2,1
    814c:	10840f04 	addi	r2,r2,4156
    8150:	10c00035 	stwio	r3,0(r2)
        }

        // Use SW8 to control adder
        if (switches & 0x100) { // SW8 enabled
    8154:	e0bff817 	ldw	r2,-32(fp)
    8158:	1080400c 	andi	r2,r2,256
    815c:	10002026 	beq	r2,zero,81e0 <main+0x184>
            uint32_t adder_input1 = handle_read(FUNC_PRIME_GEN, (switches & 0xF0) >> 4); // Use upper nibble of SW[7:0]
    8160:	e0bff817 	ldw	r2,-32(fp)
    8164:	10803c0c 	andi	r2,r2,240
    8168:	1004d13a 	srli	r2,r2,4
    816c:	100b883a 	mov	r5,r2
    8170:	01000104 	movi	r4,4
    8174:	00082c40 	call	82c4 <handle_read>
    8178:	e0bffd15 	stw	r2,-12(fp)
            uint32_t adder_input2 = handle_read(FUNC_PRIME_GEN, switches & 0xF); // Use lower nibble of SW[7:0]
    817c:	e0bff817 	ldw	r2,-32(fp)
    8180:	108003cc 	andi	r2,r2,15
    8184:	100b883a 	mov	r5,r2
    8188:	01000104 	movi	r4,4
    818c:	00082c40 	call	82c4 <handle_read>
    8190:	e0bffe15 	stw	r2,-8(fp)
            handle_write(FUNC_ADDER, adder_input1); // Write to p1
    8194:	e17ffd17 	ldw	r5,-12(fp)
    8198:	0009883a 	mov	r4,zero
    819c:	00082040 	call	8204 <handle_write>
            handle_write(FUNC_ADDER_P2, adder_input2); // Write to p2
    81a0:	e17ffe17 	ldw	r5,-8(fp)
    81a4:	01000044 	movi	r4,1
    81a8:	00082040 	call	8204 <handle_write>
            uint32_t adder_result = handle_read(FUNC_ADDER, 0);
    81ac:	000b883a 	mov	r5,zero
    81b0:	0009883a 	mov	r4,zero
    81b4:	00082c40 	call	82c4 <handle_read>
    81b8:	e0bfff15 	stw	r2,-4(fp)
            printf("Adder result: %u + %u = %u\n", (unsigned int)adder_input1, (unsigned int)adder_input2, (unsigned int)adder_result);
    81bc:	e1ffff17 	ldw	r7,-4(fp)
    81c0:	e1bffe17 	ldw	r6,-8(fp)
    81c4:	e17ffd17 	ldw	r5,-12(fp)
    81c8:	01000074 	movhi	r4,1
    81cc:	2128c804 	addi	r4,r4,-23776
    81d0:	00087f80 	call	87f8 <printf>
            write_to_hex_decoders_1(adder_result); // Display result on HEX0 and HEX1
    81d4:	e13fff17 	ldw	r4,-4(fp)
    81d8:	00084c00 	call	84c0 <write_to_hex_decoders_1>
    81dc:	003fa606 	br	8078 <_gp+0xffff5a20>
        } else {
            // Clear HEX0 and HEX1 when SW8 is off
            IOWR(HEXDECODER_0_BASE, 0, 0);
    81e0:	0007883a 	mov	r3,zero
    81e4:	00800074 	movhi	r2,1
    81e8:	10841204 	addi	r2,r2,4168
    81ec:	10c00035 	stwio	r3,0(r2)
            IOWR(HEXDECODER_1_BASE, 0, 0);
    81f0:	0007883a 	mov	r3,zero
    81f4:	00800074 	movhi	r2,1
    81f8:	10841104 	addi	r2,r2,4164
    81fc:	10c00035 	stwio	r3,0(r2)
        }
    }
    8200:	003f9d06 	br	8078 <_gp+0xffff5a20>

00008204 <handle_write>:

    return 0;
}

void handle_write(uint8_t address, uint32_t data) {
    8204:	defffc04 	addi	sp,sp,-16
    8208:	dfc00315 	stw	ra,12(sp)
    820c:	df000215 	stw	fp,8(sp)
    8210:	df000204 	addi	fp,sp,8
    8214:	2005883a 	mov	r2,r4
    8218:	e17fff15 	stw	r5,-4(fp)
    821c:	e0bffe05 	stb	r2,-8(fp)
    switch (address) {
    8220:	e0bffe03 	ldbu	r2,-8(fp)
    8224:	10c00168 	cmpgeui	r3,r2,5
    8228:	18001d1e 	bne	r3,zero,82a0 <handle_write+0x9c>
    822c:	100690ba 	slli	r3,r2,2
    8230:	00800074 	movhi	r2,1
    8234:	10a09104 	addi	r2,r2,-32188
    8238:	1885883a 	add	r2,r3,r2
    823c:	10800017 	ldw	r2,0(r2)
    8240:	1000683a 	jmp	r2
    8244:	00008258 	cmpnei	zero,zero,521
    8248:	00008264 	muli	zero,zero,521
    824c:	00008270 	cmpltui	zero,zero,521
    8250:	0000827c 	xorhi	zero,zero,521
    8254:	00008288 	cmpgei	zero,zero,522
        case FUNC_ADDER:
            p1 = data;
    8258:	e0bfff17 	ldw	r2,-4(fp)
    825c:	d0a0bd15 	stw	r2,-32012(gp)
            break;
    8260:	00001206 	br	82ac <handle_write+0xa8>
        case FUNC_ADDER_P2:
            p2 = data;
    8264:	e0bfff17 	ldw	r2,-4(fp)
    8268:	d0a0be15 	stw	r2,-32008(gp)
            break;
    826c:	00000f06 	br	82ac <handle_write+0xa8>
        case FUNC_MULTIPLIER:
            m1 = data;
    8270:	e0bfff17 	ldw	r2,-4(fp)
    8274:	d0a0bf15 	stw	r2,-32004(gp)
            break;
    8278:	00000c06 	br	82ac <handle_write+0xa8>
        case FUNC_MULTIPLIER_M2:
            m2 = data;
    827c:	e0bfff17 	ldw	r2,-4(fp)
    8280:	d0a0c015 	stw	r2,-32000(gp)
            break;
    8284:	00000906 	br	82ac <handle_write+0xa8>
        case FUNC_PRIME_GEN:
            max = data;
    8288:	e0bfff17 	ldw	r2,-4(fp)
    828c:	d0a0c115 	stw	r2,-31996(gp)
            generate_primes(max);
    8290:	d0a0c117 	ldw	r2,-31996(gp)
    8294:	1009883a 	mov	r4,r2
    8298:	00083880 	call	8388 <generate_primes>
            break;
    829c:	00000306 	br	82ac <handle_write+0xa8>
        default:
            printf("Invalid write address\n");
    82a0:	01000074 	movhi	r4,1
    82a4:	2128cf04 	addi	r4,r4,-23748
    82a8:	00088c40 	call	88c4 <puts>
    }
}
    82ac:	0001883a 	nop
    82b0:	e037883a 	mov	sp,fp
    82b4:	dfc00117 	ldw	ra,4(sp)
    82b8:	df000017 	ldw	fp,0(sp)
    82bc:	dec00204 	addi	sp,sp,8
    82c0:	f800283a 	ret

000082c4 <handle_read>:

uint32_t handle_read(uint8_t address, uint32_t index) {
    82c4:	defffc04 	addi	sp,sp,-16
    82c8:	dfc00315 	stw	ra,12(sp)
    82cc:	df000215 	stw	fp,8(sp)
    82d0:	df000204 	addi	fp,sp,8
    82d4:	2005883a 	mov	r2,r4
    82d8:	e17fff15 	stw	r5,-4(fp)
    82dc:	e0bffe05 	stb	r2,-8(fp)
    switch (address) {
    82e0:	e0bffe03 	ldbu	r2,-8(fp)
    82e4:	10c000a0 	cmpeqi	r3,r2,2
    82e8:	1800081e 	bne	r3,zero,830c <handle_read+0x48>
    82ec:	10c00120 	cmpeqi	r3,r2,4
    82f0:	18000d1e 	bne	r3,zero,8328 <handle_read+0x64>
    82f4:	10001a1e 	bne	r2,zero,8360 <handle_read+0x9c>
        case FUNC_ADDER:
            oData = p1 + p2;
    82f8:	d0e0bd17 	ldw	r3,-32012(gp)
    82fc:	d0a0be17 	ldw	r2,-32008(gp)
    8300:	1885883a 	add	r2,r3,r2
    8304:	d0a0c215 	stw	r2,-31992(gp)
            break;
    8308:	00001906 	br	8370 <handle_read+0xac>
        case FUNC_MULTIPLIER:
            oData = m1 * m2;
    830c:	d0a0bf17 	ldw	r2,-32004(gp)
    8310:	d0e0c017 	ldw	r3,-32000(gp)
    8314:	180b883a 	mov	r5,r3
    8318:	1009883a 	mov	r4,r2
    831c:	00087740 	call	8774 <__mulsi3>
    8320:	d0a0c215 	stw	r2,-31992(gp)
            break;
    8324:	00001206 	br	8370 <handle_read+0xac>
        case FUNC_PRIME_GEN:
            if (index < 256) {
    8328:	e0bfff17 	ldw	r2,-4(fp)
    832c:	10804028 	cmpgeui	r2,r2,256
    8330:	1000091e 	bne	r2,zero,8358 <handle_read+0x94>
                oData = primes[index];
    8334:	00800074 	movhi	r2,1
    8338:	10aa5d04 	addi	r2,r2,-22156
    833c:	e0ffff17 	ldw	r3,-4(fp)
    8340:	18c7883a 	add	r3,r3,r3
    8344:	18c7883a 	add	r3,r3,r3
    8348:	10c5883a 	add	r2,r2,r3
    834c:	10800017 	ldw	r2,0(r2)
    8350:	d0a0c215 	stw	r2,-31992(gp)
            } else {
                oData = 0; // Return 0 for out-of-bound indices
            }
            break;
    8354:	00000606 	br	8370 <handle_read+0xac>
            break;
        case FUNC_PRIME_GEN:
            if (index < 256) {
                oData = primes[index];
            } else {
                oData = 0; // Return 0 for out-of-bound indices
    8358:	d020c215 	stw	zero,-31992(gp)
            }
            break;
    835c:	00000406 	br	8370 <handle_read+0xac>
        default:
            printf("Invalid read address\n");
    8360:	01000074 	movhi	r4,1
    8364:	2128d504 	addi	r4,r4,-23724
    8368:	00088c40 	call	88c4 <puts>
            oData = 0;
    836c:	d020c215 	stw	zero,-31992(gp)
    }
    return oData;
    8370:	d0a0c217 	ldw	r2,-31992(gp)
}
    8374:	e037883a 	mov	sp,fp
    8378:	dfc00117 	ldw	ra,4(sp)
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00204 	addi	sp,sp,8
    8384:	f800283a 	ret

00008388 <generate_primes>:

void generate_primes(uint32_t max) {
    8388:	defffb04 	addi	sp,sp,-20
    838c:	dfc00415 	stw	ra,16(sp)
    8390:	df000315 	stw	fp,12(sp)
    8394:	df000304 	addi	fp,sp,12
    8398:	e13fff15 	stw	r4,-4(fp)
    memset(primes, 0, sizeof(primes));
    839c:	01810004 	movi	r6,1024
    83a0:	000b883a 	mov	r5,zero
    83a4:	01000074 	movhi	r4,1
    83a8:	212a5d04 	addi	r4,r4,-22156
    83ac:	000879c0 	call	879c <memset>
    uint32_t count = 0;
    83b0:	e03ffd15 	stw	zero,-12(fp)
    for (uint32_t i = 2; i <= max && count < 256; i++) {
    83b4:	00800084 	movi	r2,2
    83b8:	e0bffe15 	stw	r2,-8(fp)
    83bc:	00001106 	br	8404 <generate_primes+0x7c>
        if (is_prime(i)) {
    83c0:	e13ffe17 	ldw	r4,-8(fp)
    83c4:	00084340 	call	8434 <is_prime>
    83c8:	10803fcc 	andi	r2,r2,255
    83cc:	10000a26 	beq	r2,zero,83f8 <generate_primes+0x70>
            primes[count++] = i;
    83d0:	e0fffd17 	ldw	r3,-12(fp)
    83d4:	18800044 	addi	r2,r3,1
    83d8:	e0bffd15 	stw	r2,-12(fp)
    83dc:	00800074 	movhi	r2,1
    83e0:	10aa5d04 	addi	r2,r2,-22156
    83e4:	18c7883a 	add	r3,r3,r3
    83e8:	18c7883a 	add	r3,r3,r3
    83ec:	10c5883a 	add	r2,r2,r3
    83f0:	e0fffe17 	ldw	r3,-8(fp)
    83f4:	10c00015 	stw	r3,0(r2)
}

void generate_primes(uint32_t max) {
    memset(primes, 0, sizeof(primes));
    uint32_t count = 0;
    for (uint32_t i = 2; i <= max && count < 256; i++) {
    83f8:	e0bffe17 	ldw	r2,-8(fp)
    83fc:	10800044 	addi	r2,r2,1
    8400:	e0bffe15 	stw	r2,-8(fp)
    8404:	e0bffe17 	ldw	r2,-8(fp)
    8408:	e0ffff17 	ldw	r3,-4(fp)
    840c:	18800336 	bltu	r3,r2,841c <generate_primes+0x94>
    8410:	e0bffd17 	ldw	r2,-12(fp)
    8414:	10804030 	cmpltui	r2,r2,256
    8418:	103fe91e 	bne	r2,zero,83c0 <_gp+0xffff5d68>
        if (is_prime(i)) {
            primes[count++] = i;
        }
    }
}
    841c:	0001883a 	nop
    8420:	e037883a 	mov	sp,fp
    8424:	dfc00117 	ldw	ra,4(sp)
    8428:	df000017 	ldw	fp,0(sp)
    842c:	dec00204 	addi	sp,sp,8
    8430:	f800283a 	ret

00008434 <is_prime>:

bool is_prime(uint32_t number) {
    8434:	defffc04 	addi	sp,sp,-16
    8438:	dfc00315 	stw	ra,12(sp)
    843c:	df000215 	stw	fp,8(sp)
    8440:	df000204 	addi	fp,sp,8
    8444:	e13fff15 	stw	r4,-4(fp)
    if (number < 2) return false;
    8448:	e0bfff17 	ldw	r2,-4(fp)
    844c:	108000a8 	cmpgeui	r2,r2,2
    8450:	1000021e 	bne	r2,zero,845c <is_prime+0x28>
    8454:	0005883a 	mov	r2,zero
    8458:	00001406 	br	84ac <is_prime+0x78>
    for (uint32_t i = 2; i * i <= number; i++) {
    845c:	00800084 	movi	r2,2
    8460:	e0bffe15 	stw	r2,-8(fp)
    8464:	00000a06 	br	8490 <is_prime+0x5c>
        if (number % i == 0) return false;
    8468:	e0bfff17 	ldw	r2,-4(fp)
    846c:	e17ffe17 	ldw	r5,-8(fp)
    8470:	1009883a 	mov	r4,r2
    8474:	000871c0 	call	871c <__umodsi3>
    8478:	1000021e 	bne	r2,zero,8484 <is_prime+0x50>
    847c:	0005883a 	mov	r2,zero
    8480:	00000a06 	br	84ac <is_prime+0x78>
    }
}

bool is_prime(uint32_t number) {
    if (number < 2) return false;
    for (uint32_t i = 2; i * i <= number; i++) {
    8484:	e0bffe17 	ldw	r2,-8(fp)
    8488:	10800044 	addi	r2,r2,1
    848c:	e0bffe15 	stw	r2,-8(fp)
    8490:	e17ffe17 	ldw	r5,-8(fp)
    8494:	e13ffe17 	ldw	r4,-8(fp)
    8498:	00087740 	call	8774 <__mulsi3>
    849c:	1007883a 	mov	r3,r2
    84a0:	e0bfff17 	ldw	r2,-4(fp)
    84a4:	10fff02e 	bgeu	r2,r3,8468 <_gp+0xffff5e10>
        if (number % i == 0) return false;
    }
    return true;
    84a8:	00800044 	movi	r2,1
}
    84ac:	e037883a 	mov	sp,fp
    84b0:	dfc00117 	ldw	ra,4(sp)
    84b4:	df000017 	ldw	fp,0(sp)
    84b8:	dec00204 	addi	sp,sp,8
    84bc:	f800283a 	ret

000084c0 <write_to_hex_decoders_1>:

void write_to_hex_decoders_1(uint32_t value) {
    84c0:	defffc04 	addi	sp,sp,-16
    84c4:	dfc00315 	stw	ra,12(sp)
    84c8:	df000215 	stw	fp,8(sp)
    84cc:	df000204 	addi	fp,sp,8
    84d0:	e13fff15 	stw	r4,-4(fp)
    uint8_t digit_1 = (value / 10) % 10;
    84d4:	e0bfff17 	ldw	r2,-4(fp)
    84d8:	01400284 	movi	r5,10
    84dc:	1009883a 	mov	r4,r2
    84e0:	00086b80 	call	86b8 <__udivsi3>
    84e4:	01400284 	movi	r5,10
    84e8:	1009883a 	mov	r4,r2
    84ec:	000871c0 	call	871c <__umodsi3>
    84f0:	e0bffe05 	stb	r2,-8(fp)
    uint8_t digit_0 = value % 10;
    84f4:	e0bfff17 	ldw	r2,-4(fp)
    84f8:	01400284 	movi	r5,10
    84fc:	1009883a 	mov	r4,r2
    8500:	000871c0 	call	871c <__umodsi3>
    8504:	e0bffe45 	stb	r2,-7(fp)

    IOWR(HEXDECODER_0_BASE, 0, digit_0);
    8508:	e0fffe43 	ldbu	r3,-7(fp)
    850c:	00800074 	movhi	r2,1
    8510:	10841204 	addi	r2,r2,4168
    8514:	10c00035 	stwio	r3,0(r2)
    IOWR(HEXDECODER_1_BASE, 0, digit_1);
    8518:	e0fffe03 	ldbu	r3,-8(fp)
    851c:	00800074 	movhi	r2,1
    8520:	10841104 	addi	r2,r2,4164
    8524:	10c00035 	stwio	r3,0(r2)
}
    8528:	0001883a 	nop
    852c:	e037883a 	mov	sp,fp
    8530:	dfc00117 	ldw	ra,4(sp)
    8534:	df000017 	ldw	fp,0(sp)
    8538:	dec00204 	addi	sp,sp,8
    853c:	f800283a 	ret

00008540 <write_to_hex_decoders_2>:

void write_to_hex_decoders_2(uint32_t value) {
    8540:	defffc04 	addi	sp,sp,-16
    8544:	dfc00315 	stw	ra,12(sp)
    8548:	df000215 	stw	fp,8(sp)
    854c:	df000204 	addi	fp,sp,8
    8550:	e13fff15 	stw	r4,-4(fp)
	uint8_t digit_3 = (value / 10) % 10;
    8554:	e0bfff17 	ldw	r2,-4(fp)
    8558:	01400284 	movi	r5,10
    855c:	1009883a 	mov	r4,r2
    8560:	00086b80 	call	86b8 <__udivsi3>
    8564:	01400284 	movi	r5,10
    8568:	1009883a 	mov	r4,r2
    856c:	000871c0 	call	871c <__umodsi3>
    8570:	e0bffe05 	stb	r2,-8(fp)
    uint8_t digit_2 = value % 10;
    8574:	e0bfff17 	ldw	r2,-4(fp)
    8578:	01400284 	movi	r5,10
    857c:	1009883a 	mov	r4,r2
    8580:	000871c0 	call	871c <__umodsi3>
    8584:	e0bffe45 	stb	r2,-7(fp)

    IOWR(HEXDECODER_2_BASE, 0, digit_2);
    8588:	e0fffe43 	ldbu	r3,-7(fp)
    858c:	00800074 	movhi	r2,1
    8590:	10841004 	addi	r2,r2,4160
    8594:	10c00035 	stwio	r3,0(r2)
    IOWR(HEXDECODER_3_BASE, 0, digit_3);
    8598:	e0fffe03 	ldbu	r3,-8(fp)
    859c:	00800074 	movhi	r2,1
    85a0:	10840f04 	addi	r2,r2,4156
    85a4:	10c00035 	stwio	r3,0(r2)
}
    85a8:	0001883a 	nop
    85ac:	e037883a 	mov	sp,fp
    85b0:	dfc00117 	ldw	ra,4(sp)
    85b4:	df000017 	ldw	fp,0(sp)
    85b8:	dec00204 	addi	sp,sp,8
    85bc:	f800283a 	ret

000085c0 <__divsi3>:
    85c0:	20001b16 	blt	r4,zero,8630 <__divsi3+0x70>
    85c4:	000f883a 	mov	r7,zero
    85c8:	28001616 	blt	r5,zero,8624 <__divsi3+0x64>
    85cc:	200d883a 	mov	r6,r4
    85d0:	29001a2e 	bgeu	r5,r4,863c <__divsi3+0x7c>
    85d4:	00800804 	movi	r2,32
    85d8:	00c00044 	movi	r3,1
    85dc:	00000106 	br	85e4 <__divsi3+0x24>
    85e0:	10000d26 	beq	r2,zero,8618 <__divsi3+0x58>
    85e4:	294b883a 	add	r5,r5,r5
    85e8:	10bfffc4 	addi	r2,r2,-1
    85ec:	18c7883a 	add	r3,r3,r3
    85f0:	293ffb36 	bltu	r5,r4,85e0 <_gp+0xffff5f88>
    85f4:	0005883a 	mov	r2,zero
    85f8:	18000726 	beq	r3,zero,8618 <__divsi3+0x58>
    85fc:	0005883a 	mov	r2,zero
    8600:	31400236 	bltu	r6,r5,860c <__divsi3+0x4c>
    8604:	314dc83a 	sub	r6,r6,r5
    8608:	10c4b03a 	or	r2,r2,r3
    860c:	1806d07a 	srli	r3,r3,1
    8610:	280ad07a 	srli	r5,r5,1
    8614:	183ffa1e 	bne	r3,zero,8600 <_gp+0xffff5fa8>
    8618:	38000126 	beq	r7,zero,8620 <__divsi3+0x60>
    861c:	0085c83a 	sub	r2,zero,r2
    8620:	f800283a 	ret
    8624:	014bc83a 	sub	r5,zero,r5
    8628:	39c0005c 	xori	r7,r7,1
    862c:	003fe706 	br	85cc <_gp+0xffff5f74>
    8630:	0109c83a 	sub	r4,zero,r4
    8634:	01c00044 	movi	r7,1
    8638:	003fe306 	br	85c8 <_gp+0xffff5f70>
    863c:	00c00044 	movi	r3,1
    8640:	003fee06 	br	85fc <_gp+0xffff5fa4>

00008644 <__modsi3>:
    8644:	20001716 	blt	r4,zero,86a4 <__modsi3+0x60>
    8648:	000f883a 	mov	r7,zero
    864c:	2005883a 	mov	r2,r4
    8650:	28001216 	blt	r5,zero,869c <__modsi3+0x58>
    8654:	2900162e 	bgeu	r5,r4,86b0 <__modsi3+0x6c>
    8658:	01800804 	movi	r6,32
    865c:	00c00044 	movi	r3,1
    8660:	00000106 	br	8668 <__modsi3+0x24>
    8664:	30000a26 	beq	r6,zero,8690 <__modsi3+0x4c>
    8668:	294b883a 	add	r5,r5,r5
    866c:	31bfffc4 	addi	r6,r6,-1
    8670:	18c7883a 	add	r3,r3,r3
    8674:	293ffb36 	bltu	r5,r4,8664 <_gp+0xffff600c>
    8678:	18000526 	beq	r3,zero,8690 <__modsi3+0x4c>
    867c:	1806d07a 	srli	r3,r3,1
    8680:	11400136 	bltu	r2,r5,8688 <__modsi3+0x44>
    8684:	1145c83a 	sub	r2,r2,r5
    8688:	280ad07a 	srli	r5,r5,1
    868c:	183ffb1e 	bne	r3,zero,867c <_gp+0xffff6024>
    8690:	38000126 	beq	r7,zero,8698 <__modsi3+0x54>
    8694:	0085c83a 	sub	r2,zero,r2
    8698:	f800283a 	ret
    869c:	014bc83a 	sub	r5,zero,r5
    86a0:	003fec06 	br	8654 <_gp+0xffff5ffc>
    86a4:	0109c83a 	sub	r4,zero,r4
    86a8:	01c00044 	movi	r7,1
    86ac:	003fe706 	br	864c <_gp+0xffff5ff4>
    86b0:	00c00044 	movi	r3,1
    86b4:	003ff106 	br	867c <_gp+0xffff6024>

000086b8 <__udivsi3>:
    86b8:	200d883a 	mov	r6,r4
    86bc:	2900152e 	bgeu	r5,r4,8714 <__udivsi3+0x5c>
    86c0:	28001416 	blt	r5,zero,8714 <__udivsi3+0x5c>
    86c4:	00800804 	movi	r2,32
    86c8:	00c00044 	movi	r3,1
    86cc:	00000206 	br	86d8 <__udivsi3+0x20>
    86d0:	10000e26 	beq	r2,zero,870c <__udivsi3+0x54>
    86d4:	28000516 	blt	r5,zero,86ec <__udivsi3+0x34>
    86d8:	294b883a 	add	r5,r5,r5
    86dc:	10bfffc4 	addi	r2,r2,-1
    86e0:	18c7883a 	add	r3,r3,r3
    86e4:	293ffa36 	bltu	r5,r4,86d0 <_gp+0xffff6078>
    86e8:	18000826 	beq	r3,zero,870c <__udivsi3+0x54>
    86ec:	0005883a 	mov	r2,zero
    86f0:	31400236 	bltu	r6,r5,86fc <__udivsi3+0x44>
    86f4:	314dc83a 	sub	r6,r6,r5
    86f8:	10c4b03a 	or	r2,r2,r3
    86fc:	1806d07a 	srli	r3,r3,1
    8700:	280ad07a 	srli	r5,r5,1
    8704:	183ffa1e 	bne	r3,zero,86f0 <_gp+0xffff6098>
    8708:	f800283a 	ret
    870c:	0005883a 	mov	r2,zero
    8710:	f800283a 	ret
    8714:	00c00044 	movi	r3,1
    8718:	003ff406 	br	86ec <_gp+0xffff6094>

0000871c <__umodsi3>:
    871c:	2005883a 	mov	r2,r4
    8720:	2900122e 	bgeu	r5,r4,876c <__umodsi3+0x50>
    8724:	28001116 	blt	r5,zero,876c <__umodsi3+0x50>
    8728:	01800804 	movi	r6,32
    872c:	00c00044 	movi	r3,1
    8730:	00000206 	br	873c <__umodsi3+0x20>
    8734:	30000c26 	beq	r6,zero,8768 <__umodsi3+0x4c>
    8738:	28000516 	blt	r5,zero,8750 <__umodsi3+0x34>
    873c:	294b883a 	add	r5,r5,r5
    8740:	31bfffc4 	addi	r6,r6,-1
    8744:	18c7883a 	add	r3,r3,r3
    8748:	293ffa36 	bltu	r5,r4,8734 <_gp+0xffff60dc>
    874c:	18000626 	beq	r3,zero,8768 <__umodsi3+0x4c>
    8750:	1806d07a 	srli	r3,r3,1
    8754:	11400136 	bltu	r2,r5,875c <__umodsi3+0x40>
    8758:	1145c83a 	sub	r2,r2,r5
    875c:	280ad07a 	srli	r5,r5,1
    8760:	183ffb1e 	bne	r3,zero,8750 <_gp+0xffff60f8>
    8764:	f800283a 	ret
    8768:	f800283a 	ret
    876c:	00c00044 	movi	r3,1
    8770:	003ff706 	br	8750 <_gp+0xffff60f8>

00008774 <__mulsi3>:
    8774:	0005883a 	mov	r2,zero
    8778:	20000726 	beq	r4,zero,8798 <__mulsi3+0x24>
    877c:	20c0004c 	andi	r3,r4,1
    8780:	2008d07a 	srli	r4,r4,1
    8784:	18000126 	beq	r3,zero,878c <__mulsi3+0x18>
    8788:	1145883a 	add	r2,r2,r5
    878c:	294b883a 	add	r5,r5,r5
    8790:	203ffa1e 	bne	r4,zero,877c <_gp+0xffff6124>
    8794:	f800283a 	ret
    8798:	f800283a 	ret

0000879c <memset>:
    879c:	2005883a 	mov	r2,r4
    87a0:	2007883a 	mov	r3,r4
    87a4:	218d883a 	add	r6,r4,r6
    87a8:	19800326 	beq	r3,r6,87b8 <memset+0x1c>
    87ac:	19400005 	stb	r5,0(r3)
    87b0:	18c00044 	addi	r3,r3,1
    87b4:	003ffc06 	br	87a8 <_gp+0xffff6150>
    87b8:	f800283a 	ret

000087bc <_printf_r>:
    87bc:	defffd04 	addi	sp,sp,-12
    87c0:	dfc00015 	stw	ra,0(sp)
    87c4:	d9800115 	stw	r6,4(sp)
    87c8:	d9c00215 	stw	r7,8(sp)
    87cc:	20c00217 	ldw	r3,8(r4)
    87d0:	01800074 	movhi	r6,1
    87d4:	31a3aa04 	addi	r6,r6,-29016
    87d8:	19800115 	stw	r6,4(r3)
    87dc:	280d883a 	mov	r6,r5
    87e0:	21400217 	ldw	r5,8(r4)
    87e4:	d9c00104 	addi	r7,sp,4
    87e8:	00089600 	call	8960 <___vfprintf_internal_r>
    87ec:	dfc00017 	ldw	ra,0(sp)
    87f0:	dec00304 	addi	sp,sp,12
    87f4:	f800283a 	ret

000087f8 <printf>:
    87f8:	defffc04 	addi	sp,sp,-16
    87fc:	dfc00015 	stw	ra,0(sp)
    8800:	d9400115 	stw	r5,4(sp)
    8804:	d9800215 	stw	r6,8(sp)
    8808:	d9c00315 	stw	r7,12(sp)
    880c:	00800074 	movhi	r2,1
    8810:	10a99704 	addi	r2,r2,-22948
    8814:	10800017 	ldw	r2,0(r2)
    8818:	01400074 	movhi	r5,1
    881c:	2963aa04 	addi	r5,r5,-29016
    8820:	10c00217 	ldw	r3,8(r2)
    8824:	d9800104 	addi	r6,sp,4
    8828:	19400115 	stw	r5,4(r3)
    882c:	200b883a 	mov	r5,r4
    8830:	11000217 	ldw	r4,8(r2)
    8834:	0008e8c0 	call	8e8c <__vfprintf_internal>
    8838:	dfc00017 	ldw	ra,0(sp)
    883c:	dec00404 	addi	sp,sp,16
    8840:	f800283a 	ret

00008844 <_puts_r>:
    8844:	defffd04 	addi	sp,sp,-12
    8848:	dc000015 	stw	r16,0(sp)
    884c:	2021883a 	mov	r16,r4
    8850:	2809883a 	mov	r4,r5
    8854:	dfc00215 	stw	ra,8(sp)
    8858:	dc400115 	stw	r17,4(sp)
    885c:	2823883a 	mov	r17,r5
    8860:	00088d80 	call	88d8 <strlen>
    8864:	81400217 	ldw	r5,8(r16)
    8868:	01000074 	movhi	r4,1
    886c:	2123aa04 	addi	r4,r4,-29016
    8870:	29000115 	stw	r4,4(r5)
    8874:	100f883a 	mov	r7,r2
    8878:	880d883a 	mov	r6,r17
    887c:	8009883a 	mov	r4,r16
    8880:	0008ea80 	call	8ea8 <__sfvwrite_small_dev>
    8884:	00ffffc4 	movi	r3,-1
    8888:	10c00926 	beq	r2,r3,88b0 <_puts_r+0x6c>
    888c:	81400217 	ldw	r5,8(r16)
    8890:	01800074 	movhi	r6,1
    8894:	01c00044 	movi	r7,1
    8898:	28800117 	ldw	r2,4(r5)
    889c:	31a8db04 	addi	r6,r6,-23700
    88a0:	8009883a 	mov	r4,r16
    88a4:	103ee83a 	callr	r2
    88a8:	10bfffe0 	cmpeqi	r2,r2,-1
    88ac:	0085c83a 	sub	r2,zero,r2
    88b0:	dfc00217 	ldw	ra,8(sp)
    88b4:	dc400117 	ldw	r17,4(sp)
    88b8:	dc000017 	ldw	r16,0(sp)
    88bc:	dec00304 	addi	sp,sp,12
    88c0:	f800283a 	ret

000088c4 <puts>:
    88c4:	00800074 	movhi	r2,1
    88c8:	10a99704 	addi	r2,r2,-22948
    88cc:	200b883a 	mov	r5,r4
    88d0:	11000017 	ldw	r4,0(r2)
    88d4:	00088441 	jmpi	8844 <_puts_r>

000088d8 <strlen>:
    88d8:	2005883a 	mov	r2,r4
    88dc:	10c00007 	ldb	r3,0(r2)
    88e0:	18000226 	beq	r3,zero,88ec <strlen+0x14>
    88e4:	10800044 	addi	r2,r2,1
    88e8:	003ffc06 	br	88dc <_gp+0xffff6284>
    88ec:	1105c83a 	sub	r2,r2,r4
    88f0:	f800283a 	ret

000088f4 <print_repeat>:
    88f4:	defffb04 	addi	sp,sp,-20
    88f8:	dc800315 	stw	r18,12(sp)
    88fc:	dc400215 	stw	r17,8(sp)
    8900:	dc000115 	stw	r16,4(sp)
    8904:	dfc00415 	stw	ra,16(sp)
    8908:	2025883a 	mov	r18,r4
    890c:	2823883a 	mov	r17,r5
    8910:	d9800005 	stb	r6,0(sp)
    8914:	3821883a 	mov	r16,r7
    8918:	04000a0e 	bge	zero,r16,8944 <print_repeat+0x50>
    891c:	88800117 	ldw	r2,4(r17)
    8920:	01c00044 	movi	r7,1
    8924:	d80d883a 	mov	r6,sp
    8928:	880b883a 	mov	r5,r17
    892c:	9009883a 	mov	r4,r18
    8930:	103ee83a 	callr	r2
    8934:	843fffc4 	addi	r16,r16,-1
    8938:	103ff726 	beq	r2,zero,8918 <_gp+0xffff62c0>
    893c:	00bfffc4 	movi	r2,-1
    8940:	00000106 	br	8948 <print_repeat+0x54>
    8944:	0005883a 	mov	r2,zero
    8948:	dfc00417 	ldw	ra,16(sp)
    894c:	dc800317 	ldw	r18,12(sp)
    8950:	dc400217 	ldw	r17,8(sp)
    8954:	dc000117 	ldw	r16,4(sp)
    8958:	dec00504 	addi	sp,sp,20
    895c:	f800283a 	ret

00008960 <___vfprintf_internal_r>:
    8960:	deffe504 	addi	sp,sp,-108
    8964:	d8c00804 	addi	r3,sp,32
    8968:	ddc01815 	stw	r23,96(sp)
    896c:	dd801715 	stw	r22,92(sp)
    8970:	dd401615 	stw	r21,88(sp)
    8974:	dd001515 	stw	r20,84(sp)
    8978:	dcc01415 	stw	r19,80(sp)
    897c:	dc801315 	stw	r18,76(sp)
    8980:	dc401215 	stw	r17,72(sp)
    8984:	dc001115 	stw	r16,68(sp)
    8988:	dfc01a15 	stw	ra,104(sp)
    898c:	df001915 	stw	fp,100(sp)
    8990:	2029883a 	mov	r20,r4
    8994:	2823883a 	mov	r17,r5
    8998:	382d883a 	mov	r22,r7
    899c:	d9800f15 	stw	r6,60(sp)
    89a0:	0021883a 	mov	r16,zero
    89a4:	d8000e15 	stw	zero,56(sp)
    89a8:	d8000a15 	stw	zero,40(sp)
    89ac:	002b883a 	mov	r21,zero
    89b0:	0027883a 	mov	r19,zero
    89b4:	0025883a 	mov	r18,zero
    89b8:	d8000c15 	stw	zero,48(sp)
    89bc:	d8000b15 	stw	zero,44(sp)
    89c0:	002f883a 	mov	r23,zero
    89c4:	d8c00915 	stw	r3,36(sp)
    89c8:	d8c00f17 	ldw	r3,60(sp)
    89cc:	19000003 	ldbu	r4,0(r3)
    89d0:	20803fcc 	andi	r2,r4,255
    89d4:	1080201c 	xori	r2,r2,128
    89d8:	10bfe004 	addi	r2,r2,-128
    89dc:	10011e26 	beq	r2,zero,8e58 <___vfprintf_internal_r+0x4f8>
    89e0:	00c00044 	movi	r3,1
    89e4:	b8c01426 	beq	r23,r3,8a38 <___vfprintf_internal_r+0xd8>
    89e8:	1dc00216 	blt	r3,r23,89f4 <___vfprintf_internal_r+0x94>
    89ec:	b8000626 	beq	r23,zero,8a08 <___vfprintf_internal_r+0xa8>
    89f0:	00011506 	br	8e48 <___vfprintf_internal_r+0x4e8>
    89f4:	01400084 	movi	r5,2
    89f8:	b9401d26 	beq	r23,r5,8a70 <___vfprintf_internal_r+0x110>
    89fc:	014000c4 	movi	r5,3
    8a00:	b9402b26 	beq	r23,r5,8ab0 <___vfprintf_internal_r+0x150>
    8a04:	00011006 	br	8e48 <___vfprintf_internal_r+0x4e8>
    8a08:	01400944 	movi	r5,37
    8a0c:	1140fc26 	beq	r2,r5,8e00 <___vfprintf_internal_r+0x4a0>
    8a10:	88800117 	ldw	r2,4(r17)
    8a14:	d9000005 	stb	r4,0(sp)
    8a18:	01c00044 	movi	r7,1
    8a1c:	d80d883a 	mov	r6,sp
    8a20:	880b883a 	mov	r5,r17
    8a24:	a009883a 	mov	r4,r20
    8a28:	103ee83a 	callr	r2
    8a2c:	1000d81e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8a30:	84000044 	addi	r16,r16,1
    8a34:	00010406 	br	8e48 <___vfprintf_internal_r+0x4e8>
    8a38:	01400c04 	movi	r5,48
    8a3c:	1140fa26 	beq	r2,r5,8e28 <___vfprintf_internal_r+0x4c8>
    8a40:	01400944 	movi	r5,37
    8a44:	11400a1e 	bne	r2,r5,8a70 <___vfprintf_internal_r+0x110>
    8a48:	d8800005 	stb	r2,0(sp)
    8a4c:	88800117 	ldw	r2,4(r17)
    8a50:	b80f883a 	mov	r7,r23
    8a54:	d80d883a 	mov	r6,sp
    8a58:	880b883a 	mov	r5,r17
    8a5c:	a009883a 	mov	r4,r20
    8a60:	103ee83a 	callr	r2
    8a64:	1000ca1e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8a68:	84000044 	addi	r16,r16,1
    8a6c:	0000f506 	br	8e44 <___vfprintf_internal_r+0x4e4>
    8a70:	25fff404 	addi	r23,r4,-48
    8a74:	bdc03fcc 	andi	r23,r23,255
    8a78:	00c00244 	movi	r3,9
    8a7c:	1dc00936 	bltu	r3,r23,8aa4 <___vfprintf_internal_r+0x144>
    8a80:	00bfffc4 	movi	r2,-1
    8a84:	90800426 	beq	r18,r2,8a98 <___vfprintf_internal_r+0x138>
    8a88:	01400284 	movi	r5,10
    8a8c:	9009883a 	mov	r4,r18
    8a90:	00087740 	call	8774 <__mulsi3>
    8a94:	00000106 	br	8a9c <___vfprintf_internal_r+0x13c>
    8a98:	0005883a 	mov	r2,zero
    8a9c:	b8a5883a 	add	r18,r23,r2
    8aa0:	0000e206 	br	8e2c <___vfprintf_internal_r+0x4cc>
    8aa4:	01400b84 	movi	r5,46
    8aa8:	1140e426 	beq	r2,r5,8e3c <___vfprintf_internal_r+0x4dc>
    8aac:	05c00084 	movi	r23,2
    8ab0:	213ff404 	addi	r4,r4,-48
    8ab4:	27003fcc 	andi	fp,r4,255
    8ab8:	00c00244 	movi	r3,9
    8abc:	1f000936 	bltu	r3,fp,8ae4 <___vfprintf_internal_r+0x184>
    8ac0:	00bfffc4 	movi	r2,-1
    8ac4:	98800426 	beq	r19,r2,8ad8 <___vfprintf_internal_r+0x178>
    8ac8:	01400284 	movi	r5,10
    8acc:	9809883a 	mov	r4,r19
    8ad0:	00087740 	call	8774 <__mulsi3>
    8ad4:	00000106 	br	8adc <___vfprintf_internal_r+0x17c>
    8ad8:	0005883a 	mov	r2,zero
    8adc:	e0a7883a 	add	r19,fp,r2
    8ae0:	0000d906 	br	8e48 <___vfprintf_internal_r+0x4e8>
    8ae4:	00c01b04 	movi	r3,108
    8ae8:	10c0d226 	beq	r2,r3,8e34 <___vfprintf_internal_r+0x4d4>
    8aec:	013fffc4 	movi	r4,-1
    8af0:	99000226 	beq	r19,r4,8afc <___vfprintf_internal_r+0x19c>
    8af4:	d8000b15 	stw	zero,44(sp)
    8af8:	00000106 	br	8b00 <___vfprintf_internal_r+0x1a0>
    8afc:	04c00044 	movi	r19,1
    8b00:	01001a44 	movi	r4,105
    8b04:	11001626 	beq	r2,r4,8b60 <___vfprintf_internal_r+0x200>
    8b08:	20800916 	blt	r4,r2,8b30 <___vfprintf_internal_r+0x1d0>
    8b0c:	010018c4 	movi	r4,99
    8b10:	11008826 	beq	r2,r4,8d34 <___vfprintf_internal_r+0x3d4>
    8b14:	01001904 	movi	r4,100
    8b18:	11001126 	beq	r2,r4,8b60 <___vfprintf_internal_r+0x200>
    8b1c:	01001604 	movi	r4,88
    8b20:	1100c81e 	bne	r2,r4,8e44 <___vfprintf_internal_r+0x4e4>
    8b24:	00c00044 	movi	r3,1
    8b28:	d8c00e15 	stw	r3,56(sp)
    8b2c:	00001506 	br	8b84 <___vfprintf_internal_r+0x224>
    8b30:	01001cc4 	movi	r4,115
    8b34:	11009826 	beq	r2,r4,8d98 <___vfprintf_internal_r+0x438>
    8b38:	20800416 	blt	r4,r2,8b4c <___vfprintf_internal_r+0x1ec>
    8b3c:	01001bc4 	movi	r4,111
    8b40:	1100c01e 	bne	r2,r4,8e44 <___vfprintf_internal_r+0x4e4>
    8b44:	05400204 	movi	r21,8
    8b48:	00000f06 	br	8b88 <___vfprintf_internal_r+0x228>
    8b4c:	01001d44 	movi	r4,117
    8b50:	11000d26 	beq	r2,r4,8b88 <___vfprintf_internal_r+0x228>
    8b54:	01001e04 	movi	r4,120
    8b58:	11000a26 	beq	r2,r4,8b84 <___vfprintf_internal_r+0x224>
    8b5c:	0000b906 	br	8e44 <___vfprintf_internal_r+0x4e4>
    8b60:	d8c00a17 	ldw	r3,40(sp)
    8b64:	b7000104 	addi	fp,r22,4
    8b68:	18000726 	beq	r3,zero,8b88 <___vfprintf_internal_r+0x228>
    8b6c:	df000d15 	stw	fp,52(sp)
    8b70:	b5c00017 	ldw	r23,0(r22)
    8b74:	b800080e 	bge	r23,zero,8b98 <___vfprintf_internal_r+0x238>
    8b78:	05efc83a 	sub	r23,zero,r23
    8b7c:	02400044 	movi	r9,1
    8b80:	00000606 	br	8b9c <___vfprintf_internal_r+0x23c>
    8b84:	05400404 	movi	r21,16
    8b88:	b0c00104 	addi	r3,r22,4
    8b8c:	d8c00d15 	stw	r3,52(sp)
    8b90:	b5c00017 	ldw	r23,0(r22)
    8b94:	d8000a15 	stw	zero,40(sp)
    8b98:	0013883a 	mov	r9,zero
    8b9c:	d839883a 	mov	fp,sp
    8ba0:	b8001726 	beq	r23,zero,8c00 <___vfprintf_internal_r+0x2a0>
    8ba4:	a80b883a 	mov	r5,r21
    8ba8:	b809883a 	mov	r4,r23
    8bac:	da401015 	stw	r9,64(sp)
    8bb0:	00086b80 	call	86b8 <__udivsi3>
    8bb4:	a80b883a 	mov	r5,r21
    8bb8:	1009883a 	mov	r4,r2
    8bbc:	102d883a 	mov	r22,r2
    8bc0:	00087740 	call	8774 <__mulsi3>
    8bc4:	b885c83a 	sub	r2,r23,r2
    8bc8:	00c00244 	movi	r3,9
    8bcc:	da401017 	ldw	r9,64(sp)
    8bd0:	18800216 	blt	r3,r2,8bdc <___vfprintf_internal_r+0x27c>
    8bd4:	10800c04 	addi	r2,r2,48
    8bd8:	00000506 	br	8bf0 <___vfprintf_internal_r+0x290>
    8bdc:	d8c00e17 	ldw	r3,56(sp)
    8be0:	18000226 	beq	r3,zero,8bec <___vfprintf_internal_r+0x28c>
    8be4:	10800dc4 	addi	r2,r2,55
    8be8:	00000106 	br	8bf0 <___vfprintf_internal_r+0x290>
    8bec:	108015c4 	addi	r2,r2,87
    8bf0:	e0800005 	stb	r2,0(fp)
    8bf4:	b02f883a 	mov	r23,r22
    8bf8:	e7000044 	addi	fp,fp,1
    8bfc:	003fe806 	br	8ba0 <_gp+0xffff6548>
    8c00:	e6efc83a 	sub	r23,fp,sp
    8c04:	9dc5c83a 	sub	r2,r19,r23
    8c08:	0080090e 	bge	zero,r2,8c30 <___vfprintf_internal_r+0x2d0>
    8c0c:	e085883a 	add	r2,fp,r2
    8c10:	01400c04 	movi	r5,48
    8c14:	d8c00917 	ldw	r3,36(sp)
    8c18:	e009883a 	mov	r4,fp
    8c1c:	e0c0032e 	bgeu	fp,r3,8c2c <___vfprintf_internal_r+0x2cc>
    8c20:	e7000044 	addi	fp,fp,1
    8c24:	21400005 	stb	r5,0(r4)
    8c28:	e0bffa1e 	bne	fp,r2,8c14 <_gp+0xffff65bc>
    8c2c:	e6efc83a 	sub	r23,fp,sp
    8c30:	d8c00b17 	ldw	r3,44(sp)
    8c34:	4dd1883a 	add	r8,r9,r23
    8c38:	922dc83a 	sub	r22,r18,r8
    8c3c:	18001626 	beq	r3,zero,8c98 <___vfprintf_internal_r+0x338>
    8c40:	48000a26 	beq	r9,zero,8c6c <___vfprintf_internal_r+0x30c>
    8c44:	00800b44 	movi	r2,45
    8c48:	d8800805 	stb	r2,32(sp)
    8c4c:	88800117 	ldw	r2,4(r17)
    8c50:	01c00044 	movi	r7,1
    8c54:	d9800804 	addi	r6,sp,32
    8c58:	880b883a 	mov	r5,r17
    8c5c:	a009883a 	mov	r4,r20
    8c60:	103ee83a 	callr	r2
    8c64:	10004a1e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8c68:	84000044 	addi	r16,r16,1
    8c6c:	0580070e 	bge	zero,r22,8c8c <___vfprintf_internal_r+0x32c>
    8c70:	b00f883a 	mov	r7,r22
    8c74:	01800c04 	movi	r6,48
    8c78:	880b883a 	mov	r5,r17
    8c7c:	a009883a 	mov	r4,r20
    8c80:	00088f40 	call	88f4 <print_repeat>
    8c84:	1000421e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8c88:	85a1883a 	add	r16,r16,r22
    8c8c:	e02d883a 	mov	r22,fp
    8c90:	bf2fc83a 	sub	r23,r23,fp
    8c94:	00002006 	br	8d18 <___vfprintf_internal_r+0x3b8>
    8c98:	0580090e 	bge	zero,r22,8cc0 <___vfprintf_internal_r+0x360>
    8c9c:	b00f883a 	mov	r7,r22
    8ca0:	01800804 	movi	r6,32
    8ca4:	880b883a 	mov	r5,r17
    8ca8:	a009883a 	mov	r4,r20
    8cac:	da401015 	stw	r9,64(sp)
    8cb0:	00088f40 	call	88f4 <print_repeat>
    8cb4:	da401017 	ldw	r9,64(sp)
    8cb8:	1000351e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8cbc:	85a1883a 	add	r16,r16,r22
    8cc0:	483ff226 	beq	r9,zero,8c8c <_gp+0xffff6634>
    8cc4:	00800b44 	movi	r2,45
    8cc8:	d8800805 	stb	r2,32(sp)
    8ccc:	88800117 	ldw	r2,4(r17)
    8cd0:	01c00044 	movi	r7,1
    8cd4:	d9800804 	addi	r6,sp,32
    8cd8:	880b883a 	mov	r5,r17
    8cdc:	a009883a 	mov	r4,r20
    8ce0:	103ee83a 	callr	r2
    8ce4:	10002a1e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8ce8:	84000044 	addi	r16,r16,1
    8cec:	003fe706 	br	8c8c <_gp+0xffff6634>
    8cf0:	b5bfffc4 	addi	r22,r22,-1
    8cf4:	b0800003 	ldbu	r2,0(r22)
    8cf8:	01c00044 	movi	r7,1
    8cfc:	d9800804 	addi	r6,sp,32
    8d00:	d8800805 	stb	r2,32(sp)
    8d04:	88800117 	ldw	r2,4(r17)
    8d08:	880b883a 	mov	r5,r17
    8d0c:	a009883a 	mov	r4,r20
    8d10:	103ee83a 	callr	r2
    8d14:	10001e1e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8d18:	8585c83a 	sub	r2,r16,r22
    8d1c:	b5c9883a 	add	r4,r22,r23
    8d20:	e085883a 	add	r2,fp,r2
    8d24:	013ff216 	blt	zero,r4,8cf0 <_gp+0xffff6698>
    8d28:	1021883a 	mov	r16,r2
    8d2c:	dd800d17 	ldw	r22,52(sp)
    8d30:	00004406 	br	8e44 <___vfprintf_internal_r+0x4e4>
    8d34:	00800044 	movi	r2,1
    8d38:	1480080e 	bge	r2,r18,8d5c <___vfprintf_internal_r+0x3fc>
    8d3c:	95ffffc4 	addi	r23,r18,-1
    8d40:	b80f883a 	mov	r7,r23
    8d44:	01800804 	movi	r6,32
    8d48:	880b883a 	mov	r5,r17
    8d4c:	a009883a 	mov	r4,r20
    8d50:	00088f40 	call	88f4 <print_repeat>
    8d54:	10000e1e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8d58:	85e1883a 	add	r16,r16,r23
    8d5c:	b0800017 	ldw	r2,0(r22)
    8d60:	01c00044 	movi	r7,1
    8d64:	d80d883a 	mov	r6,sp
    8d68:	d8800005 	stb	r2,0(sp)
    8d6c:	88800117 	ldw	r2,4(r17)
    8d70:	880b883a 	mov	r5,r17
    8d74:	a009883a 	mov	r4,r20
    8d78:	b5c00104 	addi	r23,r22,4
    8d7c:	103ee83a 	callr	r2
    8d80:	1000031e 	bne	r2,zero,8d90 <___vfprintf_internal_r+0x430>
    8d84:	84000044 	addi	r16,r16,1
    8d88:	b82d883a 	mov	r22,r23
    8d8c:	00002d06 	br	8e44 <___vfprintf_internal_r+0x4e4>
    8d90:	00bfffc4 	movi	r2,-1
    8d94:	00003106 	br	8e5c <___vfprintf_internal_r+0x4fc>
    8d98:	b5c00017 	ldw	r23,0(r22)
    8d9c:	b7000104 	addi	fp,r22,4
    8da0:	b809883a 	mov	r4,r23
    8da4:	00088d80 	call	88d8 <strlen>
    8da8:	9091c83a 	sub	r8,r18,r2
    8dac:	102d883a 	mov	r22,r2
    8db0:	0200090e 	bge	zero,r8,8dd8 <___vfprintf_internal_r+0x478>
    8db4:	400f883a 	mov	r7,r8
    8db8:	01800804 	movi	r6,32
    8dbc:	880b883a 	mov	r5,r17
    8dc0:	a009883a 	mov	r4,r20
    8dc4:	da001015 	stw	r8,64(sp)
    8dc8:	00088f40 	call	88f4 <print_repeat>
    8dcc:	da001017 	ldw	r8,64(sp)
    8dd0:	103fef1e 	bne	r2,zero,8d90 <_gp+0xffff6738>
    8dd4:	8221883a 	add	r16,r16,r8
    8dd8:	88800117 	ldw	r2,4(r17)
    8ddc:	b00f883a 	mov	r7,r22
    8de0:	b80d883a 	mov	r6,r23
    8de4:	880b883a 	mov	r5,r17
    8de8:	a009883a 	mov	r4,r20
    8dec:	103ee83a 	callr	r2
    8df0:	103fe71e 	bne	r2,zero,8d90 <_gp+0xffff6738>
    8df4:	85a1883a 	add	r16,r16,r22
    8df8:	e02d883a 	mov	r22,fp
    8dfc:	00001106 	br	8e44 <___vfprintf_internal_r+0x4e4>
    8e00:	00c00044 	movi	r3,1
    8e04:	04ffffc4 	movi	r19,-1
    8e08:	d8000e15 	stw	zero,56(sp)
    8e0c:	d8c00a15 	stw	r3,40(sp)
    8e10:	05400284 	movi	r21,10
    8e14:	9825883a 	mov	r18,r19
    8e18:	d8000c15 	stw	zero,48(sp)
    8e1c:	d8000b15 	stw	zero,44(sp)
    8e20:	182f883a 	mov	r23,r3
    8e24:	00000806 	br	8e48 <___vfprintf_internal_r+0x4e8>
    8e28:	ddc00b15 	stw	r23,44(sp)
    8e2c:	05c00084 	movi	r23,2
    8e30:	00000506 	br	8e48 <___vfprintf_internal_r+0x4e8>
    8e34:	00c00044 	movi	r3,1
    8e38:	d8c00c15 	stw	r3,48(sp)
    8e3c:	05c000c4 	movi	r23,3
    8e40:	00000106 	br	8e48 <___vfprintf_internal_r+0x4e8>
    8e44:	002f883a 	mov	r23,zero
    8e48:	d8c00f17 	ldw	r3,60(sp)
    8e4c:	18c00044 	addi	r3,r3,1
    8e50:	d8c00f15 	stw	r3,60(sp)
    8e54:	003edc06 	br	89c8 <_gp+0xffff6370>
    8e58:	8005883a 	mov	r2,r16
    8e5c:	dfc01a17 	ldw	ra,104(sp)
    8e60:	df001917 	ldw	fp,100(sp)
    8e64:	ddc01817 	ldw	r23,96(sp)
    8e68:	dd801717 	ldw	r22,92(sp)
    8e6c:	dd401617 	ldw	r21,88(sp)
    8e70:	dd001517 	ldw	r20,84(sp)
    8e74:	dcc01417 	ldw	r19,80(sp)
    8e78:	dc801317 	ldw	r18,76(sp)
    8e7c:	dc401217 	ldw	r17,72(sp)
    8e80:	dc001117 	ldw	r16,68(sp)
    8e84:	dec01b04 	addi	sp,sp,108
    8e88:	f800283a 	ret

00008e8c <__vfprintf_internal>:
    8e8c:	00800074 	movhi	r2,1
    8e90:	10a99704 	addi	r2,r2,-22948
    8e94:	300f883a 	mov	r7,r6
    8e98:	280d883a 	mov	r6,r5
    8e9c:	200b883a 	mov	r5,r4
    8ea0:	11000017 	ldw	r4,0(r2)
    8ea4:	00089601 	jmpi	8960 <___vfprintf_internal_r>

00008ea8 <__sfvwrite_small_dev>:
    8ea8:	2880000b 	ldhu	r2,0(r5)
    8eac:	1080020c 	andi	r2,r2,8
    8eb0:	10002126 	beq	r2,zero,8f38 <__sfvwrite_small_dev+0x90>
    8eb4:	2880008f 	ldh	r2,2(r5)
    8eb8:	defffa04 	addi	sp,sp,-24
    8ebc:	dc000015 	stw	r16,0(sp)
    8ec0:	dfc00515 	stw	ra,20(sp)
    8ec4:	dd000415 	stw	r20,16(sp)
    8ec8:	dcc00315 	stw	r19,12(sp)
    8ecc:	dc800215 	stw	r18,8(sp)
    8ed0:	dc400115 	stw	r17,4(sp)
    8ed4:	2821883a 	mov	r16,r5
    8ed8:	10001216 	blt	r2,zero,8f24 <__sfvwrite_small_dev+0x7c>
    8edc:	2027883a 	mov	r19,r4
    8ee0:	3025883a 	mov	r18,r6
    8ee4:	3823883a 	mov	r17,r7
    8ee8:	05010004 	movi	r20,1024
    8eec:	04400b0e 	bge	zero,r17,8f1c <__sfvwrite_small_dev+0x74>
    8ef0:	880f883a 	mov	r7,r17
    8ef4:	a440010e 	bge	r20,r17,8efc <__sfvwrite_small_dev+0x54>
    8ef8:	01c10004 	movi	r7,1024
    8efc:	8140008f 	ldh	r5,2(r16)
    8f00:	900d883a 	mov	r6,r18
    8f04:	9809883a 	mov	r4,r19
    8f08:	0008f600 	call	8f60 <_write_r>
    8f0c:	0080050e 	bge	zero,r2,8f24 <__sfvwrite_small_dev+0x7c>
    8f10:	88a3c83a 	sub	r17,r17,r2
    8f14:	90a5883a 	add	r18,r18,r2
    8f18:	003ff406 	br	8eec <_gp+0xffff6894>
    8f1c:	0005883a 	mov	r2,zero
    8f20:	00000706 	br	8f40 <__sfvwrite_small_dev+0x98>
    8f24:	8080000b 	ldhu	r2,0(r16)
    8f28:	10801014 	ori	r2,r2,64
    8f2c:	8080000d 	sth	r2,0(r16)
    8f30:	00bfffc4 	movi	r2,-1
    8f34:	00000206 	br	8f40 <__sfvwrite_small_dev+0x98>
    8f38:	00bfffc4 	movi	r2,-1
    8f3c:	f800283a 	ret
    8f40:	dfc00517 	ldw	ra,20(sp)
    8f44:	dd000417 	ldw	r20,16(sp)
    8f48:	dcc00317 	ldw	r19,12(sp)
    8f4c:	dc800217 	ldw	r18,8(sp)
    8f50:	dc400117 	ldw	r17,4(sp)
    8f54:	dc000017 	ldw	r16,0(sp)
    8f58:	dec00604 	addi	sp,sp,24
    8f5c:	f800283a 	ret

00008f60 <_write_r>:
    8f60:	defffd04 	addi	sp,sp,-12
    8f64:	dc000015 	stw	r16,0(sp)
    8f68:	04000074 	movhi	r16,1
    8f6c:	dc400115 	stw	r17,4(sp)
    8f70:	842a5904 	addi	r16,r16,-22172
    8f74:	2023883a 	mov	r17,r4
    8f78:	2809883a 	mov	r4,r5
    8f7c:	300b883a 	mov	r5,r6
    8f80:	380d883a 	mov	r6,r7
    8f84:	dfc00215 	stw	ra,8(sp)
    8f88:	80000015 	stw	zero,0(r16)
    8f8c:	000915c0 	call	915c <write>
    8f90:	00ffffc4 	movi	r3,-1
    8f94:	10c0031e 	bne	r2,r3,8fa4 <_write_r+0x44>
    8f98:	80c00017 	ldw	r3,0(r16)
    8f9c:	18000126 	beq	r3,zero,8fa4 <_write_r+0x44>
    8fa0:	88c00015 	stw	r3,0(r17)
    8fa4:	dfc00217 	ldw	ra,8(sp)
    8fa8:	dc400117 	ldw	r17,4(sp)
    8fac:	dc000017 	ldw	r16,0(sp)
    8fb0:	dec00304 	addi	sp,sp,12
    8fb4:	f800283a 	ret

00008fb8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8fb8:	defffc04 	addi	sp,sp,-16
    8fbc:	df000315 	stw	fp,12(sp)
    8fc0:	df000304 	addi	fp,sp,12
    8fc4:	e13ffd15 	stw	r4,-12(fp)
    8fc8:	e17ffe15 	stw	r5,-8(fp)
    8fcc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8fd0:	e0fffe17 	ldw	r3,-8(fp)
    8fd4:	e0bffd17 	ldw	r2,-12(fp)
    8fd8:	18800c26 	beq	r3,r2,900c <alt_load_section+0x54>
  {
    while( to != end )
    8fdc:	00000806 	br	9000 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8fe0:	e0bffe17 	ldw	r2,-8(fp)
    8fe4:	10c00104 	addi	r3,r2,4
    8fe8:	e0fffe15 	stw	r3,-8(fp)
    8fec:	e0fffd17 	ldw	r3,-12(fp)
    8ff0:	19000104 	addi	r4,r3,4
    8ff4:	e13ffd15 	stw	r4,-12(fp)
    8ff8:	18c00017 	ldw	r3,0(r3)
    8ffc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9000:	e0fffe17 	ldw	r3,-8(fp)
    9004:	e0bfff17 	ldw	r2,-4(fp)
    9008:	18bff51e 	bne	r3,r2,8fe0 <_gp+0xffff6988>
    {
      *to++ = *from++;
    }
  }
}
    900c:	0001883a 	nop
    9010:	e037883a 	mov	sp,fp
    9014:	df000017 	ldw	fp,0(sp)
    9018:	dec00104 	addi	sp,sp,4
    901c:	f800283a 	ret

00009020 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9020:	defffe04 	addi	sp,sp,-8
    9024:	dfc00115 	stw	ra,4(sp)
    9028:	df000015 	stw	fp,0(sp)
    902c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9030:	01800074 	movhi	r6,1
    9034:	31a99e04 	addi	r6,r6,-22920
    9038:	01400074 	movhi	r5,1
    903c:	2968e904 	addi	r5,r5,-23644
    9040:	01000074 	movhi	r4,1
    9044:	21299e04 	addi	r4,r4,-22920
    9048:	0008fb80 	call	8fb8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    904c:	01800074 	movhi	r6,1
    9050:	31a00804 	addi	r6,r6,-32736
    9054:	01400074 	movhi	r5,1
    9058:	29600804 	addi	r5,r5,-32736
    905c:	01000074 	movhi	r4,1
    9060:	21200804 	addi	r4,r4,-32736
    9064:	0008fb80 	call	8fb8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9068:	01800074 	movhi	r6,1
    906c:	31a8e904 	addi	r6,r6,-23644
    9070:	01400074 	movhi	r5,1
    9074:	2968b104 	addi	r5,r5,-23868
    9078:	01000074 	movhi	r4,1
    907c:	2128b104 	addi	r4,r4,-23868
    9080:	0008fb80 	call	8fb8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9084:	00096500 	call	9650 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9088:	000983c0 	call	983c <alt_icache_flush_all>
}
    908c:	0001883a 	nop
    9090:	e037883a 	mov	sp,fp
    9094:	dfc00117 	ldw	ra,4(sp)
    9098:	df000017 	ldw	fp,0(sp)
    909c:	dec00204 	addi	sp,sp,8
    90a0:	f800283a 	ret

000090a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    90a4:	defffd04 	addi	sp,sp,-12
    90a8:	dfc00215 	stw	ra,8(sp)
    90ac:	df000115 	stw	fp,4(sp)
    90b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90b4:	0009883a 	mov	r4,zero
    90b8:	00092900 	call	9290 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    90bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    90c0:	00092c80 	call	92c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    90c4:	01800074 	movhi	r6,1
    90c8:	31a8dc04 	addi	r6,r6,-23696
    90cc:	01400074 	movhi	r5,1
    90d0:	2968dc04 	addi	r5,r5,-23696
    90d4:	01000074 	movhi	r4,1
    90d8:	2128dc04 	addi	r4,r4,-23696
    90dc:	00099400 	call	9940 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    90e0:	000977c0 	call	977c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    90e4:	01000074 	movhi	r4,1
    90e8:	2125f704 	addi	r4,r4,-26660
    90ec:	0009f440 	call	9f44 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    90f0:	d0a0c417 	ldw	r2,-31984(gp)
    90f4:	d0e0c517 	ldw	r3,-31980(gp)
    90f8:	d120c617 	ldw	r4,-31976(gp)
    90fc:	200d883a 	mov	r6,r4
    9100:	180b883a 	mov	r5,r3
    9104:	1009883a 	mov	r4,r2
    9108:	000805c0 	call	805c <main>
    910c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9110:	01000044 	movi	r4,1
    9114:	00095780 	call	9578 <close>
  exit (result);
    9118:	e13fff17 	ldw	r4,-4(fp)
    911c:	0009f580 	call	9f58 <exit>

00009120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9120:	defffe04 	addi	sp,sp,-8
    9124:	dfc00115 	stw	ra,4(sp)
    9128:	df000015 	stw	fp,0(sp)
    912c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9130:	d0a00717 	ldw	r2,-32740(gp)
    9134:	10000326 	beq	r2,zero,9144 <alt_get_errno+0x24>
    9138:	d0a00717 	ldw	r2,-32740(gp)
    913c:	103ee83a 	callr	r2
    9140:	00000106 	br	9148 <alt_get_errno+0x28>
    9144:	d0a0c304 	addi	r2,gp,-31988
}
    9148:	e037883a 	mov	sp,fp
    914c:	dfc00117 	ldw	ra,4(sp)
    9150:	df000017 	ldw	fp,0(sp)
    9154:	dec00204 	addi	sp,sp,8
    9158:	f800283a 	ret

0000915c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    915c:	defff904 	addi	sp,sp,-28
    9160:	dfc00615 	stw	ra,24(sp)
    9164:	df000515 	stw	fp,20(sp)
    9168:	df000504 	addi	fp,sp,20
    916c:	e13ffd15 	stw	r4,-12(fp)
    9170:	e17ffe15 	stw	r5,-8(fp)
    9174:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9178:	e0bffd17 	ldw	r2,-12(fp)
    917c:	10000816 	blt	r2,zero,91a0 <write+0x44>
    9180:	01400304 	movi	r5,12
    9184:	e13ffd17 	ldw	r4,-12(fp)
    9188:	00087740 	call	8774 <__mulsi3>
    918c:	1007883a 	mov	r3,r2
    9190:	00800074 	movhi	r2,1
    9194:	10a93604 	addi	r2,r2,-23336
    9198:	1885883a 	add	r2,r3,r2
    919c:	00000106 	br	91a4 <write+0x48>
    91a0:	0005883a 	mov	r2,zero
    91a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    91a8:	e0bffb17 	ldw	r2,-20(fp)
    91ac:	10002126 	beq	r2,zero,9234 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    91b0:	e0bffb17 	ldw	r2,-20(fp)
    91b4:	10800217 	ldw	r2,8(r2)
    91b8:	108000cc 	andi	r2,r2,3
    91bc:	10001826 	beq	r2,zero,9220 <write+0xc4>
    91c0:	e0bffb17 	ldw	r2,-20(fp)
    91c4:	10800017 	ldw	r2,0(r2)
    91c8:	10800617 	ldw	r2,24(r2)
    91cc:	10001426 	beq	r2,zero,9220 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    91d0:	e0bffb17 	ldw	r2,-20(fp)
    91d4:	10800017 	ldw	r2,0(r2)
    91d8:	10800617 	ldw	r2,24(r2)
    91dc:	e0ffff17 	ldw	r3,-4(fp)
    91e0:	180d883a 	mov	r6,r3
    91e4:	e17ffe17 	ldw	r5,-8(fp)
    91e8:	e13ffb17 	ldw	r4,-20(fp)
    91ec:	103ee83a 	callr	r2
    91f0:	e0bffc15 	stw	r2,-16(fp)
    91f4:	e0bffc17 	ldw	r2,-16(fp)
    91f8:	1000070e 	bge	r2,zero,9218 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    91fc:	00091200 	call	9120 <alt_get_errno>
    9200:	1007883a 	mov	r3,r2
    9204:	e0bffc17 	ldw	r2,-16(fp)
    9208:	0085c83a 	sub	r2,zero,r2
    920c:	18800015 	stw	r2,0(r3)
        return -1;
    9210:	00bfffc4 	movi	r2,-1
    9214:	00000c06 	br	9248 <write+0xec>
      }
      return rval;
    9218:	e0bffc17 	ldw	r2,-16(fp)
    921c:	00000a06 	br	9248 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9220:	00091200 	call	9120 <alt_get_errno>
    9224:	1007883a 	mov	r3,r2
    9228:	00800344 	movi	r2,13
    922c:	18800015 	stw	r2,0(r3)
    9230:	00000406 	br	9244 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9234:	00091200 	call	9120 <alt_get_errno>
    9238:	1007883a 	mov	r3,r2
    923c:	00801444 	movi	r2,81
    9240:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9244:	00bfffc4 	movi	r2,-1
}
    9248:	e037883a 	mov	sp,fp
    924c:	dfc00117 	ldw	ra,4(sp)
    9250:	df000017 	ldw	fp,0(sp)
    9254:	dec00204 	addi	sp,sp,8
    9258:	f800283a 	ret

0000925c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    925c:	defffd04 	addi	sp,sp,-12
    9260:	dfc00215 	stw	ra,8(sp)
    9264:	df000115 	stw	fp,4(sp)
    9268:	df000104 	addi	fp,sp,4
    926c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9270:	d1600404 	addi	r5,gp,-32752
    9274:	e13fff17 	ldw	r4,-4(fp)
    9278:	00096d80 	call	96d8 <alt_dev_llist_insert>
}
    927c:	e037883a 	mov	sp,fp
    9280:	dfc00117 	ldw	ra,4(sp)
    9284:	df000017 	ldw	fp,0(sp)
    9288:	dec00204 	addi	sp,sp,8
    928c:	f800283a 	ret

00009290 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9290:	defffd04 	addi	sp,sp,-12
    9294:	dfc00215 	stw	ra,8(sp)
    9298:	df000115 	stw	fp,4(sp)
    929c:	df000104 	addi	fp,sp,4
    92a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    92a4:	0009cc40 	call	9cc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    92a8:	00800044 	movi	r2,1
    92ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    92b0:	0001883a 	nop
    92b4:	e037883a 	mov	sp,fp
    92b8:	dfc00117 	ldw	ra,4(sp)
    92bc:	df000017 	ldw	fp,0(sp)
    92c0:	dec00204 	addi	sp,sp,8
    92c4:	f800283a 	ret

000092c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    92c8:	defffe04 	addi	sp,sp,-8
    92cc:	dfc00115 	stw	ra,4(sp)
    92d0:	df000015 	stw	fp,0(sp)
    92d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    92d8:	01000074 	movhi	r4,1
    92dc:	21292104 	addi	r4,r4,-23420
    92e0:	000925c0 	call	925c <alt_dev_reg>
}
    92e4:	0001883a 	nop
    92e8:	e037883a 	mov	sp,fp
    92ec:	dfc00117 	ldw	ra,4(sp)
    92f0:	df000017 	ldw	fp,0(sp)
    92f4:	dec00204 	addi	sp,sp,8
    92f8:	f800283a 	ret

000092fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    92fc:	defffa04 	addi	sp,sp,-24
    9300:	dfc00515 	stw	ra,20(sp)
    9304:	df000415 	stw	fp,16(sp)
    9308:	df000404 	addi	fp,sp,16
    930c:	e13ffd15 	stw	r4,-12(fp)
    9310:	e17ffe15 	stw	r5,-8(fp)
    9314:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9318:	e0bffd17 	ldw	r2,-12(fp)
    931c:	10800017 	ldw	r2,0(r2)
    9320:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9324:	e0bffc17 	ldw	r2,-16(fp)
    9328:	10c00a04 	addi	r3,r2,40
    932c:	e0bffd17 	ldw	r2,-12(fp)
    9330:	10800217 	ldw	r2,8(r2)
    9334:	100f883a 	mov	r7,r2
    9338:	e1bfff17 	ldw	r6,-4(fp)
    933c:	e17ffe17 	ldw	r5,-8(fp)
    9340:	1809883a 	mov	r4,r3
    9344:	00093bc0 	call	93bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9348:	e037883a 	mov	sp,fp
    934c:	dfc00117 	ldw	ra,4(sp)
    9350:	df000017 	ldw	fp,0(sp)
    9354:	dec00204 	addi	sp,sp,8
    9358:	f800283a 	ret

0000935c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    935c:	defffa04 	addi	sp,sp,-24
    9360:	dfc00515 	stw	ra,20(sp)
    9364:	df000415 	stw	fp,16(sp)
    9368:	df000404 	addi	fp,sp,16
    936c:	e13ffd15 	stw	r4,-12(fp)
    9370:	e17ffe15 	stw	r5,-8(fp)
    9374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9378:	e0bffd17 	ldw	r2,-12(fp)
    937c:	10800017 	ldw	r2,0(r2)
    9380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9384:	e0bffc17 	ldw	r2,-16(fp)
    9388:	10c00a04 	addi	r3,r2,40
    938c:	e0bffd17 	ldw	r2,-12(fp)
    9390:	10800217 	ldw	r2,8(r2)
    9394:	100f883a 	mov	r7,r2
    9398:	e1bfff17 	ldw	r6,-4(fp)
    939c:	e17ffe17 	ldw	r5,-8(fp)
    93a0:	1809883a 	mov	r4,r3
    93a4:	00094a80 	call	94a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    93a8:	e037883a 	mov	sp,fp
    93ac:	dfc00117 	ldw	ra,4(sp)
    93b0:	df000017 	ldw	fp,0(sp)
    93b4:	dec00204 	addi	sp,sp,8
    93b8:	f800283a 	ret

000093bc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    93bc:	defff704 	addi	sp,sp,-36
    93c0:	df000815 	stw	fp,32(sp)
    93c4:	df000804 	addi	fp,sp,32
    93c8:	e13ffc15 	stw	r4,-16(fp)
    93cc:	e17ffd15 	stw	r5,-12(fp)
    93d0:	e1bffe15 	stw	r6,-8(fp)
    93d4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    93d8:	e0bffc17 	ldw	r2,-16(fp)
    93dc:	10800017 	ldw	r2,0(r2)
    93e0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    93e4:	e0bffd17 	ldw	r2,-12(fp)
    93e8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    93ec:	e0bffe17 	ldw	r2,-8(fp)
    93f0:	e0fffd17 	ldw	r3,-12(fp)
    93f4:	1885883a 	add	r2,r3,r2
    93f8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    93fc:	00001206 	br	9448 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9400:	e0bff917 	ldw	r2,-28(fp)
    9404:	10800037 	ldwio	r2,0(r2)
    9408:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    940c:	e0bffb17 	ldw	r2,-20(fp)
    9410:	10a0000c 	andi	r2,r2,32768
    9414:	10000626 	beq	r2,zero,9430 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9418:	e0bff817 	ldw	r2,-32(fp)
    941c:	10c00044 	addi	r3,r2,1
    9420:	e0fff815 	stw	r3,-32(fp)
    9424:	e0fffb17 	ldw	r3,-20(fp)
    9428:	10c00005 	stb	r3,0(r2)
    942c:	00000606 	br	9448 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9430:	e0fff817 	ldw	r3,-32(fp)
    9434:	e0bffd17 	ldw	r2,-12(fp)
    9438:	1880071e 	bne	r3,r2,9458 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    943c:	e0bfff17 	ldw	r2,-4(fp)
    9440:	1090000c 	andi	r2,r2,16384
    9444:	1000061e 	bne	r2,zero,9460 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9448:	e0fff817 	ldw	r3,-32(fp)
    944c:	e0bffa17 	ldw	r2,-24(fp)
    9450:	18bfeb36 	bltu	r3,r2,9400 <_gp+0xffff6da8>
    9454:	00000306 	br	9464 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9458:	0001883a 	nop
    945c:	00000106 	br	9464 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9460:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9464:	e0fff817 	ldw	r3,-32(fp)
    9468:	e0bffd17 	ldw	r2,-12(fp)
    946c:	18800426 	beq	r3,r2,9480 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9470:	e0fff817 	ldw	r3,-32(fp)
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	1885c83a 	sub	r2,r3,r2
    947c:	00000606 	br	9498 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9480:	e0bfff17 	ldw	r2,-4(fp)
    9484:	1090000c 	andi	r2,r2,16384
    9488:	10000226 	beq	r2,zero,9494 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    948c:	00bffd44 	movi	r2,-11
    9490:	00000106 	br	9498 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    9494:	00bffec4 	movi	r2,-5
}
    9498:	e037883a 	mov	sp,fp
    949c:	df000017 	ldw	fp,0(sp)
    94a0:	dec00104 	addi	sp,sp,4
    94a4:	f800283a 	ret

000094a8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    94a8:	defff904 	addi	sp,sp,-28
    94ac:	df000615 	stw	fp,24(sp)
    94b0:	df000604 	addi	fp,sp,24
    94b4:	e13ffc15 	stw	r4,-16(fp)
    94b8:	e17ffd15 	stw	r5,-12(fp)
    94bc:	e1bffe15 	stw	r6,-8(fp)
    94c0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    94c4:	e0bffc17 	ldw	r2,-16(fp)
    94c8:	10800017 	ldw	r2,0(r2)
    94cc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    94d0:	e0bffe17 	ldw	r2,-8(fp)
    94d4:	e0fffd17 	ldw	r3,-12(fp)
    94d8:	1885883a 	add	r2,r3,r2
    94dc:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    94e0:	00000e06 	br	951c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    94e4:	e0bffa17 	ldw	r2,-24(fp)
    94e8:	10800104 	addi	r2,r2,4
    94ec:	10800037 	ldwio	r2,0(r2)
    94f0:	10bfffec 	andhi	r2,r2,65535
    94f4:	10000926 	beq	r2,zero,951c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    94f8:	e0fffa17 	ldw	r3,-24(fp)
    94fc:	e0bffd17 	ldw	r2,-12(fp)
    9500:	11000044 	addi	r4,r2,1
    9504:	e13ffd15 	stw	r4,-12(fp)
    9508:	10800003 	ldbu	r2,0(r2)
    950c:	10803fcc 	andi	r2,r2,255
    9510:	1080201c 	xori	r2,r2,128
    9514:	10bfe004 	addi	r2,r2,-128
    9518:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    951c:	e0fffd17 	ldw	r3,-12(fp)
    9520:	e0bffb17 	ldw	r2,-20(fp)
    9524:	18bfef36 	bltu	r3,r2,94e4 <_gp+0xffff6e8c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9528:	e0bffe17 	ldw	r2,-8(fp)
}
    952c:	e037883a 	mov	sp,fp
    9530:	df000017 	ldw	fp,0(sp)
    9534:	dec00104 	addi	sp,sp,4
    9538:	f800283a 	ret

0000953c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    953c:	defffe04 	addi	sp,sp,-8
    9540:	dfc00115 	stw	ra,4(sp)
    9544:	df000015 	stw	fp,0(sp)
    9548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    954c:	d0a00717 	ldw	r2,-32740(gp)
    9550:	10000326 	beq	r2,zero,9560 <alt_get_errno+0x24>
    9554:	d0a00717 	ldw	r2,-32740(gp)
    9558:	103ee83a 	callr	r2
    955c:	00000106 	br	9564 <alt_get_errno+0x28>
    9560:	d0a0c304 	addi	r2,gp,-31988
}
    9564:	e037883a 	mov	sp,fp
    9568:	dfc00117 	ldw	ra,4(sp)
    956c:	df000017 	ldw	fp,0(sp)
    9570:	dec00204 	addi	sp,sp,8
    9574:	f800283a 	ret

00009578 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9578:	defffb04 	addi	sp,sp,-20
    957c:	dfc00415 	stw	ra,16(sp)
    9580:	df000315 	stw	fp,12(sp)
    9584:	df000304 	addi	fp,sp,12
    9588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    958c:	e0bfff17 	ldw	r2,-4(fp)
    9590:	10000816 	blt	r2,zero,95b4 <close+0x3c>
    9594:	01400304 	movi	r5,12
    9598:	e13fff17 	ldw	r4,-4(fp)
    959c:	00087740 	call	8774 <__mulsi3>
    95a0:	1007883a 	mov	r3,r2
    95a4:	00800074 	movhi	r2,1
    95a8:	10a93604 	addi	r2,r2,-23336
    95ac:	1885883a 	add	r2,r3,r2
    95b0:	00000106 	br	95b8 <close+0x40>
    95b4:	0005883a 	mov	r2,zero
    95b8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    95bc:	e0bffd17 	ldw	r2,-12(fp)
    95c0:	10001926 	beq	r2,zero,9628 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    95c4:	e0bffd17 	ldw	r2,-12(fp)
    95c8:	10800017 	ldw	r2,0(r2)
    95cc:	10800417 	ldw	r2,16(r2)
    95d0:	10000626 	beq	r2,zero,95ec <close+0x74>
    95d4:	e0bffd17 	ldw	r2,-12(fp)
    95d8:	10800017 	ldw	r2,0(r2)
    95dc:	10800417 	ldw	r2,16(r2)
    95e0:	e13ffd17 	ldw	r4,-12(fp)
    95e4:	103ee83a 	callr	r2
    95e8:	00000106 	br	95f0 <close+0x78>
    95ec:	0005883a 	mov	r2,zero
    95f0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    95f4:	e13fff17 	ldw	r4,-4(fp)
    95f8:	0009c400 	call	9c40 <alt_release_fd>
    if (rval < 0)
    95fc:	e0bffe17 	ldw	r2,-8(fp)
    9600:	1000070e 	bge	r2,zero,9620 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9604:	000953c0 	call	953c <alt_get_errno>
    9608:	1007883a 	mov	r3,r2
    960c:	e0bffe17 	ldw	r2,-8(fp)
    9610:	0085c83a 	sub	r2,zero,r2
    9614:	18800015 	stw	r2,0(r3)
      return -1;
    9618:	00bfffc4 	movi	r2,-1
    961c:	00000706 	br	963c <close+0xc4>
    }
    return 0;
    9620:	0005883a 	mov	r2,zero
    9624:	00000506 	br	963c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9628:	000953c0 	call	953c <alt_get_errno>
    962c:	1007883a 	mov	r3,r2
    9630:	00801444 	movi	r2,81
    9634:	18800015 	stw	r2,0(r3)
    return -1;
    9638:	00bfffc4 	movi	r2,-1
  }
}
    963c:	e037883a 	mov	sp,fp
    9640:	dfc00117 	ldw	ra,4(sp)
    9644:	df000017 	ldw	fp,0(sp)
    9648:	dec00204 	addi	sp,sp,8
    964c:	f800283a 	ret

00009650 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9650:	deffff04 	addi	sp,sp,-4
    9654:	df000015 	stw	fp,0(sp)
    9658:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    965c:	0001883a 	nop
    9660:	e037883a 	mov	sp,fp
    9664:	df000017 	ldw	fp,0(sp)
    9668:	dec00104 	addi	sp,sp,4
    966c:	f800283a 	ret

00009670 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9670:	defffc04 	addi	sp,sp,-16
    9674:	df000315 	stw	fp,12(sp)
    9678:	df000304 	addi	fp,sp,12
    967c:	e13ffd15 	stw	r4,-12(fp)
    9680:	e17ffe15 	stw	r5,-8(fp)
    9684:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9688:	e0bfff17 	ldw	r2,-4(fp)
}
    968c:	e037883a 	mov	sp,fp
    9690:	df000017 	ldw	fp,0(sp)
    9694:	dec00104 	addi	sp,sp,4
    9698:	f800283a 	ret

0000969c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    969c:	defffe04 	addi	sp,sp,-8
    96a0:	dfc00115 	stw	ra,4(sp)
    96a4:	df000015 	stw	fp,0(sp)
    96a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    96ac:	d0a00717 	ldw	r2,-32740(gp)
    96b0:	10000326 	beq	r2,zero,96c0 <alt_get_errno+0x24>
    96b4:	d0a00717 	ldw	r2,-32740(gp)
    96b8:	103ee83a 	callr	r2
    96bc:	00000106 	br	96c4 <alt_get_errno+0x28>
    96c0:	d0a0c304 	addi	r2,gp,-31988
}
    96c4:	e037883a 	mov	sp,fp
    96c8:	dfc00117 	ldw	ra,4(sp)
    96cc:	df000017 	ldw	fp,0(sp)
    96d0:	dec00204 	addi	sp,sp,8
    96d4:	f800283a 	ret

000096d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    96d8:	defffa04 	addi	sp,sp,-24
    96dc:	dfc00515 	stw	ra,20(sp)
    96e0:	df000415 	stw	fp,16(sp)
    96e4:	df000404 	addi	fp,sp,16
    96e8:	e13ffe15 	stw	r4,-8(fp)
    96ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    96f0:	e0bffe17 	ldw	r2,-8(fp)
    96f4:	10000326 	beq	r2,zero,9704 <alt_dev_llist_insert+0x2c>
    96f8:	e0bffe17 	ldw	r2,-8(fp)
    96fc:	10800217 	ldw	r2,8(r2)
    9700:	1000061e 	bne	r2,zero,971c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9704:	000969c0 	call	969c <alt_get_errno>
    9708:	1007883a 	mov	r3,r2
    970c:	00800584 	movi	r2,22
    9710:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9714:	00bffa84 	movi	r2,-22
    9718:	00001306 	br	9768 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    971c:	e0bffe17 	ldw	r2,-8(fp)
    9720:	e0ffff17 	ldw	r3,-4(fp)
    9724:	e0fffc15 	stw	r3,-16(fp)
    9728:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    972c:	e0bffd17 	ldw	r2,-12(fp)
    9730:	e0fffc17 	ldw	r3,-16(fp)
    9734:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9738:	e0bffc17 	ldw	r2,-16(fp)
    973c:	10c00017 	ldw	r3,0(r2)
    9740:	e0bffd17 	ldw	r2,-12(fp)
    9744:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9748:	e0bffc17 	ldw	r2,-16(fp)
    974c:	10800017 	ldw	r2,0(r2)
    9750:	e0fffd17 	ldw	r3,-12(fp)
    9754:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9758:	e0bffc17 	ldw	r2,-16(fp)
    975c:	e0fffd17 	ldw	r3,-12(fp)
    9760:	10c00015 	stw	r3,0(r2)

  return 0;  
    9764:	0005883a 	mov	r2,zero
}
    9768:	e037883a 	mov	sp,fp
    976c:	dfc00117 	ldw	ra,4(sp)
    9770:	df000017 	ldw	fp,0(sp)
    9774:	dec00204 	addi	sp,sp,8
    9778:	f800283a 	ret

0000977c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    977c:	defffd04 	addi	sp,sp,-12
    9780:	dfc00215 	stw	ra,8(sp)
    9784:	df000115 	stw	fp,4(sp)
    9788:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    978c:	00800074 	movhi	r2,1
    9790:	10a8b004 	addi	r2,r2,-23872
    9794:	e0bfff15 	stw	r2,-4(fp)
    9798:	00000606 	br	97b4 <_do_ctors+0x38>
        (*ctor) (); 
    979c:	e0bfff17 	ldw	r2,-4(fp)
    97a0:	10800017 	ldw	r2,0(r2)
    97a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    97a8:	e0bfff17 	ldw	r2,-4(fp)
    97ac:	10bfff04 	addi	r2,r2,-4
    97b0:	e0bfff15 	stw	r2,-4(fp)
    97b4:	e0ffff17 	ldw	r3,-4(fp)
    97b8:	00800074 	movhi	r2,1
    97bc:	10a8b104 	addi	r2,r2,-23868
    97c0:	18bff62e 	bgeu	r3,r2,979c <_gp+0xffff7144>
        (*ctor) (); 
}
    97c4:	0001883a 	nop
    97c8:	e037883a 	mov	sp,fp
    97cc:	dfc00117 	ldw	ra,4(sp)
    97d0:	df000017 	ldw	fp,0(sp)
    97d4:	dec00204 	addi	sp,sp,8
    97d8:	f800283a 	ret

000097dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    97dc:	defffd04 	addi	sp,sp,-12
    97e0:	dfc00215 	stw	ra,8(sp)
    97e4:	df000115 	stw	fp,4(sp)
    97e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    97ec:	00800074 	movhi	r2,1
    97f0:	10a8b004 	addi	r2,r2,-23872
    97f4:	e0bfff15 	stw	r2,-4(fp)
    97f8:	00000606 	br	9814 <_do_dtors+0x38>
        (*dtor) (); 
    97fc:	e0bfff17 	ldw	r2,-4(fp)
    9800:	10800017 	ldw	r2,0(r2)
    9804:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9808:	e0bfff17 	ldw	r2,-4(fp)
    980c:	10bfff04 	addi	r2,r2,-4
    9810:	e0bfff15 	stw	r2,-4(fp)
    9814:	e0ffff17 	ldw	r3,-4(fp)
    9818:	00800074 	movhi	r2,1
    981c:	10a8b104 	addi	r2,r2,-23868
    9820:	18bff62e 	bgeu	r3,r2,97fc <_gp+0xffff71a4>
        (*dtor) (); 
}
    9824:	0001883a 	nop
    9828:	e037883a 	mov	sp,fp
    982c:	dfc00117 	ldw	ra,4(sp)
    9830:	df000017 	ldw	fp,0(sp)
    9834:	dec00204 	addi	sp,sp,8
    9838:	f800283a 	ret

0000983c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    983c:	deffff04 	addi	sp,sp,-4
    9840:	df000015 	stw	fp,0(sp)
    9844:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9848:	0001883a 	nop
    984c:	e037883a 	mov	sp,fp
    9850:	df000017 	ldw	fp,0(sp)
    9854:	dec00104 	addi	sp,sp,4
    9858:	f800283a 	ret

0000985c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    985c:	defff804 	addi	sp,sp,-32
    9860:	dfc00715 	stw	ra,28(sp)
    9864:	df000615 	stw	fp,24(sp)
    9868:	dc000515 	stw	r16,20(sp)
    986c:	df000604 	addi	fp,sp,24
    9870:	e13ffb15 	stw	r4,-20(fp)
    9874:	e17ffc15 	stw	r5,-16(fp)
    9878:	e1bffd15 	stw	r6,-12(fp)
    987c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9880:	e1bffe17 	ldw	r6,-8(fp)
    9884:	e17ffd17 	ldw	r5,-12(fp)
    9888:	e13ffc17 	ldw	r4,-16(fp)
    988c:	0009ae40 	call	9ae4 <open>
    9890:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9894:	e0bffa17 	ldw	r2,-24(fp)
    9898:	10002216 	blt	r2,zero,9924 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    989c:	04000074 	movhi	r16,1
    98a0:	84293604 	addi	r16,r16,-23336
    98a4:	e0bffa17 	ldw	r2,-24(fp)
    98a8:	01400304 	movi	r5,12
    98ac:	1009883a 	mov	r4,r2
    98b0:	00087740 	call	8774 <__mulsi3>
    98b4:	8085883a 	add	r2,r16,r2
    98b8:	10c00017 	ldw	r3,0(r2)
    98bc:	e0bffb17 	ldw	r2,-20(fp)
    98c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    98c4:	04000074 	movhi	r16,1
    98c8:	84293604 	addi	r16,r16,-23336
    98cc:	e0bffa17 	ldw	r2,-24(fp)
    98d0:	01400304 	movi	r5,12
    98d4:	1009883a 	mov	r4,r2
    98d8:	00087740 	call	8774 <__mulsi3>
    98dc:	8085883a 	add	r2,r16,r2
    98e0:	10800104 	addi	r2,r2,4
    98e4:	10c00017 	ldw	r3,0(r2)
    98e8:	e0bffb17 	ldw	r2,-20(fp)
    98ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    98f0:	04000074 	movhi	r16,1
    98f4:	84293604 	addi	r16,r16,-23336
    98f8:	e0bffa17 	ldw	r2,-24(fp)
    98fc:	01400304 	movi	r5,12
    9900:	1009883a 	mov	r4,r2
    9904:	00087740 	call	8774 <__mulsi3>
    9908:	8085883a 	add	r2,r16,r2
    990c:	10800204 	addi	r2,r2,8
    9910:	10c00017 	ldw	r3,0(r2)
    9914:	e0bffb17 	ldw	r2,-20(fp)
    9918:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    991c:	e13ffa17 	ldw	r4,-24(fp)
    9920:	0009c400 	call	9c40 <alt_release_fd>
  }
} 
    9924:	0001883a 	nop
    9928:	e6ffff04 	addi	sp,fp,-4
    992c:	dfc00217 	ldw	ra,8(sp)
    9930:	df000117 	ldw	fp,4(sp)
    9934:	dc000017 	ldw	r16,0(sp)
    9938:	dec00304 	addi	sp,sp,12
    993c:	f800283a 	ret

00009940 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9940:	defffb04 	addi	sp,sp,-20
    9944:	dfc00415 	stw	ra,16(sp)
    9948:	df000315 	stw	fp,12(sp)
    994c:	df000304 	addi	fp,sp,12
    9950:	e13ffd15 	stw	r4,-12(fp)
    9954:	e17ffe15 	stw	r5,-8(fp)
    9958:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    995c:	01c07fc4 	movi	r7,511
    9960:	01800044 	movi	r6,1
    9964:	e17ffd17 	ldw	r5,-12(fp)
    9968:	01000074 	movhi	r4,1
    996c:	21293904 	addi	r4,r4,-23324
    9970:	000985c0 	call	985c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9974:	01c07fc4 	movi	r7,511
    9978:	000d883a 	mov	r6,zero
    997c:	e17ffe17 	ldw	r5,-8(fp)
    9980:	01000074 	movhi	r4,1
    9984:	21293604 	addi	r4,r4,-23336
    9988:	000985c0 	call	985c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    998c:	01c07fc4 	movi	r7,511
    9990:	01800044 	movi	r6,1
    9994:	e17fff17 	ldw	r5,-4(fp)
    9998:	01000074 	movhi	r4,1
    999c:	21293c04 	addi	r4,r4,-23312
    99a0:	000985c0 	call	985c <alt_open_fd>
}  
    99a4:	0001883a 	nop
    99a8:	e037883a 	mov	sp,fp
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	df000017 	ldw	fp,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret

000099bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    99bc:	defffe04 	addi	sp,sp,-8
    99c0:	dfc00115 	stw	ra,4(sp)
    99c4:	df000015 	stw	fp,0(sp)
    99c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    99cc:	d0a00717 	ldw	r2,-32740(gp)
    99d0:	10000326 	beq	r2,zero,99e0 <alt_get_errno+0x24>
    99d4:	d0a00717 	ldw	r2,-32740(gp)
    99d8:	103ee83a 	callr	r2
    99dc:	00000106 	br	99e4 <alt_get_errno+0x28>
    99e0:	d0a0c304 	addi	r2,gp,-31988
}
    99e4:	e037883a 	mov	sp,fp
    99e8:	dfc00117 	ldw	ra,4(sp)
    99ec:	df000017 	ldw	fp,0(sp)
    99f0:	dec00204 	addi	sp,sp,8
    99f4:	f800283a 	ret

000099f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    99f8:	defffb04 	addi	sp,sp,-20
    99fc:	dfc00415 	stw	ra,16(sp)
    9a00:	df000315 	stw	fp,12(sp)
    9a04:	dc000215 	stw	r16,8(sp)
    9a08:	df000304 	addi	fp,sp,12
    9a0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9a10:	e0bffe17 	ldw	r2,-8(fp)
    9a14:	10800217 	ldw	r2,8(r2)
    9a18:	10d00034 	orhi	r3,r2,16384
    9a1c:	e0bffe17 	ldw	r2,-8(fp)
    9a20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9a24:	e03ffd15 	stw	zero,-12(fp)
    9a28:	00002306 	br	9ab8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9a2c:	04000074 	movhi	r16,1
    9a30:	84293604 	addi	r16,r16,-23336
    9a34:	e0bffd17 	ldw	r2,-12(fp)
    9a38:	01400304 	movi	r5,12
    9a3c:	1009883a 	mov	r4,r2
    9a40:	00087740 	call	8774 <__mulsi3>
    9a44:	8085883a 	add	r2,r16,r2
    9a48:	10c00017 	ldw	r3,0(r2)
    9a4c:	e0bffe17 	ldw	r2,-8(fp)
    9a50:	10800017 	ldw	r2,0(r2)
    9a54:	1880151e 	bne	r3,r2,9aac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9a58:	04000074 	movhi	r16,1
    9a5c:	84293604 	addi	r16,r16,-23336
    9a60:	e0bffd17 	ldw	r2,-12(fp)
    9a64:	01400304 	movi	r5,12
    9a68:	1009883a 	mov	r4,r2
    9a6c:	00087740 	call	8774 <__mulsi3>
    9a70:	8085883a 	add	r2,r16,r2
    9a74:	10800204 	addi	r2,r2,8
    9a78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9a7c:	10000b0e 	bge	r2,zero,9aac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9a80:	01400304 	movi	r5,12
    9a84:	e13ffd17 	ldw	r4,-12(fp)
    9a88:	00087740 	call	8774 <__mulsi3>
    9a8c:	1007883a 	mov	r3,r2
    9a90:	00800074 	movhi	r2,1
    9a94:	10a93604 	addi	r2,r2,-23336
    9a98:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9a9c:	e0bffe17 	ldw	r2,-8(fp)
    9aa0:	18800226 	beq	r3,r2,9aac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9aa4:	00bffcc4 	movi	r2,-13
    9aa8:	00000806 	br	9acc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9aac:	e0bffd17 	ldw	r2,-12(fp)
    9ab0:	10800044 	addi	r2,r2,1
    9ab4:	e0bffd15 	stw	r2,-12(fp)
    9ab8:	d0a00617 	ldw	r2,-32744(gp)
    9abc:	1007883a 	mov	r3,r2
    9ac0:	e0bffd17 	ldw	r2,-12(fp)
    9ac4:	18bfd92e 	bgeu	r3,r2,9a2c <_gp+0xffff73d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9ac8:	0005883a 	mov	r2,zero
}
    9acc:	e6ffff04 	addi	sp,fp,-4
    9ad0:	dfc00217 	ldw	ra,8(sp)
    9ad4:	df000117 	ldw	fp,4(sp)
    9ad8:	dc000017 	ldw	r16,0(sp)
    9adc:	dec00304 	addi	sp,sp,12
    9ae0:	f800283a 	ret

00009ae4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9ae4:	defff604 	addi	sp,sp,-40
    9ae8:	dfc00915 	stw	ra,36(sp)
    9aec:	df000815 	stw	fp,32(sp)
    9af0:	df000804 	addi	fp,sp,32
    9af4:	e13ffd15 	stw	r4,-12(fp)
    9af8:	e17ffe15 	stw	r5,-8(fp)
    9afc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9b00:	00bfffc4 	movi	r2,-1
    9b04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9b08:	00bffb44 	movi	r2,-19
    9b0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9b10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9b14:	d1600404 	addi	r5,gp,-32752
    9b18:	e13ffd17 	ldw	r4,-12(fp)
    9b1c:	0009ce80 	call	9ce8 <alt_find_dev>
    9b20:	e0bff815 	stw	r2,-32(fp)
    9b24:	e0bff817 	ldw	r2,-32(fp)
    9b28:	1000051e 	bne	r2,zero,9b40 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9b2c:	e13ffd17 	ldw	r4,-12(fp)
    9b30:	0009d780 	call	9d78 <alt_find_file>
    9b34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9b38:	00800044 	movi	r2,1
    9b3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9b40:	e0bff817 	ldw	r2,-32(fp)
    9b44:	10002b26 	beq	r2,zero,9bf4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9b48:	e13ff817 	ldw	r4,-32(fp)
    9b4c:	0009e800 	call	9e80 <alt_get_fd>
    9b50:	e0bff915 	stw	r2,-28(fp)
    9b54:	e0bff917 	ldw	r2,-28(fp)
    9b58:	1000030e 	bge	r2,zero,9b68 <open+0x84>
    {
      status = index;
    9b5c:	e0bff917 	ldw	r2,-28(fp)
    9b60:	e0bffa15 	stw	r2,-24(fp)
    9b64:	00002506 	br	9bfc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9b68:	01400304 	movi	r5,12
    9b6c:	e13ff917 	ldw	r4,-28(fp)
    9b70:	00087740 	call	8774 <__mulsi3>
    9b74:	1007883a 	mov	r3,r2
    9b78:	00800074 	movhi	r2,1
    9b7c:	10a93604 	addi	r2,r2,-23336
    9b80:	1885883a 	add	r2,r3,r2
    9b84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9b88:	e0fffe17 	ldw	r3,-8(fp)
    9b8c:	00900034 	movhi	r2,16384
    9b90:	10bfffc4 	addi	r2,r2,-1
    9b94:	1886703a 	and	r3,r3,r2
    9b98:	e0bffc17 	ldw	r2,-16(fp)
    9b9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9ba0:	e0bffb17 	ldw	r2,-20(fp)
    9ba4:	1000051e 	bne	r2,zero,9bbc <open+0xd8>
    9ba8:	e13ffc17 	ldw	r4,-16(fp)
    9bac:	00099f80 	call	99f8 <alt_file_locked>
    9bb0:	e0bffa15 	stw	r2,-24(fp)
    9bb4:	e0bffa17 	ldw	r2,-24(fp)
    9bb8:	10001016 	blt	r2,zero,9bfc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9bbc:	e0bff817 	ldw	r2,-32(fp)
    9bc0:	10800317 	ldw	r2,12(r2)
    9bc4:	10000826 	beq	r2,zero,9be8 <open+0x104>
    9bc8:	e0bff817 	ldw	r2,-32(fp)
    9bcc:	10800317 	ldw	r2,12(r2)
    9bd0:	e1ffff17 	ldw	r7,-4(fp)
    9bd4:	e1bffe17 	ldw	r6,-8(fp)
    9bd8:	e17ffd17 	ldw	r5,-12(fp)
    9bdc:	e13ffc17 	ldw	r4,-16(fp)
    9be0:	103ee83a 	callr	r2
    9be4:	00000106 	br	9bec <open+0x108>
    9be8:	0005883a 	mov	r2,zero
    9bec:	e0bffa15 	stw	r2,-24(fp)
    9bf0:	00000206 	br	9bfc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9bf4:	00bffb44 	movi	r2,-19
    9bf8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9bfc:	e0bffa17 	ldw	r2,-24(fp)
    9c00:	1000090e 	bge	r2,zero,9c28 <open+0x144>
  {
    alt_release_fd (index);  
    9c04:	e13ff917 	ldw	r4,-28(fp)
    9c08:	0009c400 	call	9c40 <alt_release_fd>
    ALT_ERRNO = -status;
    9c0c:	00099bc0 	call	99bc <alt_get_errno>
    9c10:	1007883a 	mov	r3,r2
    9c14:	e0bffa17 	ldw	r2,-24(fp)
    9c18:	0085c83a 	sub	r2,zero,r2
    9c1c:	18800015 	stw	r2,0(r3)
    return -1;
    9c20:	00bfffc4 	movi	r2,-1
    9c24:	00000106 	br	9c2c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9c28:	e0bff917 	ldw	r2,-28(fp)
}
    9c2c:	e037883a 	mov	sp,fp
    9c30:	dfc00117 	ldw	ra,4(sp)
    9c34:	df000017 	ldw	fp,0(sp)
    9c38:	dec00204 	addi	sp,sp,8
    9c3c:	f800283a 	ret

00009c40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9c40:	defffc04 	addi	sp,sp,-16
    9c44:	dfc00315 	stw	ra,12(sp)
    9c48:	df000215 	stw	fp,8(sp)
    9c4c:	dc000115 	stw	r16,4(sp)
    9c50:	df000204 	addi	fp,sp,8
    9c54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9c58:	e0bffe17 	ldw	r2,-8(fp)
    9c5c:	108000d0 	cmplti	r2,r2,3
    9c60:	1000111e 	bne	r2,zero,9ca8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9c64:	04000074 	movhi	r16,1
    9c68:	84293604 	addi	r16,r16,-23336
    9c6c:	e0bffe17 	ldw	r2,-8(fp)
    9c70:	01400304 	movi	r5,12
    9c74:	1009883a 	mov	r4,r2
    9c78:	00087740 	call	8774 <__mulsi3>
    9c7c:	8085883a 	add	r2,r16,r2
    9c80:	10800204 	addi	r2,r2,8
    9c84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9c88:	04000074 	movhi	r16,1
    9c8c:	84293604 	addi	r16,r16,-23336
    9c90:	e0bffe17 	ldw	r2,-8(fp)
    9c94:	01400304 	movi	r5,12
    9c98:	1009883a 	mov	r4,r2
    9c9c:	00087740 	call	8774 <__mulsi3>
    9ca0:	8085883a 	add	r2,r16,r2
    9ca4:	10000015 	stw	zero,0(r2)
  }
}
    9ca8:	0001883a 	nop
    9cac:	e6ffff04 	addi	sp,fp,-4
    9cb0:	dfc00217 	ldw	ra,8(sp)
    9cb4:	df000117 	ldw	fp,4(sp)
    9cb8:	dc000017 	ldw	r16,0(sp)
    9cbc:	dec00304 	addi	sp,sp,12
    9cc0:	f800283a 	ret

00009cc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9cc4:	deffff04 	addi	sp,sp,-4
    9cc8:	df000015 	stw	fp,0(sp)
    9ccc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9cd0:	000170fa 	wrctl	ienable,zero
}
    9cd4:	0001883a 	nop
    9cd8:	e037883a 	mov	sp,fp
    9cdc:	df000017 	ldw	fp,0(sp)
    9ce0:	dec00104 	addi	sp,sp,4
    9ce4:	f800283a 	ret

00009ce8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9ce8:	defffa04 	addi	sp,sp,-24
    9cec:	dfc00515 	stw	ra,20(sp)
    9cf0:	df000415 	stw	fp,16(sp)
    9cf4:	df000404 	addi	fp,sp,16
    9cf8:	e13ffe15 	stw	r4,-8(fp)
    9cfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9d00:	e0bfff17 	ldw	r2,-4(fp)
    9d04:	10800017 	ldw	r2,0(r2)
    9d08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9d0c:	e13ffe17 	ldw	r4,-8(fp)
    9d10:	00088d80 	call	88d8 <strlen>
    9d14:	10800044 	addi	r2,r2,1
    9d18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9d1c:	00000d06 	br	9d54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9d20:	e0bffc17 	ldw	r2,-16(fp)
    9d24:	10800217 	ldw	r2,8(r2)
    9d28:	e0fffd17 	ldw	r3,-12(fp)
    9d2c:	180d883a 	mov	r6,r3
    9d30:	e17ffe17 	ldw	r5,-8(fp)
    9d34:	1009883a 	mov	r4,r2
    9d38:	0009f780 	call	9f78 <memcmp>
    9d3c:	1000021e 	bne	r2,zero,9d48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9d40:	e0bffc17 	ldw	r2,-16(fp)
    9d44:	00000706 	br	9d64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9d48:	e0bffc17 	ldw	r2,-16(fp)
    9d4c:	10800017 	ldw	r2,0(r2)
    9d50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9d54:	e0fffc17 	ldw	r3,-16(fp)
    9d58:	e0bfff17 	ldw	r2,-4(fp)
    9d5c:	18bff01e 	bne	r3,r2,9d20 <_gp+0xffff76c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9d60:	0005883a 	mov	r2,zero
}
    9d64:	e037883a 	mov	sp,fp
    9d68:	dfc00117 	ldw	ra,4(sp)
    9d6c:	df000017 	ldw	fp,0(sp)
    9d70:	dec00204 	addi	sp,sp,8
    9d74:	f800283a 	ret

00009d78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9d78:	defffb04 	addi	sp,sp,-20
    9d7c:	dfc00415 	stw	ra,16(sp)
    9d80:	df000315 	stw	fp,12(sp)
    9d84:	df000304 	addi	fp,sp,12
    9d88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9d8c:	d0a00217 	ldw	r2,-32760(gp)
    9d90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9d94:	00003106 	br	9e5c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9d98:	e0bffd17 	ldw	r2,-12(fp)
    9d9c:	10800217 	ldw	r2,8(r2)
    9da0:	1009883a 	mov	r4,r2
    9da4:	00088d80 	call	88d8 <strlen>
    9da8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9dac:	e0bffd17 	ldw	r2,-12(fp)
    9db0:	10c00217 	ldw	r3,8(r2)
    9db4:	e0bffe17 	ldw	r2,-8(fp)
    9db8:	10bfffc4 	addi	r2,r2,-1
    9dbc:	1885883a 	add	r2,r3,r2
    9dc0:	10800003 	ldbu	r2,0(r2)
    9dc4:	10803fcc 	andi	r2,r2,255
    9dc8:	1080201c 	xori	r2,r2,128
    9dcc:	10bfe004 	addi	r2,r2,-128
    9dd0:	10800bd8 	cmpnei	r2,r2,47
    9dd4:	1000031e 	bne	r2,zero,9de4 <alt_find_file+0x6c>
    {
      len -= 1;
    9dd8:	e0bffe17 	ldw	r2,-8(fp)
    9ddc:	10bfffc4 	addi	r2,r2,-1
    9de0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9de4:	e0bffe17 	ldw	r2,-8(fp)
    9de8:	e0ffff17 	ldw	r3,-4(fp)
    9dec:	1885883a 	add	r2,r3,r2
    9df0:	10800003 	ldbu	r2,0(r2)
    9df4:	10803fcc 	andi	r2,r2,255
    9df8:	1080201c 	xori	r2,r2,128
    9dfc:	10bfe004 	addi	r2,r2,-128
    9e00:	10800be0 	cmpeqi	r2,r2,47
    9e04:	1000081e 	bne	r2,zero,9e28 <alt_find_file+0xb0>
    9e08:	e0bffe17 	ldw	r2,-8(fp)
    9e0c:	e0ffff17 	ldw	r3,-4(fp)
    9e10:	1885883a 	add	r2,r3,r2
    9e14:	10800003 	ldbu	r2,0(r2)
    9e18:	10803fcc 	andi	r2,r2,255
    9e1c:	1080201c 	xori	r2,r2,128
    9e20:	10bfe004 	addi	r2,r2,-128
    9e24:	10000a1e 	bne	r2,zero,9e50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9e28:	e0bffd17 	ldw	r2,-12(fp)
    9e2c:	10800217 	ldw	r2,8(r2)
    9e30:	e0fffe17 	ldw	r3,-8(fp)
    9e34:	180d883a 	mov	r6,r3
    9e38:	e17fff17 	ldw	r5,-4(fp)
    9e3c:	1009883a 	mov	r4,r2
    9e40:	0009f780 	call	9f78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9e44:	1000021e 	bne	r2,zero,9e50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9e48:	e0bffd17 	ldw	r2,-12(fp)
    9e4c:	00000706 	br	9e6c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9e50:	e0bffd17 	ldw	r2,-12(fp)
    9e54:	10800017 	ldw	r2,0(r2)
    9e58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e5c:	e0fffd17 	ldw	r3,-12(fp)
    9e60:	d0a00204 	addi	r2,gp,-32760
    9e64:	18bfcc1e 	bne	r3,r2,9d98 <_gp+0xffff7740>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9e68:	0005883a 	mov	r2,zero
}
    9e6c:	e037883a 	mov	sp,fp
    9e70:	dfc00117 	ldw	ra,4(sp)
    9e74:	df000017 	ldw	fp,0(sp)
    9e78:	dec00204 	addi	sp,sp,8
    9e7c:	f800283a 	ret

00009e80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9e80:	defffa04 	addi	sp,sp,-24
    9e84:	dfc00515 	stw	ra,20(sp)
    9e88:	df000415 	stw	fp,16(sp)
    9e8c:	dc000315 	stw	r16,12(sp)
    9e90:	df000404 	addi	fp,sp,16
    9e94:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9e98:	00bffa04 	movi	r2,-24
    9e9c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9ea0:	e03ffc15 	stw	zero,-16(fp)
    9ea4:	00001d06 	br	9f1c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    9ea8:	04000074 	movhi	r16,1
    9eac:	84293604 	addi	r16,r16,-23336
    9eb0:	e0bffc17 	ldw	r2,-16(fp)
    9eb4:	01400304 	movi	r5,12
    9eb8:	1009883a 	mov	r4,r2
    9ebc:	00087740 	call	8774 <__mulsi3>
    9ec0:	8085883a 	add	r2,r16,r2
    9ec4:	10800017 	ldw	r2,0(r2)
    9ec8:	1000111e 	bne	r2,zero,9f10 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    9ecc:	04000074 	movhi	r16,1
    9ed0:	84293604 	addi	r16,r16,-23336
    9ed4:	e0bffc17 	ldw	r2,-16(fp)
    9ed8:	01400304 	movi	r5,12
    9edc:	1009883a 	mov	r4,r2
    9ee0:	00087740 	call	8774 <__mulsi3>
    9ee4:	8085883a 	add	r2,r16,r2
    9ee8:	e0fffe17 	ldw	r3,-8(fp)
    9eec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9ef0:	d0e00617 	ldw	r3,-32744(gp)
    9ef4:	e0bffc17 	ldw	r2,-16(fp)
    9ef8:	1880020e 	bge	r3,r2,9f04 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    9efc:	e0bffc17 	ldw	r2,-16(fp)
    9f00:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    9f04:	e0bffc17 	ldw	r2,-16(fp)
    9f08:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9f0c:	00000606 	br	9f28 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f10:	e0bffc17 	ldw	r2,-16(fp)
    9f14:	10800044 	addi	r2,r2,1
    9f18:	e0bffc15 	stw	r2,-16(fp)
    9f1c:	e0bffc17 	ldw	r2,-16(fp)
    9f20:	10800810 	cmplti	r2,r2,32
    9f24:	103fe01e 	bne	r2,zero,9ea8 <_gp+0xffff7850>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9f28:	e0bffd17 	ldw	r2,-12(fp)
}
    9f2c:	e6ffff04 	addi	sp,fp,-4
    9f30:	dfc00217 	ldw	ra,8(sp)
    9f34:	df000117 	ldw	fp,4(sp)
    9f38:	dc000017 	ldw	r16,0(sp)
    9f3c:	dec00304 	addi	sp,sp,12
    9f40:	f800283a 	ret

00009f44 <atexit>:
    9f44:	200b883a 	mov	r5,r4
    9f48:	000f883a 	mov	r7,zero
    9f4c:	000d883a 	mov	r6,zero
    9f50:	0009883a 	mov	r4,zero
    9f54:	0009fa81 	jmpi	9fa8 <__register_exitproc>

00009f58 <exit>:
    9f58:	defffe04 	addi	sp,sp,-8
    9f5c:	000b883a 	mov	r5,zero
    9f60:	dc000015 	stw	r16,0(sp)
    9f64:	dfc00115 	stw	ra,4(sp)
    9f68:	2021883a 	mov	r16,r4
    9f6c:	000a1000 	call	a100 <__call_exitprocs>
    9f70:	8009883a 	mov	r4,r16
    9f74:	000a2900 	call	a290 <_exit>

00009f78 <memcmp>:
    9f78:	218d883a 	add	r6,r4,r6
    9f7c:	21800826 	beq	r4,r6,9fa0 <memcmp+0x28>
    9f80:	20800003 	ldbu	r2,0(r4)
    9f84:	28c00003 	ldbu	r3,0(r5)
    9f88:	10c00226 	beq	r2,r3,9f94 <memcmp+0x1c>
    9f8c:	10c5c83a 	sub	r2,r2,r3
    9f90:	f800283a 	ret
    9f94:	21000044 	addi	r4,r4,1
    9f98:	29400044 	addi	r5,r5,1
    9f9c:	003ff706 	br	9f7c <_gp+0xffff7924>
    9fa0:	0005883a 	mov	r2,zero
    9fa4:	f800283a 	ret

00009fa8 <__register_exitproc>:
    9fa8:	00800074 	movhi	r2,1
    9fac:	10a99604 	addi	r2,r2,-22952
    9fb0:	10c00017 	ldw	r3,0(r2)
    9fb4:	defff904 	addi	sp,sp,-28
    9fb8:	dc000015 	stw	r16,0(sp)
    9fbc:	1c000c17 	ldw	r16,48(r3)
    9fc0:	dd400515 	stw	r21,20(sp)
    9fc4:	dd000415 	stw	r20,16(sp)
    9fc8:	dcc00315 	stw	r19,12(sp)
    9fcc:	dc800215 	stw	r18,8(sp)
    9fd0:	dc400115 	stw	r17,4(sp)
    9fd4:	dfc00615 	stw	ra,24(sp)
    9fd8:	202b883a 	mov	r21,r4
    9fdc:	2823883a 	mov	r17,r5
    9fe0:	3027883a 	mov	r19,r6
    9fe4:	3825883a 	mov	r18,r7
    9fe8:	1029883a 	mov	r20,r2
    9fec:	8000021e 	bne	r16,zero,9ff8 <__register_exitproc+0x50>
    9ff0:	1c000d04 	addi	r16,r3,52
    9ff4:	1c000c15 	stw	r16,48(r3)
    9ff8:	80800117 	ldw	r2,4(r16)
    9ffc:	00c007c4 	movi	r3,31
    a000:	1880110e 	bge	r3,r2,a048 <__register_exitproc+0xa0>
    a004:	00800034 	movhi	r2,0
    a008:	10800004 	addi	r2,r2,0
    a00c:	1000021e 	bne	r2,zero,a018 <__register_exitproc+0x70>
    a010:	00bfffc4 	movi	r2,-1
    a014:	00003106 	br	a0dc <__register_exitproc+0x134>
    a018:	01002304 	movi	r4,140
    a01c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a020:	1021883a 	mov	r16,r2
    a024:	103ffa26 	beq	r2,zero,a010 <_gp+0xffff79b8>
    a028:	10000115 	stw	zero,4(r2)
    a02c:	a0800017 	ldw	r2,0(r20)
    a030:	10c00c17 	ldw	r3,48(r2)
    a034:	80c00015 	stw	r3,0(r16)
    a038:	14000c15 	stw	r16,48(r2)
    a03c:	80002215 	stw	zero,136(r16)
    a040:	a8001d26 	beq	r21,zero,a0b8 <__register_exitproc+0x110>
    a044:	00000606 	br	a060 <__register_exitproc+0xb8>
    a048:	a8001b26 	beq	r21,zero,a0b8 <__register_exitproc+0x110>
    a04c:	80802217 	ldw	r2,136(r16)
    a050:	1000091e 	bne	r2,zero,a078 <__register_exitproc+0xd0>
    a054:	00800034 	movhi	r2,0
    a058:	10800004 	addi	r2,r2,0
    a05c:	103fec26 	beq	r2,zero,a010 <_gp+0xffff79b8>
    a060:	01004204 	movi	r4,264
    a064:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a068:	103fe926 	beq	r2,zero,a010 <_gp+0xffff79b8>
    a06c:	10004015 	stw	zero,256(r2)
    a070:	10004115 	stw	zero,260(r2)
    a074:	80802215 	stw	r2,136(r16)
    a078:	81400117 	ldw	r5,4(r16)
    a07c:	01000044 	movi	r4,1
    a080:	2947883a 	add	r3,r5,r5
    a084:	18c7883a 	add	r3,r3,r3
    a088:	10c7883a 	add	r3,r2,r3
    a08c:	1cc00015 	stw	r19,0(r3)
    a090:	2148983a 	sll	r4,r4,r5
    a094:	11404017 	ldw	r5,256(r2)
    a098:	290ab03a 	or	r5,r5,r4
    a09c:	11404015 	stw	r5,256(r2)
    a0a0:	1c802015 	stw	r18,128(r3)
    a0a4:	00c00084 	movi	r3,2
    a0a8:	a8c0031e 	bne	r21,r3,a0b8 <__register_exitproc+0x110>
    a0ac:	10c04117 	ldw	r3,260(r2)
    a0b0:	1908b03a 	or	r4,r3,r4
    a0b4:	11004115 	stw	r4,260(r2)
    a0b8:	80800117 	ldw	r2,4(r16)
    a0bc:	10c00044 	addi	r3,r2,1
    a0c0:	10800084 	addi	r2,r2,2
    a0c4:	1085883a 	add	r2,r2,r2
    a0c8:	1085883a 	add	r2,r2,r2
    a0cc:	80c00115 	stw	r3,4(r16)
    a0d0:	80a1883a 	add	r16,r16,r2
    a0d4:	84400015 	stw	r17,0(r16)
    a0d8:	0005883a 	mov	r2,zero
    a0dc:	dfc00617 	ldw	ra,24(sp)
    a0e0:	dd400517 	ldw	r21,20(sp)
    a0e4:	dd000417 	ldw	r20,16(sp)
    a0e8:	dcc00317 	ldw	r19,12(sp)
    a0ec:	dc800217 	ldw	r18,8(sp)
    a0f0:	dc400117 	ldw	r17,4(sp)
    a0f4:	dc000017 	ldw	r16,0(sp)
    a0f8:	dec00704 	addi	sp,sp,28
    a0fc:	f800283a 	ret

0000a100 <__call_exitprocs>:
    a100:	defff504 	addi	sp,sp,-44
    a104:	dd000515 	stw	r20,20(sp)
    a108:	05000074 	movhi	r20,1
    a10c:	dc800315 	stw	r18,12(sp)
    a110:	dfc00a15 	stw	ra,40(sp)
    a114:	df000915 	stw	fp,36(sp)
    a118:	ddc00815 	stw	r23,32(sp)
    a11c:	dd800715 	stw	r22,28(sp)
    a120:	dd400615 	stw	r21,24(sp)
    a124:	dcc00415 	stw	r19,16(sp)
    a128:	dc400215 	stw	r17,8(sp)
    a12c:	dc000115 	stw	r16,4(sp)
    a130:	d9000015 	stw	r4,0(sp)
    a134:	2825883a 	mov	r18,r5
    a138:	a5299604 	addi	r20,r20,-22952
    a13c:	a4400017 	ldw	r17,0(r20)
    a140:	8cc00c17 	ldw	r19,48(r17)
    a144:	8c400c04 	addi	r17,r17,48
    a148:	98004526 	beq	r19,zero,a260 <__call_exitprocs+0x160>
    a14c:	9c000117 	ldw	r16,4(r19)
    a150:	00900034 	movhi	r2,16384
    a154:	10bfffc4 	addi	r2,r2,-1
    a158:	9d402217 	ldw	r21,136(r19)
    a15c:	85bfffc4 	addi	r22,r16,-1
    a160:	80a1883a 	add	r16,r16,r2
    a164:	8421883a 	add	r16,r16,r16
    a168:	8421883a 	add	r16,r16,r16
    a16c:	ac2f883a 	add	r23,r21,r16
    a170:	84000204 	addi	r16,r16,8
    a174:	9c21883a 	add	r16,r19,r16
    a178:	b0002716 	blt	r22,zero,a218 <__call_exitprocs+0x118>
    a17c:	90000726 	beq	r18,zero,a19c <__call_exitprocs+0x9c>
    a180:	a800041e 	bne	r21,zero,a194 <__call_exitprocs+0x94>
    a184:	b5bfffc4 	addi	r22,r22,-1
    a188:	bdffff04 	addi	r23,r23,-4
    a18c:	843fff04 	addi	r16,r16,-4
    a190:	003ff906 	br	a178 <_gp+0xffff7b20>
    a194:	b9002017 	ldw	r4,128(r23)
    a198:	913ffa1e 	bne	r18,r4,a184 <_gp+0xffff7b2c>
    a19c:	99000117 	ldw	r4,4(r19)
    a1a0:	82000017 	ldw	r8,0(r16)
    a1a4:	213fffc4 	addi	r4,r4,-1
    a1a8:	b100021e 	bne	r22,r4,a1b4 <__call_exitprocs+0xb4>
    a1ac:	9d800115 	stw	r22,4(r19)
    a1b0:	00000106 	br	a1b8 <__call_exitprocs+0xb8>
    a1b4:	80000015 	stw	zero,0(r16)
    a1b8:	403ff226 	beq	r8,zero,a184 <_gp+0xffff7b2c>
    a1bc:	9f000117 	ldw	fp,4(r19)
    a1c0:	a8000526 	beq	r21,zero,a1d8 <__call_exitprocs+0xd8>
    a1c4:	00800044 	movi	r2,1
    a1c8:	1592983a 	sll	r9,r2,r22
    a1cc:	a9404017 	ldw	r5,256(r21)
    a1d0:	494a703a 	and	r5,r9,r5
    a1d4:	2800021e 	bne	r5,zero,a1e0 <__call_exitprocs+0xe0>
    a1d8:	403ee83a 	callr	r8
    a1dc:	00000906 	br	a204 <__call_exitprocs+0x104>
    a1e0:	a9004117 	ldw	r4,260(r21)
    a1e4:	4908703a 	and	r4,r9,r4
    a1e8:	2000041e 	bne	r4,zero,a1fc <__call_exitprocs+0xfc>
    a1ec:	b9400017 	ldw	r5,0(r23)
    a1f0:	d9000017 	ldw	r4,0(sp)
    a1f4:	403ee83a 	callr	r8
    a1f8:	00000206 	br	a204 <__call_exitprocs+0x104>
    a1fc:	b9000017 	ldw	r4,0(r23)
    a200:	403ee83a 	callr	r8
    a204:	99000117 	ldw	r4,4(r19)
    a208:	e13fcc1e 	bne	fp,r4,a13c <_gp+0xffff7ae4>
    a20c:	89000017 	ldw	r4,0(r17)
    a210:	993fdc26 	beq	r19,r4,a184 <_gp+0xffff7b2c>
    a214:	003fc906 	br	a13c <_gp+0xffff7ae4>
    a218:	00800034 	movhi	r2,0
    a21c:	10800004 	addi	r2,r2,0
    a220:	10000f26 	beq	r2,zero,a260 <__call_exitprocs+0x160>
    a224:	99400117 	ldw	r5,4(r19)
    a228:	99000017 	ldw	r4,0(r19)
    a22c:	2800091e 	bne	r5,zero,a254 <__call_exitprocs+0x154>
    a230:	20000826 	beq	r4,zero,a254 <__call_exitprocs+0x154>
    a234:	89000015 	stw	r4,0(r17)
    a238:	a8000226 	beq	r21,zero,a244 <__call_exitprocs+0x144>
    a23c:	a809883a 	mov	r4,r21
    a240:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a244:	9809883a 	mov	r4,r19
    a248:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a24c:	8cc00017 	ldw	r19,0(r17)
    a250:	003fbd06 	br	a148 <_gp+0xffff7af0>
    a254:	9823883a 	mov	r17,r19
    a258:	2027883a 	mov	r19,r4
    a25c:	003fba06 	br	a148 <_gp+0xffff7af0>
    a260:	dfc00a17 	ldw	ra,40(sp)
    a264:	df000917 	ldw	fp,36(sp)
    a268:	ddc00817 	ldw	r23,32(sp)
    a26c:	dd800717 	ldw	r22,28(sp)
    a270:	dd400617 	ldw	r21,24(sp)
    a274:	dd000517 	ldw	r20,20(sp)
    a278:	dcc00417 	ldw	r19,16(sp)
    a27c:	dc800317 	ldw	r18,12(sp)
    a280:	dc400217 	ldw	r17,8(sp)
    a284:	dc000117 	ldw	r16,4(sp)
    a288:	dec00b04 	addi	sp,sp,44
    a28c:	f800283a 	ret

0000a290 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a290:	defffd04 	addi	sp,sp,-12
    a294:	df000215 	stw	fp,8(sp)
    a298:	df000204 	addi	fp,sp,8
    a29c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a2a0:	0001883a 	nop
    a2a4:	e0bfff17 	ldw	r2,-4(fp)
    a2a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a2ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a2b0:	10000226 	beq	r2,zero,a2bc <_exit+0x2c>
    ALT_SIM_FAIL();
    a2b4:	002af070 	cmpltui	zero,zero,43969
    a2b8:	00000106 	br	a2c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a2bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a2c0:	003fff06 	br	a2c0 <_gp+0xffff7c68>
